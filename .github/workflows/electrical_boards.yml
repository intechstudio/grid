name: "electrical_boards"

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    paths:
      - 'Electrical/Design/**'
      - '.github/workflows/electrical_boards.yml'
      - '.github/workflows/convert_bottom_position.py'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  generate-artifacts:
    name: PCB fabrication files
    runs-on: ubuntu-latest
    container: "setsoft/kicad_auto:ki7"    
    strategy:
      fail-fast: false
      matrix:
        board:
        - 'INTERFACE'
        - 'PO16_BU16'
        - 'PBF4'
        - 'EN16'
        - 'EF44'

    steps:
    - uses: actions/checkout@v2

    - name: Run PCB stuff
      run: |
        make -C Electrical/Design/${{ matrix.board }}

    - name: Print errors
      if: ${{ always() }}
      run: |
        cat Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}-drc.txt
        cat Electrical/Design/${{ matrix.board }}/kibot_error.log

    - name: Set Date
      run: echo "action_date=$(date +'%Y-%m-%d-%H%M')" >> $GITHUB_ENV

    - name: Convert position file
      run: |
        python3 .github/workflows/convert_bottom_position.py ../../Electrical/Design/${{ matrix.board }}/mfg-bot/mfg/${{ matrix.board }}-both_pos.csv ../../Electrical/Design/${{ matrix.board }}/mfg-bot/mfg/${{ matrix.board }}-both_pos_fixed.csv
        rm Electrical/Design/${{ matrix.board }}/mfg-bot/mfg/${{ matrix.board }}-both_pos.csv
  
    - name: Zipping gerber      
      uses: vimtor/action-zip@v1
      with:
        files: Electrical/Design/${{ matrix.board }}/mfg-bot/JLCPCB
        dest: Electrical/Design/${{ matrix.board }}/mfg-bot/mfg/${{ matrix.board }}-gerber.zip

    - name: Rename pdf files and removing non-zipped gerber files
      run: |
        mv Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}-erc.txt Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}_erc.txt
        mv Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}-drc.txt Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}_drc.txt
        mv Electrical/Design/${{ matrix.board }}/mfg-bot/Schematic.pdf Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}_Schematic.pdf
        mv Electrical/Design/${{ matrix.board }}/mfg-bot/PCB_Top.pdf Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}_PCB_Top.pdf
        mv Electrical/Design/${{ matrix.board }}/mfg-bot/PCB_Bottom.pdf Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}_PCB_Bottom.pdf
        mv Electrical/Design/${{ matrix.board }}/kibot_error.log Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}_kibot_error.log
        rm -r Electrical/Design/${{ matrix.board }}/mfg-bot/JLCPCB

    - name: Upload results
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: "result_${{ matrix.board }}_${{ env.action_date }}.zip"
        path: |
          Electrical/Design/${{ matrix.board }}/mfg-bot/
        if-no-files-found: warn

    - name: Zipping artifacts      
      uses: vimtor/action-zip@v1
      with:
        files: Electrical/Design/${{ matrix.board }}/mfg-bot/
        dest: "result_${{ matrix.board }}_${{ env.action_date }}.zip"
        
    - name: Copy files to preview folder
      run: |
        mkdir -p Preview/Preview/Electrical && cp -r Electrical/Design/${{ matrix.board }}/mfg-bot/* Preview/Preview/Electrical
        mkdir -p temp && cp Electrical/Design/${{ matrix.board }}/mfg-bot/${{ matrix.board }}_kibot_error.log temp/${{ matrix.board }}.txt

  deploy-results:
    runs-on: ubuntu-latest
    needs: generate-artifacts    
    steps:
      - uses: actions/checkout@v3

      - name: Download reports' artifacts
        uses: actions/download-artifact@v3
        with:
          path: download

      - name: Set up Python for zipping
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Replace 'x' with the desired Python version

      - name: Unzip all files from download
        run: |
          python -m pip install --upgrade pip
          pip install unzip
          mkdir temp
          for file in download/*.zip; do
            unzip -qq "$file" -d temp/
          done

      - name: Display Unzipped Files
        run: ls temp/