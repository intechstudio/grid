
E54_USB_COMPOSITE_EXAMPLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c4  20000000  000033e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200c4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200c4  2**0
                  CONTENTS
  4 .bss          00000658  200000c4  000034ac  000200c4  2**2
                  ALLOC
  5 .stack        00010004  2000071c  00003b04  000200c4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001d633  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000038d3  00000000  00000000  0003d77e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a5d4  00000000  00000000  00041051  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000708  00000000  00000000  0004b625  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad0  00000000  00000000  0004bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034733  00000000  00000000  0004c7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000128ec  00000000  00000000  00080f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011c95a  00000000  00000000  0009381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001194  00000000  00000000  001b0178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	20 07 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00      .. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	e1 0c 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 c1 1f 00 00     ................
     184:	cd 1f 00 00 d9 1f 00 00 e5 1f 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000c4 	.word	0x200000c4
     280:	00000000 	.word	0x00000000
     284:	000033e8 	.word	0x000033e8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000033e8 	.word	0x000033e8
     2c4:	200000c8 	.word	0x200000c8
     2c8:	000033e8 	.word	0x000033e8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000449 	.word	0x00000449
     2e0:	0000325d 	.word	0x0000325d

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	000033e8 	.word	0x000033e8
     364:	200000c4 	.word	0x200000c4
     368:	2000071c 	.word	0x2000071c
     36c:	200000c4 	.word	0x200000c4
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00003269 	.word	0x00003269
     37c:	00003029 	.word	0x00003029

00000380 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     380:	4b1e      	ldr	r3, [pc, #120]	; (3fc <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     382:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     386:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     388:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     38c:	6299      	str	r1, [r3, #40]	; 0x28
     38e:	481c      	ldr	r0, [pc, #112]	; (400 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     390:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     392:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     394:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     398:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     39c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3a8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3b8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     3c4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c6:	6299      	str	r1, [r3, #40]	; 0x28
     3c8:	490e      	ldr	r1, [pc, #56]	; (404 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     3ca:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3cc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3ce:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     3d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3da:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     3de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ea:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     3fa:	4770      	bx	lr
     3fc:	41008000 	.word	0x41008000
     400:	c0000100 	.word	0xc0000100
     404:	c0000200 	.word	0xc0000200

00000408 <USB_DEVICE_INSTANCE_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     408:	2241      	movs	r2, #65	; 0x41
     40a:	4b07      	ldr	r3, [pc, #28]	; (428 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     40c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     410:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     414:	691a      	ldr	r2, [r3, #16]
     416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     41a:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     41c:	699a      	ldr	r2, [r3, #24]
     41e:	f042 0201 	orr.w	r2, r2, #1
     422:	619a      	str	r2, [r3, #24]
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40001c00 	.word	0x40001c00

0000042c <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     42c:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <USB_DEVICE_INSTANCE_init+0x10>)
     430:	4798      	blx	r3
	usb_d_init();
     432:	4b03      	ldr	r3, [pc, #12]	; (440 <USB_DEVICE_INSTANCE_init+0x14>)
     434:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     436:	4b03      	ldr	r3, [pc, #12]	; (444 <USB_DEVICE_INSTANCE_init+0x18>)
     438:	4798      	blx	r3
     43a:	bd08      	pop	{r3, pc}
     43c:	00000409 	.word	0x00000409
     440:	00000765 	.word	0x00000765
     444:	00000381 	.word	0x00000381

00000448 <system_init>:
}

void system_init(void)
{
     448:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     44a:	4b24      	ldr	r3, [pc, #144]	; (4dc <system_init+0x94>)
     44c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44e:	4b24      	ldr	r3, [pc, #144]	; (4e0 <system_init+0x98>)
     450:	2208      	movs	r2, #8
     452:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     454:	4923      	ldr	r1, [pc, #140]	; (4e4 <system_init+0x9c>)
     456:	6299      	str	r1, [r3, #40]	; 0x28
     458:	4923      	ldr	r1, [pc, #140]	; (4e8 <system_init+0xa0>)
     45a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     45e:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
     462:	f040 0004 	orr.w	r0, r0, #4
     466:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     46a:	619a      	str	r2, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     478:	2201      	movs	r2, #1
     47a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47e:	4c1b      	ldr	r4, [pc, #108]	; (4ec <system_init+0xa4>)
     480:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     484:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     48c:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
     490:	f040 0004 	orr.w	r0, r0, #4
     494:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     498:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     49c:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a4:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4a8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ac:	f8c3 41a8 	str.w	r4, [r3, #424]	; 0x1a8
     4b0:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4b8:	f893 11c0 	ldrb.w	r1, [r3, #448]	; 0x1c0
     4bc:	f041 0104 	orr.w	r1, r1, #4
     4c0:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4c4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c8:	f893 21c0 	ldrb.w	r2, [r3, #448]	; 0x1c0
	tmp &= ~PORT_PINCFG_PMUXEN;
     4cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(BUTTON1, GPIO_PIN_FUNCTION_OFF);

	USB_DEVICE_INSTANCE_init();
     4d4:	4b06      	ldr	r3, [pc, #24]	; (4f0 <system_init+0xa8>)
     4d6:	4798      	blx	r3
     4d8:	bd10      	pop	{r4, pc}
     4da:	bf00      	nop
     4dc:	00000b19 	.word	0x00000b19
     4e0:	41008000 	.word	0x41008000
     4e4:	40020008 	.word	0x40020008
     4e8:	c0020000 	.word	0xc0020000
     4ec:	40020001 	.word	0x40020001
     4f0:	0000042d 	.word	0x0000042d

000004f4 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     4f4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     4f8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     4fa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     4fc:	f3bf 8f5f 	dmb	sy
     500:	4770      	bx	lr

00000502 <atomic_leave_critical>:
     502:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     506:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     508:	f383 8810 	msr	PRIMASK, r3
     50c:	4770      	bx	lr
	...

00000510 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     510:	4b0f      	ldr	r3, [pc, #60]	; (550 <_usb_d_find_ep+0x40>)
     512:	7859      	ldrb	r1, [r3, #1]
     514:	4288      	cmp	r0, r1
     516:	d018      	beq.n	54a <_usb_d_find_ep+0x3a>
{
     518:	b430      	push	{r4, r5}
     51a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     51c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     51e:	f000 050f 	and.w	r5, r0, #15
     522:	e007      	b.n	534 <_usb_d_find_ep+0x24>
     524:	3301      	adds	r3, #1
     526:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     528:	2b0d      	cmp	r3, #13
     52a:	d009      	beq.n	540 <_usb_d_find_ep+0x30>
     52c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     52e:	7851      	ldrb	r1, [r2, #1]
     530:	4281      	cmp	r1, r0
     532:	d007      	beq.n	544 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     534:	7814      	ldrb	r4, [r2, #0]
     536:	2c00      	cmp	r4, #0
     538:	d1f4      	bne.n	524 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     53a:	428d      	cmp	r5, r1
     53c:	d1f2      	bne.n	524 <_usb_d_find_ep+0x14>
     53e:	e001      	b.n	544 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     540:	f04f 33ff 	mov.w	r3, #4294967295
}
     544:	4618      	mov	r0, r3
     546:	bc30      	pop	{r4, r5}
     548:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     54a:	2300      	movs	r3, #0
}
     54c:	4618      	mov	r0, r3
     54e:	4770      	bx	lr
     550:	200000e0 	.word	0x200000e0

00000554 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     554:	2000      	movs	r0, #0
     556:	4770      	bx	lr

00000558 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     558:	b538      	push	{r3, r4, r5, lr}
     55a:	4604      	mov	r4, r0
     55c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     55e:	4b09      	ldr	r3, [pc, #36]	; (584 <usb_d_cb_trans_more+0x2c>)
     560:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     562:	4b09      	ldr	r3, [pc, #36]	; (588 <usb_d_cb_trans_more+0x30>)
     564:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     568:	789b      	ldrb	r3, [r3, #2]
     56a:	2b03      	cmp	r3, #3
     56c:	d001      	beq.n	572 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     56e:	2000      	movs	r0, #0
}
     570:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     572:	4b05      	ldr	r3, [pc, #20]	; (588 <usb_d_cb_trans_more+0x30>)
     574:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     578:	6983      	ldr	r3, [r0, #24]
     57a:	4629      	mov	r1, r5
     57c:	4620      	mov	r0, r4
     57e:	4798      	blx	r3
     580:	bd38      	pop	{r3, r4, r5, pc}
     582:	bf00      	nop
     584:	00000511 	.word	0x00000511
     588:	200000e0 	.word	0x200000e0

0000058c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     58c:	b5f0      	push	{r4, r5, r6, r7, lr}
     58e:	b085      	sub	sp, #20
     590:	4606      	mov	r6, r0
     592:	460d      	mov	r5, r1
     594:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     596:	4b4d      	ldr	r3, [pc, #308]	; (6cc <_usb_d_cb_trans_done+0x140>)
     598:	4798      	blx	r3
     59a:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     59c:	2d00      	cmp	r5, #0
     59e:	d15b      	bne.n	658 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     5a0:	4a4b      	ldr	r2, [pc, #300]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     5a2:	0143      	lsls	r3, r0, #5
     5a4:	18d1      	adds	r1, r2, r3
     5a6:	2000      	movs	r0, #0
     5a8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     5aa:	5cd3      	ldrb	r3, [r2, r3]
     5ac:	b173      	cbz	r3, 5cc <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     5ae:	4b48      	ldr	r3, [pc, #288]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     5b0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     5b4:	2201      	movs	r2, #1
     5b6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     5b8:	4845      	ldr	r0, [pc, #276]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     5ba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     5be:	69c3      	ldr	r3, [r0, #28]
     5c0:	463a      	mov	r2, r7
     5c2:	78c1      	ldrb	r1, [r0, #3]
     5c4:	4630      	mov	r0, r6
     5c6:	4798      	blx	r3
}
     5c8:	b005      	add	sp, #20
     5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     5cc:	788b      	ldrb	r3, [r1, #2]
     5ce:	2b03      	cmp	r3, #3
     5d0:	d00b      	beq.n	5ea <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     5d2:	483f      	ldr	r0, [pc, #252]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     5d4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     5d8:	4614      	mov	r4, r2
     5da:	69d3      	ldr	r3, [r2, #28]
     5dc:	320c      	adds	r2, #12
     5de:	2100      	movs	r1, #0
     5e0:	7860      	ldrb	r0, [r4, #1]
     5e2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     5e4:	2302      	movs	r3, #2
     5e6:	70a3      	strb	r3, [r4, #2]
     5e8:	e7ee      	b.n	5c8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     5ea:	460b      	mov	r3, r1
     5ec:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     5f0:	460a      	mov	r2, r1
     5f2:	69ce      	ldr	r6, [r1, #28]
     5f4:	320c      	adds	r2, #12
     5f6:	2101      	movs	r1, #1
     5f8:	7858      	ldrb	r0, [r3, #1]
     5fa:	47b0      	blx	r6
		if (err) {
     5fc:	b1a0      	cbz	r0, 628 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     5fe:	4b34      	ldr	r3, [pc, #208]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     600:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     604:	2205      	movs	r2, #5
     606:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     608:	2202      	movs	r2, #2
     60a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     60c:	2d00      	cmp	r5, #0
     60e:	db09      	blt.n	624 <_usb_d_cb_trans_done+0x98>
     610:	482f      	ldr	r0, [pc, #188]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     612:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     616:	7840      	ldrb	r0, [r0, #1]
     618:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     61c:	2101      	movs	r1, #1
     61e:	4b2d      	ldr	r3, [pc, #180]	; (6d4 <_usb_d_cb_trans_done+0x148>)
     620:	4798      	blx	r3
     622:	e7d1      	b.n	5c8 <_usb_d_cb_trans_done+0x3c>
     624:	7858      	ldrb	r0, [r3, #1]
     626:	e7f9      	b.n	61c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     628:	4829      	ldr	r0, [pc, #164]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     62a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     62e:	2304      	movs	r3, #4
     630:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     632:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     634:	2200      	movs	r2, #0
     636:	9201      	str	r2, [sp, #4]
     638:	9202      	str	r2, [sp, #8]
     63a:	4295      	cmp	r5, r2
     63c:	bfac      	ite	ge
     63e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     642:	f003 030f 	andlt.w	r3, r3, #15
     646:	f88d 300c 	strb.w	r3, [sp, #12]
     64a:	2301      	movs	r3, #1
     64c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     650:	a801      	add	r0, sp, #4
     652:	4b21      	ldr	r3, [pc, #132]	; (6d8 <_usb_d_cb_trans_done+0x14c>)
     654:	4798      	blx	r3
     656:	e7b7      	b.n	5c8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     658:	2d01      	cmp	r5, #1
     65a:	d00a      	beq.n	672 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     65c:	2d02      	cmp	r5, #2
     65e:	d01c      	beq.n	69a <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     660:	2d03      	cmp	r5, #3
     662:	d02a      	beq.n	6ba <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     664:	4b1a      	ldr	r3, [pc, #104]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     666:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     66a:	2206      	movs	r2, #6
     66c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     66e:	70da      	strb	r2, [r3, #3]
     670:	e7a2      	b.n	5b8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     672:	4a17      	ldr	r2, [pc, #92]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     674:	0143      	lsls	r3, r0, #5
     676:	18d1      	adds	r1, r2, r3
     678:	2002      	movs	r0, #2
     67a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     67c:	5cd3      	ldrb	r3, [r2, r3]
     67e:	b12b      	cbz	r3, 68c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     680:	4b13      	ldr	r3, [pc, #76]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     682:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     686:	2205      	movs	r2, #5
     688:	709a      	strb	r2, [r3, #2]
     68a:	e795      	b.n	5b8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     68c:	460b      	mov	r3, r1
     68e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     690:	2100      	movs	r1, #0
     692:	4630      	mov	r0, r6
     694:	4b0f      	ldr	r3, [pc, #60]	; (6d4 <_usb_d_cb_trans_done+0x148>)
     696:	4798      	blx	r3
     698:	e78e      	b.n	5b8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     69a:	4a0d      	ldr	r2, [pc, #52]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     69c:	0143      	lsls	r3, r0, #5
     69e:	18d1      	adds	r1, r2, r3
     6a0:	2004      	movs	r0, #4
     6a2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     6a4:	5cd3      	ldrb	r3, [r2, r3]
     6a6:	b12b      	cbz	r3, 6b4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     6a8:	4b09      	ldr	r3, [pc, #36]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     6aa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     6ae:	2201      	movs	r2, #1
     6b0:	709a      	strb	r2, [r3, #2]
     6b2:	e781      	b.n	5b8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     6b4:	2302      	movs	r3, #2
     6b6:	708b      	strb	r3, [r1, #2]
			return;
     6b8:	e786      	b.n	5c8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     6ba:	4b05      	ldr	r3, [pc, #20]	; (6d0 <_usb_d_cb_trans_done+0x144>)
     6bc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     6c0:	2200      	movs	r2, #0
     6c2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     6c4:	2205      	movs	r2, #5
     6c6:	70da      	strb	r2, [r3, #3]
     6c8:	e776      	b.n	5b8 <_usb_d_cb_trans_done+0x2c>
     6ca:	bf00      	nop
     6cc:	00000511 	.word	0x00000511
     6d0:	200000e0 	.word	0x200000e0
     6d4:	00001bdd 	.word	0x00001bdd
     6d8:	00001d85 	.word	0x00001d85

000006dc <usb_d_cb_trans_setup>:
{
     6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6e0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     6e2:	4b1c      	ldr	r3, [pc, #112]	; (754 <usb_d_cb_trans_setup+0x78>)
     6e4:	4798      	blx	r3
     6e6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     6e8:	4c1b      	ldr	r4, [pc, #108]	; (758 <usb_d_cb_trans_setup+0x7c>)
     6ea:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     6ee:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     6f0:	4621      	mov	r1, r4
     6f2:	4628      	mov	r0, r5
     6f4:	4b19      	ldr	r3, [pc, #100]	; (75c <usb_d_cb_trans_setup+0x80>)
     6f6:	4798      	blx	r3
	if (n != 8) {
     6f8:	b2c0      	uxtb	r0, r0
     6fa:	2808      	cmp	r0, #8
     6fc:	d009      	beq.n	712 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     6fe:	2101      	movs	r1, #1
     700:	4628      	mov	r0, r5
     702:	4c17      	ldr	r4, [pc, #92]	; (760 <usb_d_cb_trans_setup+0x84>)
     704:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     706:	2101      	movs	r1, #1
     708:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     70c:	47a0      	blx	r4
		return;
     70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     712:	2100      	movs	r1, #0
     714:	4628      	mov	r0, r5
     716:	4f12      	ldr	r7, [pc, #72]	; (760 <usb_d_cb_trans_setup+0x84>)
     718:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     71a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     71e:	2100      	movs	r1, #0
     720:	4640      	mov	r0, r8
     722:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     724:	4b0c      	ldr	r3, [pc, #48]	; (758 <usb_d_cb_trans_setup+0x7c>)
     726:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     72a:	2201      	movs	r2, #1
     72c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     72e:	695b      	ldr	r3, [r3, #20]
     730:	4621      	mov	r1, r4
     732:	4628      	mov	r0, r5
     734:	4798      	blx	r3
     736:	b108      	cbz	r0, 73c <usb_d_cb_trans_setup+0x60>
     738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     73c:	4b06      	ldr	r3, [pc, #24]	; (758 <usb_d_cb_trans_setup+0x7c>)
     73e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     742:	2305      	movs	r3, #5
     744:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     746:	2101      	movs	r1, #1
     748:	4628      	mov	r0, r5
     74a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     74c:	2101      	movs	r1, #1
     74e:	4640      	mov	r0, r8
     750:	47b8      	blx	r7
     752:	e7f1      	b.n	738 <usb_d_cb_trans_setup+0x5c>
     754:	00000511 	.word	0x00000511
     758:	200000e0 	.word	0x200000e0
     75c:	00001d25 	.word	0x00001d25
     760:	00001bdd 	.word	0x00001bdd

00000764 <usb_d_init>:

int32_t usb_d_init(void)
{
     764:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     766:	4b11      	ldr	r3, [pc, #68]	; (7ac <usb_d_init+0x48>)
     768:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     76a:	2800      	cmp	r0, #0
     76c:	db1d      	blt.n	7aa <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     76e:	4c10      	ldr	r4, [pc, #64]	; (7b0 <usb_d_init+0x4c>)
     770:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
     774:	2100      	movs	r1, #0
     776:	4620      	mov	r0, r4
     778:	4b0e      	ldr	r3, [pc, #56]	; (7b4 <usb_d_init+0x50>)
     77a:	4798      	blx	r3
     77c:	4623      	mov	r3, r4
     77e:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     782:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     784:	4a0c      	ldr	r2, [pc, #48]	; (7b8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     786:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     788:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     78a:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     78c:	61da      	str	r2, [r3, #28]
     78e:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     790:	4283      	cmp	r3, r0
     792:	d1f8      	bne.n	786 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     794:	4909      	ldr	r1, [pc, #36]	; (7bc <usb_d_init+0x58>)
     796:	2000      	movs	r0, #0
     798:	4c09      	ldr	r4, [pc, #36]	; (7c0 <usb_d_init+0x5c>)
     79a:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     79c:	4909      	ldr	r1, [pc, #36]	; (7c4 <usb_d_init+0x60>)
     79e:	2001      	movs	r0, #1
     7a0:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     7a2:	4909      	ldr	r1, [pc, #36]	; (7c8 <usb_d_init+0x64>)
     7a4:	2002      	movs	r0, #2
     7a6:	47a0      	blx	r4
	return ERR_NONE;
     7a8:	2000      	movs	r0, #0
}
     7aa:	bd10      	pop	{r4, pc}
     7ac:	000015b5 	.word	0x000015b5
     7b0:	200000e0 	.word	0x200000e0
     7b4:	000032c7 	.word	0x000032c7
     7b8:	00000555 	.word	0x00000555
     7bc:	000006dd 	.word	0x000006dd
     7c0:	00001f8d 	.word	0x00001f8d
     7c4:	00000559 	.word	0x00000559
     7c8:	0000058d 	.word	0x0000058d

000007cc <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     7cc:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     7ce:	4b01      	ldr	r3, [pc, #4]	; (7d4 <usb_d_register_callback+0x8>)
     7d0:	4798      	blx	r3
     7d2:	bd08      	pop	{r3, pc}
     7d4:	00001f65 	.word	0x00001f65

000007d8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     7d8:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     7da:	4b01      	ldr	r3, [pc, #4]	; (7e0 <usb_d_enable+0x8>)
     7dc:	4798      	blx	r3
}
     7de:	bd08      	pop	{r3, pc}
     7e0:	000016bd 	.word	0x000016bd

000007e4 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     7e4:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     7e6:	4b01      	ldr	r3, [pc, #4]	; (7ec <usb_d_attach+0x8>)
     7e8:	4798      	blx	r3
     7ea:	bd08      	pop	{r3, pc}
     7ec:	00001729 	.word	0x00001729

000007f0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     7f0:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     7f2:	4b01      	ldr	r3, [pc, #4]	; (7f8 <usb_d_set_address+0x8>)
     7f4:	4798      	blx	r3
     7f6:	bd08      	pop	{r3, pc}
     7f8:	0000173b 	.word	0x0000173b

000007fc <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7fe:	4606      	mov	r6, r0
     800:	460c      	mov	r4, r1
     802:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <usb_d_ep_init+0x48>)
     806:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     808:	2800      	cmp	r0, #0
     80a:	da14      	bge.n	836 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     80c:	20ff      	movs	r0, #255	; 0xff
     80e:	4b0d      	ldr	r3, [pc, #52]	; (844 <usb_d_ep_init+0x48>)
     810:	4798      	blx	r3
		if (ep_index < 0) {
     812:	1e05      	subs	r5, r0, #0
     814:	db12      	blt.n	83c <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     816:	463a      	mov	r2, r7
     818:	4621      	mov	r1, r4
     81a:	4630      	mov	r0, r6
     81c:	4b0a      	ldr	r3, [pc, #40]	; (848 <usb_d_ep_init+0x4c>)
     81e:	4798      	blx	r3
	if (rc < 0) {
     820:	2800      	cmp	r0, #0
     822:	db0d      	blt.n	840 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     824:	4b09      	ldr	r3, [pc, #36]	; (84c <usb_d_ep_init+0x50>)
     826:	0168      	lsls	r0, r5, #5
     828:	181a      	adds	r2, r3, r0
     82a:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     82c:	f004 0403 	and.w	r4, r4, #3
     830:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     832:	2000      	movs	r0, #0
     834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     836:	f06f 0013 	mvn.w	r0, #19
     83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     83c:	f06f 0014 	mvn.w	r0, #20
}
     840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     842:	bf00      	nop
     844:	00000511 	.word	0x00000511
     848:	00001749 	.word	0x00001749
     84c:	200000e0 	.word	0x200000e0

00000850 <usb_d_ep0_init>:
{
     850:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     852:	4602      	mov	r2, r0
     854:	2100      	movs	r1, #0
     856:	4608      	mov	r0, r1
     858:	4b01      	ldr	r3, [pc, #4]	; (860 <usb_d_ep0_init+0x10>)
     85a:	4798      	blx	r3
}
     85c:	bd08      	pop	{r3, pc}
     85e:	bf00      	nop
     860:	000007fd 	.word	0x000007fd

00000864 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     864:	b538      	push	{r3, r4, r5, lr}
     866:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     868:	4b06      	ldr	r3, [pc, #24]	; (884 <usb_d_ep_deinit+0x20>)
     86a:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     86c:	1e04      	subs	r4, r0, #0
     86e:	db07      	blt.n	880 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     870:	4628      	mov	r0, r5
     872:	4b05      	ldr	r3, [pc, #20]	; (888 <usb_d_ep_deinit+0x24>)
     874:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     876:	4805      	ldr	r0, [pc, #20]	; (88c <usb_d_ep_deinit+0x28>)
     878:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     87c:	23ff      	movs	r3, #255	; 0xff
     87e:	7043      	strb	r3, [r0, #1]
     880:	bd38      	pop	{r3, r4, r5, pc}
     882:	bf00      	nop
     884:	00000511 	.word	0x00000511
     888:	00001861 	.word	0x00001861
     88c:	200000e0 	.word	0x200000e0

00000890 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     890:	b538      	push	{r3, r4, r5, lr}
     892:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     894:	4b0e      	ldr	r3, [pc, #56]	; (8d0 <usb_d_ep_enable+0x40>)
     896:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     898:	1e04      	subs	r4, r0, #0
     89a:	db16      	blt.n	8ca <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     89c:	0163      	lsls	r3, r4, #5
     89e:	4a0d      	ldr	r2, [pc, #52]	; (8d4 <usb_d_ep_enable+0x44>)
     8a0:	5cd3      	ldrb	r3, [r2, r3]
     8a2:	2b00      	cmp	r3, #0
     8a4:	bf0c      	ite	eq
     8a6:	2202      	moveq	r2, #2
     8a8:	2201      	movne	r2, #1
     8aa:	4b0a      	ldr	r3, [pc, #40]	; (8d4 <usb_d_ep_enable+0x44>)
     8ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     8b0:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     8b2:	4628      	mov	r0, r5
     8b4:	4b08      	ldr	r3, [pc, #32]	; (8d8 <usb_d_ep_enable+0x48>)
     8b6:	4798      	blx	r3
	if (rc < 0) {
     8b8:	2800      	cmp	r0, #0
     8ba:	db00      	blt.n	8be <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     8bc:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     8be:	4b05      	ldr	r3, [pc, #20]	; (8d4 <usb_d_ep_enable+0x44>)
     8c0:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     8c4:	2300      	movs	r3, #0
     8c6:	70a3      	strb	r3, [r4, #2]
     8c8:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     8ca:	f06f 0011 	mvn.w	r0, #17
     8ce:	e7f5      	b.n	8bc <usb_d_ep_enable+0x2c>
     8d0:	00000511 	.word	0x00000511
     8d4:	200000e0 	.word	0x200000e0
     8d8:	00001925 	.word	0x00001925

000008dc <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     8e0:	b086      	sub	sp, #24
     8e2:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     8e4:	7a07      	ldrb	r7, [r0, #8]
     8e6:	4638      	mov	r0, r7
     8e8:	4b3f      	ldr	r3, [pc, #252]	; (9e8 <usb_d_ep_transfer+0x10c>)
     8ea:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     8ec:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     8ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     8f2:	1e06      	subs	r6, r0, #0
     8f4:	db72      	blt.n	9dc <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     8f6:	a804      	add	r0, sp, #16
     8f8:	4b3c      	ldr	r3, [pc, #240]	; (9ec <usb_d_ep_transfer+0x110>)
     8fa:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     8fc:	4b3c      	ldr	r3, [pc, #240]	; (9f0 <usb_d_ep_transfer+0x114>)
     8fe:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     902:	789b      	ldrb	r3, [r3, #2]
     904:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     908:	f89d 3017 	ldrb.w	r3, [sp, #23]
     90c:	b2db      	uxtb	r3, r3
     90e:	2b01      	cmp	r3, #1
     910:	d011      	beq.n	936 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     912:	a804      	add	r0, sp, #16
     914:	4b37      	ldr	r3, [pc, #220]	; (9f4 <usb_d_ep_transfer+0x118>)
     916:	4798      	blx	r3
		switch (state) {
     918:	f89d 3017 	ldrb.w	r3, [sp, #23]
     91c:	b2db      	uxtb	r3, r3
     91e:	2b05      	cmp	r3, #5
     920:	d05f      	beq.n	9e2 <usb_d_ep_transfer+0x106>
     922:	2b06      	cmp	r3, #6
     924:	d023      	beq.n	96e <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     926:	2b00      	cmp	r3, #0
     928:	bf0c      	ite	eq
     92a:	f06f 0012 	mvneq.w	r0, #18
     92e:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     930:	b006      	add	sp, #24
     932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     936:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 9f0 <usb_d_ep_transfer+0x114>
     93a:	ea4f 1946 	mov.w	r9, r6, lsl #5
     93e:	eb0a 0309 	add.w	r3, sl, r9
     942:	2203      	movs	r2, #3
     944:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     946:	a804      	add	r0, sp, #16
     948:	4b2a      	ldr	r3, [pc, #168]	; (9f4 <usb_d_ep_transfer+0x118>)
     94a:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     94c:	f81a 3009 	ldrb.w	r3, [sl, r9]
     950:	b183      	cbz	r3, 974 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     952:	7a22      	ldrb	r2, [r4, #8]
     954:	3500      	adds	r5, #0
     956:	bf18      	it	ne
     958:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     95a:	6823      	ldr	r3, [r4, #0]
     95c:	9301      	str	r3, [sp, #4]
     95e:	f8cd 8008 	str.w	r8, [sp, #8]
     962:	f017 0f80 	tst.w	r7, #128	; 0x80
     966:	d119      	bne.n	99c <usb_d_ep_transfer+0xc0>
     968:	f002 030f 	and.w	r3, r2, #15
     96c:	e018      	b.n	9a0 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     96e:	f06f 000f 	mvn.w	r0, #15
     972:	e7dd      	b.n	930 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     974:	4b1e      	ldr	r3, [pc, #120]	; (9f0 <usb_d_ep_transfer+0x114>)
     976:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     97a:	7cda      	ldrb	r2, [r3, #19]
     97c:	7c9d      	ldrb	r5, [r3, #18]
     97e:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     982:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     984:	b9a5      	cbnz	r5, 9b0 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     986:	4b1a      	ldr	r3, [pc, #104]	; (9f0 <usb_d_ep_transfer+0x114>)
     988:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     98c:	2304      	movs	r3, #4
     98e:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     990:	2300      	movs	r3, #0
			zlp                 = true;
     992:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     994:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     996:	6821      	ldr	r1, [r4, #0]
     998:	9101      	str	r1, [sp, #4]
     99a:	9302      	str	r3, [sp, #8]
     99c:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     9a0:	f88d 300c 	strb.w	r3, [sp, #12]
     9a4:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     9a8:	a801      	add	r0, sp, #4
     9aa:	4b13      	ldr	r3, [pc, #76]	; (9f8 <usb_d_ep_transfer+0x11c>)
     9ac:	4798      	blx	r3
	return rc;
     9ae:	e7bf      	b.n	930 <usb_d_ep_transfer+0x54>
     9b0:	4643      	mov	r3, r8
     9b2:	45a8      	cmp	r8, r5
     9b4:	bf28      	it	cs
     9b6:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     9b8:	4a0d      	ldr	r2, [pc, #52]	; (9f0 <usb_d_ep_transfer+0x114>)
     9ba:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     9be:	f996 200c 	ldrsb.w	r2, [r6, #12]
     9c2:	2a00      	cmp	r2, #0
     9c4:	db05      	blt.n	9d2 <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     9c6:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     9c8:	6821      	ldr	r1, [r4, #0]
     9ca:	9101      	str	r1, [sp, #4]
     9cc:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     9ce:	2500      	movs	r5, #0
     9d0:	e7ca      	b.n	968 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     9d2:	429d      	cmp	r5, r3
     9d4:	bf94      	ite	ls
     9d6:	2500      	movls	r5, #0
     9d8:	2501      	movhi	r5, #1
     9da:	e7db      	b.n	994 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     9dc:	f06f 0011 	mvn.w	r0, #17
     9e0:	e7a6      	b.n	930 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     9e2:	2002      	movs	r0, #2
     9e4:	e7a4      	b.n	930 <usb_d_ep_transfer+0x54>
     9e6:	bf00      	nop
     9e8:	00000511 	.word	0x00000511
     9ec:	000004f5 	.word	0x000004f5
     9f0:	200000e0 	.word	0x200000e0
     9f4:	00000503 	.word	0x00000503
     9f8:	00001d85 	.word	0x00001d85

000009fc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     9fc:	b538      	push	{r3, r4, r5, lr}
     9fe:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     a00:	b141      	cbz	r1, a14 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     a02:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     a04:	bf0c      	ite	eq
     a06:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     a08:	2102      	movne	r1, #2
     a0a:	4b13      	ldr	r3, [pc, #76]	; (a58 <usb_d_ep_halt+0x5c>)
     a0c:	4798      	blx	r3
     a0e:	4603      	mov	r3, r0
	}
}
     a10:	4618      	mov	r0, r3
     a12:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     a14:	4b11      	ldr	r3, [pc, #68]	; (a5c <usb_d_ep_halt+0x60>)
     a16:	4798      	blx	r3
	if (ep_index < 0) {
     a18:	1e05      	subs	r5, r0, #0
     a1a:	db19      	blt.n	a50 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     a1c:	2102      	movs	r1, #2
     a1e:	4620      	mov	r0, r4
     a20:	4b0d      	ldr	r3, [pc, #52]	; (a58 <usb_d_ep_halt+0x5c>)
     a22:	4798      	blx	r3
     a24:	4603      	mov	r3, r0
     a26:	2800      	cmp	r0, #0
     a28:	d0f2      	beq.n	a10 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     a2a:	2100      	movs	r1, #0
     a2c:	4620      	mov	r0, r4
     a2e:	4b0a      	ldr	r3, [pc, #40]	; (a58 <usb_d_ep_halt+0x5c>)
     a30:	4798      	blx	r3
		if (rc < 0) {
     a32:	1e03      	subs	r3, r0, #0
     a34:	dbec      	blt.n	a10 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     a36:	4b0a      	ldr	r3, [pc, #40]	; (a60 <usb_d_ep_halt+0x64>)
     a38:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     a3c:	2201      	movs	r2, #1
     a3e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     a40:	2103      	movs	r1, #3
     a42:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     a44:	69db      	ldr	r3, [r3, #28]
     a46:	2200      	movs	r2, #0
     a48:	4620      	mov	r0, r4
     a4a:	4798      	blx	r3
	return ERR_NONE;
     a4c:	2300      	movs	r3, #0
     a4e:	e7df      	b.n	a10 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     a50:	f06f 0311 	mvn.w	r3, #17
     a54:	e7dc      	b.n	a10 <usb_d_ep_halt+0x14>
     a56:	bf00      	nop
     a58:	00001bdd 	.word	0x00001bdd
     a5c:	00000511 	.word	0x00000511
     a60:	200000e0 	.word	0x200000e0

00000a64 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     a64:	b538      	push	{r3, r4, r5, lr}
     a66:	460d      	mov	r5, r1
     a68:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     a6a:	4b0e      	ldr	r3, [pc, #56]	; (aa4 <usb_d_ep_register_callback+0x40>)
     a6c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     a6e:	4b0e      	ldr	r3, [pc, #56]	; (aa8 <usb_d_ep_register_callback+0x44>)
     a70:	2c00      	cmp	r4, #0
     a72:	bf08      	it	eq
     a74:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     a76:	2800      	cmp	r0, #0
     a78:	db13      	blt.n	aa2 <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     a7a:	2d01      	cmp	r5, #1
     a7c:	d008      	beq.n	a90 <usb_d_ep_register_callback+0x2c>
     a7e:	b115      	cbz	r5, a86 <usb_d_ep_register_callback+0x22>
     a80:	2d02      	cmp	r5, #2
     a82:	d00a      	beq.n	a9a <usb_d_ep_register_callback+0x36>
     a84:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     a86:	4b09      	ldr	r3, [pc, #36]	; (aac <usb_d_ep_register_callback+0x48>)
     a88:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     a8c:	6144      	str	r4, [r0, #20]
		break;
     a8e:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     a90:	4b06      	ldr	r3, [pc, #24]	; (aac <usb_d_ep_register_callback+0x48>)
     a92:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     a96:	6184      	str	r4, [r0, #24]
		break;
     a98:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     a9a:	4b04      	ldr	r3, [pc, #16]	; (aac <usb_d_ep_register_callback+0x48>)
     a9c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     aa0:	61c4      	str	r4, [r0, #28]
     aa2:	bd38      	pop	{r3, r4, r5, pc}
     aa4:	00000511 	.word	0x00000511
     aa8:	00000555 	.word	0x00000555
     aac:	200000e0 	.word	0x200000e0

00000ab0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ab0:	b900      	cbnz	r0, ab4 <assert+0x4>
		__asm("BKPT #0");
     ab2:	be00      	bkpt	0x0000
     ab4:	4770      	bx	lr

00000ab6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     ab6:	6803      	ldr	r3, [r0, #0]
     ab8:	b14b      	cbz	r3, ace <is_list_element+0x18>
		if (it == element) {
     aba:	428b      	cmp	r3, r1
     abc:	d009      	beq.n	ad2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     abe:	681b      	ldr	r3, [r3, #0]
     ac0:	b11b      	cbz	r3, aca <is_list_element+0x14>
		if (it == element) {
     ac2:	4299      	cmp	r1, r3
     ac4:	d1fb      	bne.n	abe <is_list_element+0x8>
			return true;
     ac6:	2001      	movs	r0, #1
		}
	}

	return false;
}
     ac8:	4770      	bx	lr
	return false;
     aca:	2000      	movs	r0, #0
     acc:	4770      	bx	lr
     ace:	2000      	movs	r0, #0
     ad0:	4770      	bx	lr
			return true;
     ad2:	2001      	movs	r0, #1
     ad4:	4770      	bx	lr
	...

00000ad8 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     ad8:	b570      	push	{r4, r5, r6, lr}
     ada:	4605      	mov	r5, r0
     adc:	460e      	mov	r6, r1
	struct list_element *it = list->head;
     ade:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     ae0:	4b0a      	ldr	r3, [pc, #40]	; (b0c <list_insert_at_end+0x34>)
     ae2:	4798      	blx	r3
     ae4:	f080 0001 	eor.w	r0, r0, #1
     ae8:	224f      	movs	r2, #79	; 0x4f
     aea:	4909      	ldr	r1, [pc, #36]	; (b10 <list_insert_at_end+0x38>)
     aec:	b2c0      	uxtb	r0, r0
     aee:	4b09      	ldr	r3, [pc, #36]	; (b14 <list_insert_at_end+0x3c>)
     af0:	4798      	blx	r3

	if (!list->head) {
     af2:	682b      	ldr	r3, [r5, #0]
     af4:	b91b      	cbnz	r3, afe <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
     af6:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     af8:	6033      	str	r3, [r6, #0]
		return;
     afa:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
     afc:	461c      	mov	r4, r3
	while (it->next) {
     afe:	6823      	ldr	r3, [r4, #0]
     b00:	2b00      	cmp	r3, #0
     b02:	d1fb      	bne.n	afc <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
     b04:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     b06:	6033      	str	r3, [r6, #0]
     b08:	bd70      	pop	{r4, r5, r6, pc}
     b0a:	bf00      	nop
     b0c:	00000ab7 	.word	0x00000ab7
     b10:	000032d8 	.word	0x000032d8
     b14:	00000ab1 	.word	0x00000ab1

00000b18 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     b18:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     b1a:	4a08      	ldr	r2, [pc, #32]	; (b3c <_init_chip+0x24>)
     b1c:	8813      	ldrh	r3, [r2, #0]
     b1e:	b29b      	uxth	r3, r3
     b20:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <_init_chip+0x28>)
     b24:	4798      	blx	r3
	_oscctrl_init_sources();
     b26:	4b07      	ldr	r3, [pc, #28]	; (b44 <_init_chip+0x2c>)
     b28:	4798      	blx	r3
	_mclk_init();
     b2a:	4b07      	ldr	r3, [pc, #28]	; (b48 <_init_chip+0x30>)
     b2c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     b2e:	4b07      	ldr	r3, [pc, #28]	; (b4c <_init_chip+0x34>)
     b30:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     b32:	f640 70ff 	movw	r0, #4095	; 0xfff
     b36:	4b06      	ldr	r3, [pc, #24]	; (b50 <_init_chip+0x38>)
     b38:	4798      	blx	r3
     b3a:	bd08      	pop	{r3, pc}
     b3c:	41004000 	.word	0x41004000
     b40:	00000bbd 	.word	0x00000bbd
     b44:	00000bdd 	.word	0x00000bdd
     b48:	00000bb1 	.word	0x00000bb1
     b4c:	00000bf9 	.word	0x00000bf9
     b50:	00000b55 	.word	0x00000b55

00000b54 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     b54:	f010 0f01 	tst.w	r0, #1
     b58:	d008      	beq.n	b6c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     b5a:	4a11      	ldr	r2, [pc, #68]	; (ba0 <_gclk_init_generators_by_fref+0x4c>)
     b5c:	4b11      	ldr	r3, [pc, #68]	; (ba4 <_gclk_init_generators_by_fref+0x50>)
     b5e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     b60:	4619      	mov	r1, r3
     b62:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     b66:	684b      	ldr	r3, [r1, #4]
     b68:	4213      	tst	r3, r2
     b6a:	d1fc      	bne.n	b66 <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     b6c:	f010 0f02 	tst.w	r0, #2
     b70:	d008      	beq.n	b84 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     b72:	4a0d      	ldr	r2, [pc, #52]	; (ba8 <_gclk_init_generators_by_fref+0x54>)
     b74:	4b0b      	ldr	r3, [pc, #44]	; (ba4 <_gclk_init_generators_by_fref+0x50>)
     b76:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     b78:	4619      	mov	r1, r3
     b7a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     b7e:	684b      	ldr	r3, [r1, #4]
     b80:	4213      	tst	r3, r2
     b82:	d1fc      	bne.n	b7e <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     b84:	f010 0f08 	tst.w	r0, #8
     b88:	d008      	beq.n	b9c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     b8a:	4a08      	ldr	r2, [pc, #32]	; (bac <_gclk_init_generators_by_fref+0x58>)
     b8c:	4b05      	ldr	r3, [pc, #20]	; (ba4 <_gclk_init_generators_by_fref+0x50>)
     b8e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     b90:	4619      	mov	r1, r3
     b92:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     b96:	684b      	ldr	r3, [r1, #4]
     b98:	4213      	tst	r3, r2
     b9a:	d1fc      	bne.n	b96 <_gclk_init_generators_by_fref+0x42>
     b9c:	4770      	bx	lr
     b9e:	bf00      	nop
     ba0:	00010101 	.word	0x00010101
     ba4:	40001c00 	.word	0x40001c00
     ba8:	00010106 	.word	0x00010106
     bac:	00010105 	.word	0x00010105

00000bb0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     bb0:	2201      	movs	r2, #1
     bb2:	4b01      	ldr	r3, [pc, #4]	; (bb8 <_mclk_init+0x8>)
     bb4:	715a      	strb	r2, [r3, #5]
     bb6:	4770      	bx	lr
     bb8:	40000800 	.word	0x40000800

00000bbc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     bbc:	4b06      	ldr	r3, [pc, #24]	; (bd8 <_osc32kctrl_init_sources+0x1c>)
     bbe:	f242 028e 	movw	r2, #8334	; 0x208e
     bc2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     bc4:	2200      	movs	r2, #0
     bc6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     bc8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     bca:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     bcc:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     bd0:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     bd2:	741a      	strb	r2, [r3, #16]
     bd4:	4770      	bx	lr
     bd6:	bf00      	nop
     bd8:	40001400 	.word	0x40001400

00000bdc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     bdc:	4a04      	ldr	r2, [pc, #16]	; (bf0 <_oscctrl_init_sources+0x14>)
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <_oscctrl_init_sources+0x18>)
     be0:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     be2:	461a      	mov	r2, r3
     be4:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     be6:	f013 0f02 	tst.w	r3, #2
     bea:	d0fb      	beq.n	be4 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     bec:	4770      	bx	lr
     bee:	bf00      	nop
     bf0:	03002606 	.word	0x03002606
     bf4:	40001000 	.word	0x40001000

00000bf8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     bf8:	4a36      	ldr	r2, [pc, #216]	; (cd4 <_oscctrl_init_referenced_generators+0xdc>)
     bfa:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     bfc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     c00:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     c04:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     c06:	4611      	mov	r1, r2
     c08:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     c0c:	684b      	ldr	r3, [r1, #4]
     c0e:	4213      	tst	r3, r2
     c10:	d1fc      	bne.n	c0c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     c12:	4a30      	ldr	r2, [pc, #192]	; (cd4 <_oscctrl_init_referenced_generators+0xdc>)
     c14:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     c16:	f013 0f04 	tst.w	r3, #4
     c1a:	d1fb      	bne.n	c14 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     c1c:	4b2e      	ldr	r3, [pc, #184]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     c1e:	2200      	movs	r2, #0
     c20:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     c22:	4a2e      	ldr	r2, [pc, #184]	; (cdc <_oscctrl_init_referenced_generators+0xe4>)
     c24:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     c26:	461a      	mov	r2, r3
     c28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     c2c:	f013 0f10 	tst.w	r3, #16
     c30:	d1fa      	bne.n	c28 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     c32:	2200      	movs	r2, #0
     c34:	4b28      	ldr	r3, [pc, #160]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     c36:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     c3a:	461a      	mov	r2, r3
     c3c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     c40:	f013 0f04 	tst.w	r3, #4
     c44:	d1fa      	bne.n	c3c <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     c46:	2202      	movs	r2, #2
     c48:	4b23      	ldr	r3, [pc, #140]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     c4a:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     c4c:	461a      	mov	r2, r3
     c4e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     c52:	f013 0f02 	tst.w	r3, #2
     c56:	d1fa      	bne.n	c4e <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     c58:	4b1f      	ldr	r3, [pc, #124]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     c5c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     c5e:	461a      	mov	r2, r3
     c60:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     c64:	f013 0f08 	tst.w	r3, #8
     c68:	d1fa      	bne.n	c60 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     c6a:	2219      	movs	r2, #25
     c6c:	4b1a      	ldr	r3, [pc, #104]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     c6e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     c72:	461a      	mov	r2, r3
     c74:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     c78:	f013 0f04 	tst.w	r3, #4
     c7c:	d1fa      	bne.n	c74 <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     c7e:	4b16      	ldr	r3, [pc, #88]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     c80:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     c84:	f013 0f01 	tst.w	r3, #1
     c88:	d01d      	beq.n	cc6 <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     c8a:	4a13      	ldr	r2, [pc, #76]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     c8c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
     c8e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     c92:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     c96:	d1f9      	bne.n	c8c <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     c98:	4a0e      	ldr	r2, [pc, #56]	; (cd4 <_oscctrl_init_referenced_generators+0xdc>)
     c9a:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     c9c:	2b00      	cmp	r3, #0
     c9e:	d1fc      	bne.n	c9a <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     ca0:	4a0c      	ldr	r2, [pc, #48]	; (cd4 <_oscctrl_init_referenced_generators+0xdc>)
     ca2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     ca4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     ca8:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     cac:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     cae:	4611      	mov	r1, r2
     cb0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     cb4:	684b      	ldr	r3, [r1, #4]
     cb6:	4213      	tst	r3, r2
     cb8:	d1fc      	bne.n	cb4 <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     cba:	4a06      	ldr	r2, [pc, #24]	; (cd4 <_oscctrl_init_referenced_generators+0xdc>)
     cbc:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     cbe:	f013 0f04 	tst.w	r3, #4
     cc2:	d1fb      	bne.n	cbc <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
     cc4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <_oscctrl_init_referenced_generators+0xe0>)
     cc8:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     cca:	f413 7f80 	tst.w	r3, #256	; 0x100
     cce:	d0fb      	beq.n	cc8 <_oscctrl_init_referenced_generators+0xd0>
     cd0:	e7e2      	b.n	c98 <_oscctrl_init_referenced_generators+0xa0>
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40001000 	.word	0x40001000
     cdc:	0401bb80 	.word	0x0401bb80

00000ce0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     ce0:	b500      	push	{lr}
     ce2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     ce4:	4b0d      	ldr	r3, [pc, #52]	; (d1c <RAMECC_Handler+0x3c>)
     ce6:	789b      	ldrb	r3, [r3, #2]
     ce8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     cea:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     cec:	9b01      	ldr	r3, [sp, #4]
     cee:	f013 0f02 	tst.w	r3, #2
     cf2:	d006      	beq.n	d02 <RAMECC_Handler+0x22>
     cf4:	4b0a      	ldr	r3, [pc, #40]	; (d20 <RAMECC_Handler+0x40>)
     cf6:	681b      	ldr	r3, [r3, #0]
     cf8:	b11b      	cbz	r3, d02 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     cfa:	4a08      	ldr	r2, [pc, #32]	; (d1c <RAMECC_Handler+0x3c>)
     cfc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     cfe:	4798      	blx	r3
     d00:	e009      	b.n	d16 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     d02:	9b01      	ldr	r3, [sp, #4]
     d04:	f013 0f01 	tst.w	r3, #1
     d08:	d005      	beq.n	d16 <RAMECC_Handler+0x36>
     d0a:	4b05      	ldr	r3, [pc, #20]	; (d20 <RAMECC_Handler+0x40>)
     d0c:	685b      	ldr	r3, [r3, #4]
     d0e:	b113      	cbz	r3, d16 <RAMECC_Handler+0x36>
     d10:	4a02      	ldr	r2, [pc, #8]	; (d1c <RAMECC_Handler+0x3c>)
     d12:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     d14:	4798      	blx	r3
	} else {
		return;
	}
}
     d16:	b003      	add	sp, #12
     d18:	f85d fb04 	ldr.w	pc, [sp], #4
     d1c:	41020000 	.word	0x41020000
     d20:	2000070c 	.word	0x2000070c

00000d24 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     d24:	2000      	movs	r0, #0
     d26:	4770      	bx	lr

00000d28 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     d28:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     d2a:	7c83      	ldrb	r3, [r0, #18]
     d2c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     d30:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
     d32:	f002 0107 	and.w	r1, r2, #7
     d36:	2901      	cmp	r1, #1
     d38:	d00b      	beq.n	d52 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     d3a:	015a      	lsls	r2, r3, #5
     d3c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     d40:	2110      	movs	r1, #16
     d42:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     d46:	015b      	lsls	r3, r3, #5
     d48:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     d4c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
     d50:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
     d52:	f012 0f40 	tst.w	r2, #64	; 0x40
     d56:	d00c      	beq.n	d72 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
     d58:	7cc2      	ldrb	r2, [r0, #19]
     d5a:	f36f 1286 	bfc	r2, #6, #1
     d5e:	74c2      	strb	r2, [r0, #19]
     d60:	015a      	lsls	r2, r3, #5
     d62:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     d66:	2180      	movs	r1, #128	; 0x80
     d68:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     d6c:	2140      	movs	r1, #64	; 0x40
     d6e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
     d72:	7cc2      	ldrb	r2, [r0, #19]
     d74:	f36f 02c3 	bfc	r2, #3, #1
     d78:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     d7a:	490a      	ldr	r1, [pc, #40]	; (da4 <_usb_d_dev_handle_setup+0x7c>)
     d7c:	015a      	lsls	r2, r3, #5
     d7e:	188c      	adds	r4, r1, r2
     d80:	2500      	movs	r5, #0
     d82:	72a5      	strb	r5, [r4, #10]
     d84:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     d86:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
     d8a:	246f      	movs	r4, #111	; 0x6f
     d8c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     d90:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     d94:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
     d98:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
     d9c:	7c80      	ldrb	r0, [r0, #18]
     d9e:	4798      	blx	r3
     da0:	bd38      	pop	{r3, r4, r5, pc}
     da2:	bf00      	nop
     da4:	20000280 	.word	0x20000280

00000da8 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     da8:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     daa:	2320      	movs	r3, #32
     dac:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     db0:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
     db2:	7c83      	ldrb	r3, [r0, #18]
     db4:	f003 030f 	and.w	r3, r3, #15
     db8:	015b      	lsls	r3, r3, #5
     dba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     dbe:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     dc2:	4b04      	ldr	r3, [pc, #16]	; (dd4 <_usb_d_dev_handle_stall+0x2c>)
     dc4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
     dc8:	6882      	ldr	r2, [r0, #8]
     dca:	2101      	movs	r1, #1
     dcc:	7c80      	ldrb	r0, [r0, #18]
     dce:	4798      	blx	r3
     dd0:	bd08      	pop	{r3, pc}
     dd2:	bf00      	nop
     dd4:	20000280 	.word	0x20000280

00000dd8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     dd8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     dda:	7c84      	ldrb	r4, [r0, #18]
     ddc:	2cff      	cmp	r4, #255	; 0xff
     dde:	d003      	beq.n	de8 <_usb_d_dev_trans_done+0x10>
     de0:	7cc3      	ldrb	r3, [r0, #19]
     de2:	f013 0f40 	tst.w	r3, #64	; 0x40
     de6:	d100      	bne.n	dea <_usb_d_dev_trans_done+0x12>
     de8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
     dea:	7cc2      	ldrb	r2, [r0, #19]
     dec:	f36f 1286 	bfc	r2, #6, #1
     df0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     df2:	4a03      	ldr	r2, [pc, #12]	; (e00 <_usb_d_dev_trans_done+0x28>)
     df4:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
     df8:	6882      	ldr	r2, [r0, #8]
     dfa:	4620      	mov	r0, r4
     dfc:	47a8      	blx	r5
     dfe:	e7f3      	b.n	de8 <_usb_d_dev_trans_done+0x10>
     e00:	20000280 	.word	0x20000280

00000e04 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     e04:	b530      	push	{r4, r5, lr}
     e06:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     e08:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     e0a:	2425      	movs	r4, #37	; 0x25
     e0c:	f88d 4004 	strb.w	r4, [sp, #4]
     e10:	244a      	movs	r4, #74	; 0x4a
     e12:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     e16:	2bff      	cmp	r3, #255	; 0xff
     e18:	d01e      	beq.n	e58 <_usb_d_dev_trans_stop+0x54>
     e1a:	7cc4      	ldrb	r4, [r0, #19]
     e1c:	f014 0f40 	tst.w	r4, #64	; 0x40
     e20:	d01a      	beq.n	e58 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     e22:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
     e26:	b1c9      	cbz	r1, e5c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     e28:	0163      	lsls	r3, r4, #5
     e2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     e2e:	2580      	movs	r5, #128	; 0x80
     e30:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
     e34:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     e36:	a902      	add	r1, sp, #8
     e38:	440b      	add	r3, r1
     e3a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     e3e:	0163      	lsls	r3, r4, #5
     e40:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     e44:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e48:	0163      	lsls	r3, r4, #5
     e4a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     e4e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     e52:	4611      	mov	r1, r2
     e54:	4b05      	ldr	r3, [pc, #20]	; (e6c <_usb_d_dev_trans_stop+0x68>)
     e56:	4798      	blx	r3
}
     e58:	b003      	add	sp, #12
     e5a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     e5c:	0163      	lsls	r3, r4, #5
     e5e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     e62:	2540      	movs	r5, #64	; 0x40
     e64:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
     e68:	e7e4      	b.n	e34 <_usb_d_dev_trans_stop+0x30>
     e6a:	bf00      	nop
     e6c:	00000dd9 	.word	0x00000dd9

00000e70 <_usb_d_dev_handle_trfail>:
{
     e70:	b530      	push	{r4, r5, lr}
     e72:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     e74:	7c83      	ldrb	r3, [r0, #18]
     e76:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     e7a:	2204      	movs	r2, #4
     e7c:	f88d 2004 	strb.w	r2, [sp, #4]
     e80:	2208      	movs	r2, #8
     e82:	f88d 2005 	strb.w	r2, [sp, #5]
     e86:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
     e88:	460c      	mov	r4, r1
     e8a:	b391      	cbz	r1, ef2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     e8c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
     e90:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     e94:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
     e98:	eb02 1104 	add.w	r1, r2, r4, lsl #4
     e9c:	4a32      	ldr	r2, [pc, #200]	; (f68 <_usb_d_dev_handle_trfail+0xf8>)
     e9e:	440a      	add	r2, r1
     ea0:	7a91      	ldrb	r1, [r2, #10]
     ea2:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     ea4:	2d02      	cmp	r5, #2
     ea6:	d02c      	beq.n	f02 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
     ea8:	f011 0f02 	tst.w	r1, #2
     eac:	d045      	beq.n	f3a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     eae:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     eb0:	7a91      	ldrb	r1, [r2, #10]
     eb2:	f36f 0141 	bfc	r1, #1, #1
     eb6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     eb8:	aa02      	add	r2, sp, #8
     eba:	4422      	add	r2, r4
     ebc:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ec0:	015a      	lsls	r2, r3, #5
     ec2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     ec6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     eca:	015b      	lsls	r3, r3, #5
     ecc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     ed0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     ed4:	f005 0307 	and.w	r3, r5, #7
     ed8:	2b01      	cmp	r3, #1
     eda:	d143      	bne.n	f64 <_usb_d_dev_handle_trfail+0xf4>
     edc:	7cc3      	ldrb	r3, [r0, #19]
     ede:	f013 0f40 	tst.w	r3, #64	; 0x40
     ee2:	d03f      	beq.n	f64 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     ee4:	09d9      	lsrs	r1, r3, #7
     ee6:	428c      	cmp	r4, r1
     ee8:	d03c      	beq.n	f64 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     eea:	2200      	movs	r2, #0
     eec:	4b1f      	ldr	r3, [pc, #124]	; (f6c <_usb_d_dev_handle_trfail+0xfc>)
     eee:	4798      	blx	r3
     ef0:	e038      	b.n	f64 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     ef2:	0159      	lsls	r1, r3, #5
     ef4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
     ef8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     efc:	f005 0507 	and.w	r5, r5, #7
     f00:	e7ca      	b.n	e98 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     f02:	f011 0f01 	tst.w	r1, #1
     f06:	d0cf      	beq.n	ea8 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     f08:	7a91      	ldrb	r1, [r2, #10]
     f0a:	f36f 0100 	bfc	r1, #0, #1
     f0e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     f10:	aa02      	add	r2, sp, #8
     f12:	4422      	add	r2, r4
     f14:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f18:	015a      	lsls	r2, r3, #5
     f1a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     f1e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f22:	015b      	lsls	r3, r3, #5
     f24:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     f28:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     f2c:	2204      	movs	r2, #4
     f2e:	1c21      	adds	r1, r4, #0
     f30:	bf18      	it	ne
     f32:	2101      	movne	r1, #1
     f34:	4b0d      	ldr	r3, [pc, #52]	; (f6c <_usb_d_dev_handle_trfail+0xfc>)
     f36:	4798      	blx	r3
     f38:	e014      	b.n	f64 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
     f3a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
     f3e:	4a0a      	ldr	r2, [pc, #40]	; (f68 <_usb_d_dev_handle_trfail+0xf8>)
     f40:	eb02 1201 	add.w	r2, r2, r1, lsl #4
     f44:	2100      	movs	r1, #0
     f46:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     f48:	aa02      	add	r2, sp, #8
     f4a:	4414      	add	r4, r2
     f4c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f50:	015a      	lsls	r2, r3, #5
     f52:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     f56:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f5a:	015b      	lsls	r3, r3, #5
     f5c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     f60:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
     f64:	b003      	add	sp, #12
     f66:	bd30      	pop	{r4, r5, pc}
     f68:	20000280 	.word	0x20000280
     f6c:	00000e05 	.word	0x00000e05

00000f70 <_usb_d_dev_reset_epts>:
{
     f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f74:	4d0c      	ldr	r5, [pc, #48]	; (fa8 <_usb_d_dev_reset_epts+0x38>)
     f76:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
     f7a:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     f7e:	f04f 0803 	mov.w	r8, #3
     f82:	4f0a      	ldr	r7, [pc, #40]	; (fac <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
     f84:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     f86:	4641      	mov	r1, r8
     f88:	4620      	mov	r0, r4
     f8a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
     f8c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
     f8e:	2300      	movs	r3, #0
     f90:	74e3      	strb	r3, [r4, #19]
     f92:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
     f94:	42ac      	cmp	r4, r5
     f96:	d1f6      	bne.n	f86 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
     f98:	22c0      	movs	r2, #192	; 0xc0
     f9a:	4619      	mov	r1, r3
     f9c:	4802      	ldr	r0, [pc, #8]	; (fa8 <_usb_d_dev_reset_epts+0x38>)
     f9e:	4b04      	ldr	r3, [pc, #16]	; (fb0 <_usb_d_dev_reset_epts+0x40>)
     fa0:	4798      	blx	r3
     fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fa6:	bf00      	nop
     fa8:	20000280 	.word	0x20000280
     fac:	00000dd9 	.word	0x00000dd9
     fb0:	000032c7 	.word	0x000032c7

00000fb4 <_usb_d_dev_in_next>:
{
     fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     fb8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
     fba:	7c84      	ldrb	r4, [r0, #18]
     fbc:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     fc0:	4688      	mov	r8, r1
     fc2:	2900      	cmp	r1, #0
     fc4:	f000 80a0 	beq.w	1108 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     fc8:	4b58      	ldr	r3, [pc, #352]	; (112c <_usb_d_dev_in_next+0x178>)
     fca:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     fce:	6958      	ldr	r0, [r3, #20]
     fd0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     fd4:	8a2b      	ldrh	r3, [r5, #16]
     fd6:	f240 32ff 	movw	r2, #1023	; 0x3ff
     fda:	4293      	cmp	r3, r2
     fdc:	f000 808e 	beq.w	10fc <_usb_d_dev_in_next+0x148>
     fe0:	3b01      	subs	r3, #1
     fe2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     fe4:	7cef      	ldrb	r7, [r5, #19]
     fe6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
     fea:	f1b8 0f00 	cmp.w	r8, #0
     fee:	d005      	beq.n	ffc <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ff0:	0162      	lsls	r2, r4, #5
     ff2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     ff6:	2302      	movs	r3, #2
     ff8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
     ffc:	68a9      	ldr	r1, [r5, #8]
     ffe:	eb0e 0301 	add.w	r3, lr, r1
    1002:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1004:	686e      	ldr	r6, [r5, #4]
    1006:	42b3      	cmp	r3, r6
    1008:	d23f      	bcs.n	108a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    100a:	1af6      	subs	r6, r6, r3
    100c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    100e:	7cea      	ldrb	r2, [r5, #19]
    1010:	f012 0f20 	tst.w	r2, #32
    1014:	d02d      	beq.n	1072 <_usb_d_dev_in_next+0xbe>
    1016:	8a2a      	ldrh	r2, [r5, #16]
    1018:	4296      	cmp	r6, r2
    101a:	bf28      	it	cs
    101c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    101e:	6829      	ldr	r1, [r5, #0]
    1020:	4632      	mov	r2, r6
    1022:	4419      	add	r1, r3
    1024:	68e8      	ldr	r0, [r5, #12]
    1026:	4b42      	ldr	r3, [pc, #264]	; (1130 <_usb_d_dev_in_next+0x17c>)
    1028:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    102a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    102c:	4b3f      	ldr	r3, [pc, #252]	; (112c <_usb_d_dev_in_next+0x178>)
    102e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1032:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    1034:	4b3d      	ldr	r3, [pc, #244]	; (112c <_usb_d_dev_in_next+0x178>)
    1036:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    103a:	695a      	ldr	r2, [r3, #20]
    103c:	f366 020d 	bfi	r2, r6, #0, #14
    1040:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1042:	695a      	ldr	r2, [r3, #20]
    1044:	f36f 329b 	bfc	r2, #14, #14
    1048:	615a      	str	r2, [r3, #20]
	if (!isr) {
    104a:	f1b8 0f00 	cmp.w	r8, #0
    104e:	d108      	bne.n	1062 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    1050:	2f01      	cmp	r7, #1
    1052:	bf0c      	ite	eq
    1054:	224e      	moveq	r2, #78	; 0x4e
    1056:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1058:	0163      	lsls	r3, r4, #5
    105a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    105e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1062:	0164      	lsls	r4, r4, #5
    1064:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    1068:	2380      	movs	r3, #128	; 0x80
    106a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    106e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1072:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    1076:	bf28      	it	cs
    1078:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    107c:	6829      	ldr	r1, [r5, #0]
    107e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1080:	4a2a      	ldr	r2, [pc, #168]	; (112c <_usb_d_dev_in_next+0x178>)
    1082:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1086:	6113      	str	r3, [r2, #16]
    1088:	e7d4      	b.n	1034 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    108a:	7ceb      	ldrb	r3, [r5, #19]
    108c:	f013 0f10 	tst.w	r3, #16
    1090:	d00f      	beq.n	10b2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1092:	7ceb      	ldrb	r3, [r5, #19]
    1094:	f36f 1304 	bfc	r3, #4, #1
    1098:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    109a:	4b24      	ldr	r3, [pc, #144]	; (112c <_usb_d_dev_in_next+0x178>)
    109c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    10a0:	695a      	ldr	r2, [r3, #20]
    10a2:	f36f 020d 	bfc	r2, #0, #14
    10a6:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    10a8:	695a      	ldr	r2, [r3, #20]
    10aa:	f36f 329b 	bfc	r2, #14, #14
    10ae:	615a      	str	r2, [r3, #20]
    10b0:	e7cb      	b.n	104a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    10b2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    10b4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    10b8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    10bc:	bf0c      	ite	eq
    10be:	234b      	moveq	r3, #75	; 0x4b
    10c0:	234a      	movne	r3, #74	; 0x4a
    10c2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    10c6:	8a2a      	ldrh	r2, [r5, #16]
    10c8:	ea00 030e 	and.w	r3, r0, lr
    10cc:	429a      	cmp	r2, r3
    10ce:	d005      	beq.n	10dc <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    10d0:	2100      	movs	r1, #0
    10d2:	4628      	mov	r0, r5
    10d4:	4b17      	ldr	r3, [pc, #92]	; (1134 <_usb_d_dev_in_next+0x180>)
    10d6:	4798      	blx	r3
	return;
    10d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    10dc:	7ceb      	ldrb	r3, [r5, #19]
    10de:	f36f 1386 	bfc	r3, #6, #1
    10e2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    10e4:	4b11      	ldr	r3, [pc, #68]	; (112c <_usb_d_dev_in_next+0x178>)
    10e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    10ea:	68a9      	ldr	r1, [r5, #8]
    10ec:	7ca8      	ldrb	r0, [r5, #18]
    10ee:	4798      	blx	r3
    10f0:	b9d0      	cbnz	r0, 1128 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    10f2:	7ceb      	ldrb	r3, [r5, #19]
    10f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    10f8:	74eb      	strb	r3, [r5, #19]
    10fa:	e7e9      	b.n	10d0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    10fc:	7cef      	ldrb	r7, [r5, #19]
    10fe:	f007 0707 	and.w	r7, r7, #7
    1102:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1106:	e773      	b.n	ff0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1108:	8a03      	ldrh	r3, [r0, #16]
    110a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    110e:	4293      	cmp	r3, r2
    1110:	d107      	bne.n	1122 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1112:	7cef      	ldrb	r7, [r5, #19]
    1114:	f007 0707 	and.w	r7, r7, #7
    1118:	f04f 0e00 	mov.w	lr, #0
    111c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1120:	e76c      	b.n	ffc <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1122:	f04f 0e00 	mov.w	lr, #0
    1126:	e75b      	b.n	fe0 <_usb_d_dev_in_next+0x2c>
    1128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    112c:	20000280 	.word	0x20000280
    1130:	000032b1 	.word	0x000032b1
    1134:	00000dd9 	.word	0x00000dd9

00001138 <_usb_d_dev_out_next>:
{
    1138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    113c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    113e:	7c85      	ldrb	r5, [r0, #18]
    1140:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    1144:	4689      	mov	r9, r1
    1146:	2900      	cmp	r1, #0
    1148:	d056      	beq.n	11f8 <_usb_d_dev_out_next+0xc0>
    114a:	4b74      	ldr	r3, [pc, #464]	; (131c <_usb_d_dev_out_next+0x1e4>)
    114c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1150:	685a      	ldr	r2, [r3, #4]
    1152:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    1156:	685f      	ldr	r7, [r3, #4]
    1158:	f3c7 070d 	ubfx	r7, r7, #0, #14
    115c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    115e:	8a06      	ldrh	r6, [r0, #16]
    1160:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1164:	429e      	cmp	r6, r3
    1166:	f000 80ba 	beq.w	12de <_usb_d_dev_out_next+0x1a6>
    116a:	3e01      	subs	r6, #1
    116c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    116e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1172:	f894 8013 	ldrb.w	r8, [r4, #19]
    1176:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    117a:	f1b9 0f00 	cmp.w	r9, #0
    117e:	d005      	beq.n	118c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1180:	016b      	lsls	r3, r5, #5
    1182:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1186:	2201      	movs	r2, #1
    1188:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    118c:	7ce3      	ldrb	r3, [r4, #19]
    118e:	f013 0f20 	tst.w	r3, #32
    1192:	d00d      	beq.n	11b0 <_usb_d_dev_out_next+0x78>
    1194:	6862      	ldr	r2, [r4, #4]
    1196:	2a00      	cmp	r2, #0
    1198:	d037      	beq.n	120a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    119a:	68a0      	ldr	r0, [r4, #8]
    119c:	1a12      	subs	r2, r2, r0
    119e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    11a0:	6823      	ldr	r3, [r4, #0]
    11a2:	42ba      	cmp	r2, r7
    11a4:	bf28      	it	cs
    11a6:	463a      	movcs	r2, r7
    11a8:	68e1      	ldr	r1, [r4, #12]
    11aa:	4418      	add	r0, r3
    11ac:	4b5c      	ldr	r3, [pc, #368]	; (1320 <_usb_d_dev_out_next+0x1e8>)
    11ae:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    11b0:	6863      	ldr	r3, [r4, #4]
    11b2:	b353      	cbz	r3, 120a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    11b4:	f1b9 0f00 	cmp.w	r9, #0
    11b8:	d040      	beq.n	123c <_usb_d_dev_out_next+0x104>
    11ba:	8a22      	ldrh	r2, [r4, #16]
    11bc:	42ba      	cmp	r2, r7
    11be:	d93d      	bls.n	123c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    11c0:	7ce3      	ldrb	r3, [r4, #19]
    11c2:	f36f 1304 	bfc	r3, #4, #1
    11c6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    11c8:	68a3      	ldr	r3, [r4, #8]
    11ca:	445b      	add	r3, fp
    11cc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    11ce:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    11d2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    11d6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    11da:	bf0c      	ite	eq
    11dc:	222d      	moveq	r2, #45	; 0x2d
    11de:	2225      	movne	r2, #37	; 0x25
    11e0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    11e4:	b915      	cbnz	r5, 11ec <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    11e6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    11e8:	4b4c      	ldr	r3, [pc, #304]	; (131c <_usb_d_dev_out_next+0x1e4>)
    11ea:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    11ec:	2100      	movs	r1, #0
    11ee:	4620      	mov	r0, r4
    11f0:	4b4c      	ldr	r3, [pc, #304]	; (1324 <_usb_d_dev_out_next+0x1ec>)
    11f2:	4798      	blx	r3
	return;
    11f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    11f8:	8a06      	ldrh	r6, [r0, #16]
    11fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
    11fe:	429e      	cmp	r6, r3
    1200:	d07b      	beq.n	12fa <_usb_d_dev_out_next+0x1c2>
    1202:	f04f 0b00 	mov.w	fp, #0
    1206:	46da      	mov	sl, fp
    1208:	e7af      	b.n	116a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    120a:	7ce3      	ldrb	r3, [r4, #19]
    120c:	f013 0f10 	tst.w	r3, #16
    1210:	d06c      	beq.n	12ec <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1212:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1214:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1218:	f043 0320 	orr.w	r3, r3, #32
    121c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    121e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1220:	493e      	ldr	r1, [pc, #248]	; (131c <_usb_d_dev_out_next+0x1e4>)
    1222:	016a      	lsls	r2, r5, #5
    1224:	188b      	adds	r3, r1, r2
    1226:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1228:	8a21      	ldrh	r1, [r4, #16]
    122a:	685a      	ldr	r2, [r3, #4]
    122c:	f361 329b 	bfi	r2, r1, #14, #14
    1230:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1232:	685a      	ldr	r2, [r3, #4]
    1234:	f36f 020d 	bfc	r2, #0, #14
    1238:	605a      	str	r2, [r3, #4]
    123a:	e01d      	b.n	1278 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    123c:	68a2      	ldr	r2, [r4, #8]
    123e:	4452      	add	r2, sl
    1240:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    1242:	4293      	cmp	r3, r2
    1244:	d9c3      	bls.n	11ce <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    1246:	1a9b      	subs	r3, r3, r2
    1248:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    124a:	7ce1      	ldrb	r1, [r4, #19]
    124c:	f011 0f20 	tst.w	r1, #32
    1250:	d026      	beq.n	12a0 <_usb_d_dev_out_next+0x168>
    1252:	8a22      	ldrh	r2, [r4, #16]
    1254:	4293      	cmp	r3, r2
    1256:	bf28      	it	cs
    1258:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    125a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    125c:	016a      	lsls	r2, r5, #5
    125e:	492f      	ldr	r1, [pc, #188]	; (131c <_usb_d_dev_out_next+0x1e4>)
    1260:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1262:	4a2e      	ldr	r2, [pc, #184]	; (131c <_usb_d_dev_out_next+0x1e4>)
    1264:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    1268:	6851      	ldr	r1, [r2, #4]
    126a:	f363 319b 	bfi	r1, r3, #14, #14
    126e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1270:	6853      	ldr	r3, [r2, #4]
    1272:	f36f 030d 	bfc	r3, #0, #14
    1276:	6053      	str	r3, [r2, #4]
	if (!isr) {
    1278:	f1b9 0f00 	cmp.w	r9, #0
    127c:	d108      	bne.n	1290 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    127e:	f1b8 0f01 	cmp.w	r8, #1
    1282:	d025      	beq.n	12d0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    1284:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1286:	016b      	lsls	r3, r5, #5
    1288:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    128c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1290:	016d      	lsls	r5, r5, #5
    1292:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    1296:	2340      	movs	r3, #64	; 0x40
    1298:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    129c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    12a0:	8a21      	ldrh	r1, [r4, #16]
    12a2:	428b      	cmp	r3, r1
    12a4:	d90a      	bls.n	12bc <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    12a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    12aa:	d80e      	bhi.n	12ca <_usb_d_dev_out_next+0x192>
    12ac:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    12b0:	6821      	ldr	r1, [r4, #0]
    12b2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    12b4:	0169      	lsls	r1, r5, #5
    12b6:	4819      	ldr	r0, [pc, #100]	; (131c <_usb_d_dev_out_next+0x1e4>)
    12b8:	5042      	str	r2, [r0, r1]
    12ba:	e7d2      	b.n	1262 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    12bc:	428b      	cmp	r3, r1
    12be:	d2f7      	bcs.n	12b0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    12c0:	7ce1      	ldrb	r1, [r4, #19]
    12c2:	f041 0120 	orr.w	r1, r1, #32
    12c6:	74e1      	strb	r1, [r4, #19]
    12c8:	e7f2      	b.n	12b0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    12ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    12ce:	e7ef      	b.n	12b0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    12d0:	4b12      	ldr	r3, [pc, #72]	; (131c <_usb_d_dev_out_next+0x1e4>)
    12d2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    12d6:	2200      	movs	r2, #0
    12d8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    12da:	222d      	movs	r2, #45	; 0x2d
    12dc:	e7d3      	b.n	1286 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    12de:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    12e2:	f890 8013 	ldrb.w	r8, [r0, #19]
    12e6:	f008 0807 	and.w	r8, r8, #7
    12ea:	e749      	b.n	1180 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    12ec:	f1b9 0f00 	cmp.w	r9, #0
    12f0:	d10b      	bne.n	130a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    12f2:	68a3      	ldr	r3, [r4, #8]
    12f4:	4453      	add	r3, sl
    12f6:	60a3      	str	r3, [r4, #8]
    12f8:	e769      	b.n	11ce <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    12fa:	f890 8013 	ldrb.w	r8, [r0, #19]
    12fe:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    1302:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1304:	46bb      	mov	fp, r7
    1306:	46ba      	mov	sl, r7
    1308:	e740      	b.n	118c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    130a:	8a23      	ldrh	r3, [r4, #16]
    130c:	42bb      	cmp	r3, r7
    130e:	f63f af57 	bhi.w	11c0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    1312:	68a3      	ldr	r3, [r4, #8]
    1314:	4453      	add	r3, sl
    1316:	60a3      	str	r3, [r4, #8]
    1318:	e759      	b.n	11ce <_usb_d_dev_out_next+0x96>
    131a:	bf00      	nop
    131c:	20000280 	.word	0x20000280
    1320:	000032b1 	.word	0x000032b1
    1324:	00000dd9 	.word	0x00000dd9

00001328 <_usb_d_dev_handler>:
{
    1328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    132c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1330:	8c1e      	ldrh	r6, [r3, #32]
    1332:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1334:	b146      	cbz	r6, 1348 <_usb_d_dev_handler+0x20>
    1336:	4d96      	ldr	r5, [pc, #600]	; (1590 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    1338:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    133a:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    133e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 15ac <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    1342:	f8df 826c 	ldr.w	r8, [pc, #620]	; 15b0 <_usb_d_dev_handler+0x288>
    1346:	e0de      	b.n	1506 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1348:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    134a:	8b1b      	ldrh	r3, [r3, #24]
    134c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    134e:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1350:	f013 0f04 	tst.w	r3, #4
    1354:	d11e      	bne.n	1394 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1356:	f413 7f00 	tst.w	r3, #512	; 0x200
    135a:	d125      	bne.n	13a8 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    135c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1360:	d14f      	bne.n	1402 <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1362:	f013 0f70 	tst.w	r3, #112	; 0x70
    1366:	d158      	bne.n	141a <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1368:	f013 0f08 	tst.w	r3, #8
    136c:	d178      	bne.n	1460 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    136e:	f013 0f01 	tst.w	r3, #1
    1372:	d0e0      	beq.n	1336 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1374:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1378:	f240 2201 	movw	r2, #513	; 0x201
    137c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    137e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1380:	2270      	movs	r2, #112	; 0x70
    1382:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1384:	4b83      	ldr	r3, [pc, #524]	; (1594 <_usb_d_dev_handler+0x26c>)
    1386:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    138a:	2100      	movs	r1, #0
    138c:	2004      	movs	r0, #4
    138e:	4798      	blx	r3
    1390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1394:	2204      	movs	r2, #4
    1396:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    139a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    139c:	4b7d      	ldr	r3, [pc, #500]	; (1594 <_usb_d_dev_handler+0x26c>)
    139e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    13a2:	4798      	blx	r3
    13a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    13a8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    13ac:	f240 2201 	movw	r2, #513	; 0x201
    13b0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    13b2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    13b4:	2270      	movs	r2, #112	; 0x70
    13b6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    13b8:	4b76      	ldr	r3, [pc, #472]	; (1594 <_usb_d_dev_handler+0x26c>)
    13ba:	891b      	ldrh	r3, [r3, #8]
    13bc:	f003 030f 	and.w	r3, r3, #15
    13c0:	2b03      	cmp	r3, #3
    13c2:	d014      	beq.n	13ee <_usb_d_dev_handler+0xc6>
    13c4:	2301      	movs	r3, #1
    13c6:	4873      	ldr	r0, [pc, #460]	; (1594 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    13c8:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    13ca:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    13ce:	8912      	ldrh	r2, [r2, #8]
    13d0:	f002 020f 	and.w	r2, r2, #15
    13d4:	2a03      	cmp	r2, #3
    13d6:	d00b      	beq.n	13f0 <_usb_d_dev_handler+0xc8>
    13d8:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    13da:	2b05      	cmp	r3, #5
    13dc:	d1f4      	bne.n	13c8 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    13de:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    13e0:	4b6c      	ldr	r3, [pc, #432]	; (1594 <_usb_d_dev_handler+0x26c>)
    13e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    13e6:	2003      	movs	r0, #3
    13e8:	4798      	blx	r3
    13ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    13ee:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    13f0:	4b68      	ldr	r3, [pc, #416]	; (1594 <_usb_d_dev_handler+0x26c>)
    13f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    13f6:	8919      	ldrh	r1, [r3, #8]
    13f8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    13fc:	2200      	movs	r2, #0
    13fe:	811a      	strh	r2, [r3, #8]
    1400:	e7ee      	b.n	13e0 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1402:	2280      	movs	r2, #128	; 0x80
    1404:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1408:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    140a:	4b62      	ldr	r3, [pc, #392]	; (1594 <_usb_d_dev_handler+0x26c>)
    140c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1410:	2100      	movs	r1, #0
    1412:	2005      	movs	r0, #5
    1414:	4798      	blx	r3
    1416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    141a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    141e:	2270      	movs	r2, #112	; 0x70
    1420:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1422:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1424:	f240 2201 	movw	r2, #513	; 0x201
    1428:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    142a:	4b5b      	ldr	r3, [pc, #364]	; (1598 <_usb_d_dev_handler+0x270>)
    142c:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    1430:	f013 0f01 	tst.w	r3, #1
    1434:	d00e      	beq.n	1454 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1436:	4a58      	ldr	r2, [pc, #352]	; (1598 <_usb_d_dev_handler+0x270>)
    1438:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    143a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    143e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1442:	d1f9      	bne.n	1438 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1444:	4b53      	ldr	r3, [pc, #332]	; (1594 <_usb_d_dev_handler+0x26c>)
    1446:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    144a:	2100      	movs	r1, #0
    144c:	2002      	movs	r0, #2
    144e:	4798      	blx	r3
    1450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1454:	4a50      	ldr	r2, [pc, #320]	; (1598 <_usb_d_dev_handler+0x270>)
    1456:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1458:	f413 7f80 	tst.w	r3, #256	; 0x100
    145c:	d0fb      	beq.n	1456 <_usb_d_dev_handler+0x12e>
    145e:	e7f1      	b.n	1444 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1460:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1464:	2400      	movs	r4, #0
    1466:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    146a:	2208      	movs	r2, #8
    146c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    146e:	2270      	movs	r2, #112	; 0x70
    1470:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1472:	f240 2201 	movw	r2, #513	; 0x201
    1476:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1478:	4b48      	ldr	r3, [pc, #288]	; (159c <_usb_d_dev_handler+0x274>)
    147a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    147c:	4b45      	ldr	r3, [pc, #276]	; (1594 <_usb_d_dev_handler+0x26c>)
    147e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1482:	4621      	mov	r1, r4
    1484:	2001      	movs	r0, #1
    1486:	4798      	blx	r3
    1488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    148c:	f011 0f10 	tst.w	r1, #16
    1490:	d109      	bne.n	14a6 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1492:	f011 0f40 	tst.w	r1, #64	; 0x40
    1496:	d108      	bne.n	14aa <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1498:	f011 0f20 	tst.w	r1, #32
    149c:	d02f      	beq.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    149e:	2100      	movs	r1, #0
    14a0:	4b3f      	ldr	r3, [pc, #252]	; (15a0 <_usb_d_dev_handler+0x278>)
    14a2:	4798      	blx	r3
    14a4:	e02b      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    14a6:	47c8      	blx	r9
    14a8:	e029      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    14aa:	2101      	movs	r1, #1
    14ac:	4b3c      	ldr	r3, [pc, #240]	; (15a0 <_usb_d_dev_handler+0x278>)
    14ae:	4798      	blx	r3
    14b0:	e025      	b.n	14fe <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    14b2:	f011 0f40 	tst.w	r1, #64	; 0x40
    14b6:	d111      	bne.n	14dc <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    14b8:	f011 0f08 	tst.w	r1, #8
    14bc:	d112      	bne.n	14e4 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    14be:	f011 0f02 	tst.w	r1, #2
    14c2:	d112      	bne.n	14ea <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    14c4:	f003 0307 	and.w	r3, r3, #7
    14c8:	2b01      	cmp	r3, #1
    14ca:	d118      	bne.n	14fe <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    14cc:	f011 0f04 	tst.w	r1, #4
    14d0:	d10f      	bne.n	14f2 <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    14d2:	f011 0f10 	tst.w	r1, #16
    14d6:	d012      	beq.n	14fe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    14d8:	47c8      	blx	r9
    14da:	e010      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    14dc:	2101      	movs	r1, #1
    14de:	4b30      	ldr	r3, [pc, #192]	; (15a0 <_usb_d_dev_handler+0x278>)
    14e0:	4798      	blx	r3
    14e2:	e00c      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    14e4:	2101      	movs	r1, #1
    14e6:	47c0      	blx	r8
    14e8:	e009      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    14ea:	2101      	movs	r1, #1
    14ec:	4b2d      	ldr	r3, [pc, #180]	; (15a4 <_usb_d_dev_handler+0x27c>)
    14ee:	4798      	blx	r3
    14f0:	e005      	b.n	14fe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    14f2:	2100      	movs	r1, #0
    14f4:	47c0      	blx	r8
    14f6:	e002      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    14f8:	2100      	movs	r1, #0
    14fa:	4b29      	ldr	r3, [pc, #164]	; (15a0 <_usb_d_dev_handler+0x278>)
    14fc:	4798      	blx	r3
    14fe:	3401      	adds	r4, #1
    1500:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1502:	2c1b      	cmp	r4, #27
    1504:	d042      	beq.n	158c <_usb_d_dev_handler+0x264>
    1506:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1508:	7cab      	ldrb	r3, [r5, #18]
    150a:	2bff      	cmp	r3, #255	; 0xff
    150c:	d0f7      	beq.n	14fe <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    150e:	f003 030f 	and.w	r3, r3, #15
    1512:	2101      	movs	r1, #1
    1514:	4099      	lsls	r1, r3
    1516:	4231      	tst	r1, r6
    1518:	d0f1      	beq.n	14fe <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    151a:	0159      	lsls	r1, r3, #5
    151c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1520:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1524:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1526:	015b      	lsls	r3, r3, #5
    1528:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    152c:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    1530:	4019      	ands	r1, r3
    1532:	d0e4      	beq.n	14fe <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1534:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1538:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    153c:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    1540:	f003 0247 	and.w	r2, r3, #71	; 0x47
    1544:	2a01      	cmp	r2, #1
    1546:	d0a1      	beq.n	148c <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1548:	f013 0f80 	tst.w	r3, #128	; 0x80
    154c:	d1b1      	bne.n	14b2 <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    154e:	f011 0f20 	tst.w	r1, #32
    1552:	d1d1      	bne.n	14f8 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1554:	f011 0f04 	tst.w	r1, #4
    1558:	d10e      	bne.n	1578 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    155a:	f011 0f01 	tst.w	r1, #1
    155e:	d10e      	bne.n	157e <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1560:	f003 0307 	and.w	r3, r3, #7
    1564:	2b01      	cmp	r3, #1
    1566:	d1ca      	bne.n	14fe <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1568:	f011 0f08 	tst.w	r1, #8
    156c:	d10b      	bne.n	1586 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    156e:	f011 0f10 	tst.w	r1, #16
    1572:	d0c4      	beq.n	14fe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    1574:	47c8      	blx	r9
    1576:	e7c2      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    1578:	2100      	movs	r1, #0
    157a:	47c0      	blx	r8
    157c:	e7bf      	b.n	14fe <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    157e:	2101      	movs	r1, #1
    1580:	4b09      	ldr	r3, [pc, #36]	; (15a8 <_usb_d_dev_handler+0x280>)
    1582:	4798      	blx	r3
    1584:	e7bb      	b.n	14fe <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    1586:	2101      	movs	r1, #1
    1588:	47c0      	blx	r8
    158a:	e7b8      	b.n	14fe <_usb_d_dev_handler+0x1d6>
    158c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1590:	20000354 	.word	0x20000354
    1594:	20000280 	.word	0x20000280
    1598:	40001000 	.word	0x40001000
    159c:	00000f71 	.word	0x00000f71
    15a0:	00000da9 	.word	0x00000da9
    15a4:	00000fb5 	.word	0x00000fb5
    15a8:	00001139 	.word	0x00001139
    15ac:	00000d29 	.word	0x00000d29
    15b0:	00000e71 	.word	0x00000e71

000015b4 <_usb_d_dev_init>:
{
    15b4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    15b6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    15ba:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    15bc:	f013 0f01 	tst.w	r3, #1
    15c0:	d124      	bne.n	160c <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    15c2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    15c6:	7893      	ldrb	r3, [r2, #2]
    15c8:	f013 0f03 	tst.w	r3, #3
    15cc:	d1fb      	bne.n	15c6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    15ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    15d2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    15d4:	f013 0f02 	tst.w	r3, #2
    15d8:	d00f      	beq.n	15fa <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    15da:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    15de:	7813      	ldrb	r3, [r2, #0]
    15e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    15e4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    15e6:	7893      	ldrb	r3, [r2, #2]
    15e8:	f013 0f03 	tst.w	r3, #3
    15ec:	d1fb      	bne.n	15e6 <_usb_d_dev_init+0x32>
    15ee:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    15f2:	7893      	ldrb	r3, [r2, #2]
    15f4:	f013 0f02 	tst.w	r3, #2
    15f8:	d1fb      	bne.n	15f2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    15fa:	2201      	movs	r2, #1
    15fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1600:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1602:	461a      	mov	r2, r3
    1604:	7893      	ldrb	r3, [r2, #2]
    1606:	f013 0f03 	tst.w	r3, #3
    160a:	d1fb      	bne.n	1604 <_usb_d_dev_init+0x50>
    160c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1610:	7893      	ldrb	r3, [r2, #2]
    1612:	f013 0f01 	tst.w	r3, #1
    1616:	d1fb      	bne.n	1610 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1618:	4b24      	ldr	r3, [pc, #144]	; (16ac <_usb_d_dev_init+0xf8>)
    161a:	4a25      	ldr	r2, [pc, #148]	; (16b0 <_usb_d_dev_init+0xfc>)
    161c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1620:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1624:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1628:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    162c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    1630:	4b20      	ldr	r3, [pc, #128]	; (16b4 <_usb_d_dev_init+0x100>)
    1632:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1634:	4b20      	ldr	r3, [pc, #128]	; (16b8 <_usb_d_dev_init+0x104>)
    1636:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    1638:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    163c:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1640:	f011 011f 	ands.w	r1, r1, #31
    1644:	d02b      	beq.n	169e <_usb_d_dev_init+0xea>
		pad_transn = 9;
    1646:	291f      	cmp	r1, #31
    1648:	bf08      	it	eq
    164a:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    164c:	b34b      	cbz	r3, 16a2 <_usb_d_dev_init+0xee>
		pad_transp = 25;
    164e:	2b1f      	cmp	r3, #31
    1650:	bf08      	it	eq
    1652:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1654:	b33a      	cbz	r2, 16a6 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    1656:	2a07      	cmp	r2, #7
    1658:	bf08      	it	eq
    165a:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    165c:	f003 031f 	and.w	r3, r3, #31
    1660:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    1664:	0312      	lsls	r2, r2, #12
    1666:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    166a:	4313      	orrs	r3, r2
    166c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1670:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1672:	78d3      	ldrb	r3, [r2, #3]
    1674:	f043 0303 	orr.w	r3, r3, #3
    1678:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    167a:	78d3      	ldrb	r3, [r2, #3]
    167c:	f043 030c 	orr.w	r3, r3, #12
    1680:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1682:	2304      	movs	r3, #4
    1684:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1686:	7893      	ldrb	r3, [r2, #2]
    1688:	f013 0f03 	tst.w	r3, #3
    168c:	d1fb      	bne.n	1686 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    168e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1692:	4a06      	ldr	r2, [pc, #24]	; (16ac <_usb_d_dev_init+0xf8>)
    1694:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1696:	2201      	movs	r2, #1
    1698:	811a      	strh	r2, [r3, #8]
}
    169a:	2000      	movs	r0, #0
    169c:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    169e:	2109      	movs	r1, #9
    16a0:	e7d4      	b.n	164c <_usb_d_dev_init+0x98>
		pad_transp = 25;
    16a2:	2319      	movs	r3, #25
    16a4:	e7d6      	b.n	1654 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    16a6:	2206      	movs	r2, #6
    16a8:	e7d8      	b.n	165c <_usb_d_dev_init+0xa8>
    16aa:	bf00      	nop
    16ac:	20000280 	.word	0x20000280
    16b0:	00000d25 	.word	0x00000d25
    16b4:	00000f71 	.word	0x00000f71
    16b8:	00800084 	.word	0x00800084

000016bc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    16bc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    16c0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    16c2:	f013 0f03 	tst.w	r3, #3
    16c6:	d129      	bne.n	171c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16c8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    16cc:	7893      	ldrb	r3, [r2, #2]
    16ce:	f013 0f03 	tst.w	r3, #3
    16d2:	d1fb      	bne.n	16cc <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    16d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    16d8:	781b      	ldrb	r3, [r3, #0]
    16da:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    16dc:	f013 0f02 	tst.w	r3, #2
    16e0:	d108      	bne.n	16f4 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    16e2:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    16e6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    16ea:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    16ec:	7893      	ldrb	r3, [r2, #2]
    16ee:	f013 0f03 	tst.w	r3, #3
    16f2:	d1fb      	bne.n	16ec <_usb_d_dev_enable+0x30>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    16f4:	4b0b      	ldr	r3, [pc, #44]	; (1724 <_usb_d_dev_enable+0x68>)
    16f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    16fa:	609a      	str	r2, [r3, #8]
    16fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1700:	609a      	str	r2, [r3, #8]
    1702:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1706:	609a      	str	r2, [r3, #8]
    1708:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    170c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    170e:	f240 228d 	movw	r2, #653	; 0x28d
    1712:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1716:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1718:	2000      	movs	r0, #0
    171a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    171c:	f06f 0010 	mvn.w	r0, #16
}
    1720:	4770      	bx	lr
    1722:	bf00      	nop
    1724:	e000e100 	.word	0xe000e100

00001728 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1728:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    172c:	8913      	ldrh	r3, [r2, #8]
    172e:	f023 0301 	bic.w	r3, r3, #1
    1732:	041b      	lsls	r3, r3, #16
    1734:	0c1b      	lsrs	r3, r3, #16
    1736:	8113      	strh	r3, [r2, #8]
    1738:	4770      	bx	lr

0000173a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    173a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    173e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1742:	7298      	strb	r0, [r3, #10]
    1744:	4770      	bx	lr
	...

00001748 <_usb_d_dev_ep_init>:
{
    1748:	b5f0      	push	{r4, r5, r6, r7, lr}
    174a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    174e:	f010 050f 	ands.w	r5, r0, #15
    1752:	d04d      	beq.n	17f0 <_usb_d_dev_ep_init+0xa8>
    1754:	f1be 0f00 	cmp.w	lr, #0
    1758:	bfb4      	ite	lt
    175a:	1d6c      	addlt	r4, r5, #5
    175c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    175e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1762:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    1764:	2d05      	cmp	r5, #5
    1766:	d947      	bls.n	17f8 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    1768:	f06f 0011 	mvn.w	r0, #17
    176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    176e:	f1be 0f00 	cmp.w	lr, #0
    1772:	db1b      	blt.n	17ac <_usb_d_dev_ep_init+0x64>
    1774:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1778:	4e37      	ldr	r6, [pc, #220]	; (1858 <_usb_d_dev_ep_init+0x110>)
    177a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    177e:	2d00      	cmp	r5, #0
    1780:	d15e      	bne.n	1840 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1786:	4d34      	ldr	r5, [pc, #208]	; (1858 <_usb_d_dev_ep_init+0x110>)
    1788:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    178c:	4d33      	ldr	r5, [pc, #204]	; (185c <_usb_d_dev_ep_init+0x114>)
    178e:	00a6      	lsls	r6, r4, #2
    1790:	1933      	adds	r3, r6, r4
    1792:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1796:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    179a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    179e:	3101      	adds	r1, #1
    17a0:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    17a4:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    17a8:	2000      	movs	r0, #0
    17aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    17ac:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    17b0:	4e29      	ldr	r6, [pc, #164]	; (1858 <_usb_d_dev_ep_init+0x110>)
    17b2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    17b6:	686d      	ldr	r5, [r5, #4]
    17b8:	b935      	cbnz	r5, 17c8 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    17ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    17be:	4d26      	ldr	r5, [pc, #152]	; (1858 <_usb_d_dev_ep_init+0x110>)
    17c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    17c4:	685f      	ldr	r7, [r3, #4]
    17c6:	e7e1      	b.n	178c <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    17c8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    17cc:	4e22      	ldr	r6, [pc, #136]	; (1858 <_usb_d_dev_ep_init+0x110>)
    17ce:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    17d2:	896d      	ldrh	r5, [r5, #10]
    17d4:	4295      	cmp	r5, r2
    17d6:	daf0      	bge.n	17ba <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    17d8:	f06f 0012 	mvn.w	r0, #18
    17dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    17de:	f06f 0013 	mvn.w	r0, #19
    17e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    17e4:	f06f 0013 	mvn.w	r0, #19
    17e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    17ea:	f06f 0012 	mvn.w	r0, #18
    17ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    17f0:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    17f4:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    17f6:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    17f8:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    17fc:	4f17      	ldr	r7, [pc, #92]	; (185c <_usb_d_dev_ep_init+0x114>)
    17fe:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    1802:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    1806:	2eff      	cmp	r6, #255	; 0xff
    1808:	d1e9      	bne.n	17de <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    180a:	2900      	cmp	r1, #0
    180c:	d1af      	bne.n	176e <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    180e:	b125      	cbz	r5, 181a <_usb_d_dev_ep_init+0xd2>
    1810:	f1be 0f00 	cmp.w	lr, #0
    1814:	bfa4      	itt	ge
    1816:	3505      	addge	r5, #5
    1818:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    181a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    181e:	4e0f      	ldr	r6, [pc, #60]	; (185c <_usb_d_dev_ep_init+0x114>)
    1820:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1824:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    1828:	2dff      	cmp	r5, #255	; 0xff
    182a:	d1db      	bne.n	17e4 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    182c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1830:	4e09      	ldr	r6, [pc, #36]	; (1858 <_usb_d_dev_ep_init+0x110>)
    1832:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1836:	2d00      	cmp	r5, #0
    1838:	d0d7      	beq.n	17ea <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    183a:	f1be 0f00 	cmp.w	lr, #0
    183e:	dbb5      	blt.n	17ac <_usb_d_dev_ep_init+0x64>
    1840:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1844:	4e04      	ldr	r6, [pc, #16]	; (1858 <_usb_d_dev_ep_init+0x110>)
    1846:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    184a:	892d      	ldrh	r5, [r5, #8]
    184c:	4295      	cmp	r5, r2
    184e:	da98      	bge.n	1782 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    1850:	f06f 0012 	mvn.w	r0, #18
    1854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1856:	bf00      	nop
    1858:	000032f8 	.word	0x000032f8
    185c:	20000280 	.word	0x20000280

00001860 <_usb_d_dev_ep_deinit>:
{
    1860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1862:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1864:	f010 060f 	ands.w	r6, r0, #15
    1868:	d00e      	beq.n	1888 <_usb_d_dev_ep_deinit+0x28>
    186a:	2f00      	cmp	r7, #0
    186c:	bfb4      	ite	lt
    186e:	1d73      	addlt	r3, r6, #5
    1870:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1872:	2e05      	cmp	r6, #5
    1874:	d900      	bls.n	1878 <_usb_d_dev_ep_deinit+0x18>
    1876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    1878:	461d      	mov	r5, r3
    187a:	3301      	adds	r3, #1
    187c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1880:	4a24      	ldr	r2, [pc, #144]	; (1914 <_usb_d_dev_ep_deinit+0xb4>)
    1882:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    1886:	e002      	b.n	188e <_usb_d_dev_ep_deinit+0x2e>
    1888:	f8df e094 	ldr.w	lr, [pc, #148]	; 1920 <_usb_d_dev_ep_deinit+0xc0>
    188c:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    188e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    1892:	4a21      	ldr	r2, [pc, #132]	; (1918 <_usb_d_dev_ep_deinit+0xb8>)
    1894:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1898:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    189c:	2aff      	cmp	r2, #255	; 0xff
    189e:	d0ea      	beq.n	1876 <_usb_d_dev_ep_deinit+0x16>
    18a0:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    18a2:	2203      	movs	r2, #3
    18a4:	0ff9      	lsrs	r1, r7, #31
    18a6:	4670      	mov	r0, lr
    18a8:	4b1c      	ldr	r3, [pc, #112]	; (191c <_usb_d_dev_ep_deinit+0xbc>)
    18aa:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    18ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    18b0:	4a19      	ldr	r2, [pc, #100]	; (1918 <_usb_d_dev_ep_deinit+0xb8>)
    18b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    18b6:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    18ba:	f003 0307 	and.w	r3, r3, #7
    18be:	2b01      	cmp	r3, #1
    18c0:	d016      	beq.n	18f0 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    18c2:	2f00      	cmp	r7, #0
    18c4:	db1b      	blt.n	18fe <_usb_d_dev_ep_deinit+0x9e>
    18c6:	0160      	lsls	r0, r4, #5
    18c8:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    18cc:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    18d0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    18d4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    18d8:	4b0f      	ldr	r3, [pc, #60]	; (1918 <_usb_d_dev_ep_deinit+0xb8>)
    18da:	00aa      	lsls	r2, r5, #2
    18dc:	1951      	adds	r1, r2, r5
    18de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    18e2:	2000      	movs	r0, #0
    18e4:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    18e8:	22ff      	movs	r2, #255	; 0xff
    18ea:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    18ee:	e7c2      	b.n	1876 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    18f0:	0160      	lsls	r0, r4, #5
    18f2:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    18f6:	2300      	movs	r3, #0
    18f8:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    18fc:	e7ec      	b.n	18d8 <_usb_d_dev_ep_deinit+0x78>
    18fe:	0176      	lsls	r6, r6, #5
    1900:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1904:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    1908:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    190c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    1910:	e7e2      	b.n	18d8 <_usb_d_dev_ep_deinit+0x78>
    1912:	bf00      	nop
    1914:	20000340 	.word	0x20000340
    1918:	20000280 	.word	0x20000280
    191c:	00000e05 	.word	0x00000e05
    1920:	20000354 	.word	0x20000354

00001924 <_usb_d_dev_ep_enable>:
{
    1924:	b4f0      	push	{r4, r5, r6, r7}
    1926:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1928:	f010 000f 	ands.w	r0, r0, #15
    192c:	f000 80a7 	beq.w	1a7e <_usb_d_dev_ep_enable+0x15a>
    1930:	2e00      	cmp	r6, #0
    1932:	bfb4      	ite	lt
    1934:	1d43      	addlt	r3, r0, #5
    1936:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1938:	4605      	mov	r5, r0
    193a:	0142      	lsls	r2, r0, #5
    193c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1940:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    1944:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1946:	2805      	cmp	r0, #5
    1948:	f240 80a0 	bls.w	1a8c <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    194c:	f06f 0011 	mvn.w	r0, #17
    1950:	e07d      	b.n	1a4e <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1952:	f014 0f77 	tst.w	r4, #119	; 0x77
    1956:	f040 8089 	bne.w	1a6c <_usb_d_dev_ep_enable+0x148>
    195a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    195e:	2111      	movs	r1, #17
    1960:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1964:	4c9b      	ldr	r4, [pc, #620]	; (1bd4 <_usb_d_dev_ep_enable+0x2b0>)
    1966:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    196a:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    196e:	4c9a      	ldr	r4, [pc, #616]	; (1bd8 <_usb_d_dev_ep_enable+0x2b4>)
    1970:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1974:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1978:	f200 80cd 	bhi.w	1b16 <_usb_d_dev_ep_enable+0x1f2>
    197c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    1980:	f200 8112 	bhi.w	1ba8 <_usb_d_dev_ep_enable+0x284>
    1984:	2980      	cmp	r1, #128	; 0x80
    1986:	f200 8101 	bhi.w	1b8c <_usb_d_dev_ep_enable+0x268>
    198a:	2940      	cmp	r1, #64	; 0x40
    198c:	f200 8113 	bhi.w	1bb6 <_usb_d_dev_ep_enable+0x292>
    1990:	2920      	cmp	r1, #32
    1992:	f200 8102 	bhi.w	1b9a <_usb_d_dev_ep_enable+0x276>
    1996:	2910      	cmp	r1, #16
    1998:	f200 8114 	bhi.w	1bc4 <_usb_d_dev_ep_enable+0x2a0>
    199c:	2908      	cmp	r1, #8
    199e:	bf94      	ite	ls
    19a0:	2600      	movls	r6, #0
    19a2:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19a4:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    19a8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19aa:	f3c1 010d 	ubfx	r1, r1, #0, #14
    19ae:	e0b8      	b.n	1b22 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    19b0:	f014 0f70 	tst.w	r4, #112	; 0x70
    19b4:	d15d      	bne.n	1a72 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    19b6:	4e87      	ldr	r6, [pc, #540]	; (1bd4 <_usb_d_dev_ep_enable+0x2b0>)
    19b8:	009f      	lsls	r7, r3, #2
    19ba:	18f9      	adds	r1, r7, r3
    19bc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    19c0:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    19c4:	0109      	lsls	r1, r1, #4
    19c6:	f001 0170 	and.w	r1, r1, #112	; 0x70
    19ca:	430c      	orrs	r4, r1
    19cc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    19d0:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    19d4:	443b      	add	r3, r7
    19d6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    19da:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    19de:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    19e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    19e6:	d80f      	bhi.n	1a08 <_usb_d_dev_ep_enable+0xe4>
    19e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    19ec:	d819      	bhi.n	1a22 <_usb_d_dev_ep_enable+0xfe>
    19ee:	2b80      	cmp	r3, #128	; 0x80
    19f0:	d819      	bhi.n	1a26 <_usb_d_dev_ep_enable+0x102>
    19f2:	2b40      	cmp	r3, #64	; 0x40
    19f4:	d819      	bhi.n	1a2a <_usb_d_dev_ep_enable+0x106>
    19f6:	2b20      	cmp	r3, #32
    19f8:	d819      	bhi.n	1a2e <_usb_d_dev_ep_enable+0x10a>
    19fa:	2b10      	cmp	r3, #16
    19fc:	d819      	bhi.n	1a32 <_usb_d_dev_ep_enable+0x10e>
    19fe:	2b08      	cmp	r3, #8
    1a00:	bf94      	ite	ls
    1a02:	2300      	movls	r3, #0
    1a04:	2301      	movhi	r3, #1
    1a06:	e000      	b.n	1a0a <_usb_d_dev_ep_enable+0xe6>
    1a08:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a0a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    1a0e:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a10:	2380      	movs	r3, #128	; 0x80
    1a12:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    1a16:	4b6f      	ldr	r3, [pc, #444]	; (1bd4 <_usb_d_dev_ep_enable+0x2b0>)
    1a18:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    1a1c:	2000      	movs	r0, #0
    1a1e:	76a8      	strb	r0, [r5, #26]
    1a20:	e015      	b.n	1a4e <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a22:	2306      	movs	r3, #6
    1a24:	e7f1      	b.n	1a0a <_usb_d_dev_ep_enable+0xe6>
    1a26:	2305      	movs	r3, #5
    1a28:	e7ef      	b.n	1a0a <_usb_d_dev_ep_enable+0xe6>
    1a2a:	2304      	movs	r3, #4
    1a2c:	e7ed      	b.n	1a0a <_usb_d_dev_ep_enable+0xe6>
    1a2e:	2303      	movs	r3, #3
    1a30:	e7eb      	b.n	1a0a <_usb_d_dev_ep_enable+0xe6>
    1a32:	2302      	movs	r3, #2
    1a34:	e7e9      	b.n	1a0a <_usb_d_dev_ep_enable+0xe6>
    1a36:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a38:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a3c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a3e:	2340      	movs	r3, #64	; 0x40
    1a40:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    1a44:	4b63      	ldr	r3, [pc, #396]	; (1bd4 <_usb_d_dev_ep_enable+0x2b0>)
    1a46:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    1a4a:	2000      	movs	r0, #0
    1a4c:	72a8      	strb	r0, [r5, #10]
}
    1a4e:	bcf0      	pop	{r4, r5, r6, r7}
    1a50:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a52:	2106      	movs	r1, #6
    1a54:	e7f0      	b.n	1a38 <_usb_d_dev_ep_enable+0x114>
    1a56:	2105      	movs	r1, #5
    1a58:	e7ee      	b.n	1a38 <_usb_d_dev_ep_enable+0x114>
    1a5a:	2104      	movs	r1, #4
    1a5c:	e7ec      	b.n	1a38 <_usb_d_dev_ep_enable+0x114>
    1a5e:	2103      	movs	r1, #3
    1a60:	e7ea      	b.n	1a38 <_usb_d_dev_ep_enable+0x114>
    1a62:	2102      	movs	r1, #2
    1a64:	e7e8      	b.n	1a38 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    1a66:	f06f 0011 	mvn.w	r0, #17
    1a6a:	e7f0      	b.n	1a4e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    1a6c:	f06f 0013 	mvn.w	r0, #19
    1a70:	e7ed      	b.n	1a4e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    1a72:	f06f 0013 	mvn.w	r0, #19
    1a76:	e7ea      	b.n	1a4e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    1a78:	f06f 0013 	mvn.w	r0, #19
    1a7c:	e7e7      	b.n	1a4e <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1a7e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1a82:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    1a86:	b2e4      	uxtb	r4, r4
    1a88:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    1a8a:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1a8c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1a90:	4950      	ldr	r1, [pc, #320]	; (1bd4 <_usb_d_dev_ep_enable+0x2b0>)
    1a92:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1a96:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    1a9a:	2aff      	cmp	r2, #255	; 0xff
    1a9c:	d0e3      	beq.n	1a66 <_usb_d_dev_ep_enable+0x142>
    1a9e:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1aa0:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1aa2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    1aa6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    1aaa:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    1aae:	f001 0107 	and.w	r1, r1, #7
    1ab2:	2901      	cmp	r1, #1
    1ab4:	f43f af4d 	beq.w	1952 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    1ab8:	2e00      	cmp	r6, #0
    1aba:	f6ff af79 	blt.w	19b0 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1abe:	f014 0f07 	tst.w	r4, #7
    1ac2:	d1d9      	bne.n	1a78 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1ac4:	4e43      	ldr	r6, [pc, #268]	; (1bd4 <_usb_d_dev_ep_enable+0x2b0>)
    1ac6:	009f      	lsls	r7, r3, #2
    1ac8:	18f9      	adds	r1, r7, r3
    1aca:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1ace:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    1ad2:	f001 0107 	and.w	r1, r1, #7
    1ad6:	430c      	orrs	r4, r1
    1ad8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1adc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1ae0:	443b      	add	r3, r7
    1ae2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    1ae6:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    1aea:	4b3b      	ldr	r3, [pc, #236]	; (1bd8 <_usb_d_dev_ep_enable+0x2b4>)
    1aec:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1af0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1af4:	d89f      	bhi.n	1a36 <_usb_d_dev_ep_enable+0x112>
    1af6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    1afa:	d8aa      	bhi.n	1a52 <_usb_d_dev_ep_enable+0x12e>
    1afc:	2980      	cmp	r1, #128	; 0x80
    1afe:	d8aa      	bhi.n	1a56 <_usb_d_dev_ep_enable+0x132>
    1b00:	2940      	cmp	r1, #64	; 0x40
    1b02:	d8aa      	bhi.n	1a5a <_usb_d_dev_ep_enable+0x136>
    1b04:	2920      	cmp	r1, #32
    1b06:	d8aa      	bhi.n	1a5e <_usb_d_dev_ep_enable+0x13a>
    1b08:	2910      	cmp	r1, #16
    1b0a:	d8aa      	bhi.n	1a62 <_usb_d_dev_ep_enable+0x13e>
    1b0c:	2908      	cmp	r1, #8
    1b0e:	bf94      	ite	ls
    1b10:	2100      	movls	r1, #0
    1b12:	2101      	movhi	r1, #1
    1b14:	e790      	b.n	1a38 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b16:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1b1a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b1c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1b20:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b22:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    1b26:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b28:	2640      	movs	r6, #64	; 0x40
    1b2a:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1b2e:	2180      	movs	r1, #128	; 0x80
    1b30:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    1b34:	4f27      	ldr	r7, [pc, #156]	; (1bd4 <_usb_d_dev_ep_enable+0x2b0>)
    1b36:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    1b3a:	2000      	movs	r0, #0
    1b3c:	72a8      	strb	r0, [r5, #10]
    1b3e:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b40:	009c      	lsls	r4, r3, #2
    1b42:	18e1      	adds	r1, r4, r3
    1b44:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    1b48:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    1b4c:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1b50:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    1b54:	0152      	lsls	r2, r2, #5
    1b56:	18b9      	adds	r1, r7, r2
    1b58:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    1b5a:	4423      	add	r3, r4
    1b5c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1b60:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    1b64:	684b      	ldr	r3, [r1, #4]
    1b66:	f364 339b 	bfi	r3, r4, #14, #14
    1b6a:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1b6c:	684b      	ldr	r3, [r1, #4]
    1b6e:	f360 030d 	bfi	r3, r0, #0, #14
    1b72:	604b      	str	r3, [r1, #4]
    1b74:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1b78:	21b0      	movs	r1, #176	; 0xb0
    1b7a:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b7e:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b82:	461a      	mov	r2, r3
    1b84:	2310      	movs	r3, #16
    1b86:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    1b8a:	e760      	b.n	1a4e <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b8c:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1b90:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b92:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1b96:	2605      	movs	r6, #5
    1b98:	e7c3      	b.n	1b22 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b9a:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1b9e:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ba0:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ba4:	2603      	movs	r6, #3
    1ba6:	e7bc      	b.n	1b22 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ba8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1bac:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bae:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1bb2:	2606      	movs	r6, #6
    1bb4:	e7b5      	b.n	1b22 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bb6:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1bba:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bbc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1bc0:	2604      	movs	r6, #4
    1bc2:	e7ae      	b.n	1b22 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bc4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1bc8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1bca:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1bce:	2602      	movs	r6, #2
    1bd0:	e7a7      	b.n	1b22 <_usb_d_dev_ep_enable+0x1fe>
    1bd2:	bf00      	nop
    1bd4:	20000280 	.word	0x20000280
    1bd8:	0fffc000 	.word	0x0fffc000

00001bdc <_usb_d_dev_ep_stall>:
{
    1bdc:	b470      	push	{r4, r5, r6}
    1bde:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1be0:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1be2:	f010 000f 	ands.w	r0, r0, #15
    1be6:	d008      	beq.n	1bfa <_usb_d_dev_ep_stall+0x1e>
    1be8:	2b00      	cmp	r3, #0
    1bea:	bfb4      	ite	lt
    1bec:	1d43      	addlt	r3, r0, #5
    1bee:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    1bf0:	2805      	cmp	r0, #5
    1bf2:	d903      	bls.n	1bfc <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    1bf4:	f06f 0011 	mvn.w	r0, #17
    1bf8:	e018      	b.n	1c2c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    1bfa:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    1bfc:	2901      	cmp	r1, #1
    1bfe:	d017      	beq.n	1c30 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1c00:	2900      	cmp	r1, #0
    1c02:	d03a      	beq.n	1c7a <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c08:	4a45      	ldr	r2, [pc, #276]	; (1d20 <_usb_d_dev_ep_stall+0x144>)
    1c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c0e:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1c12:	f003 030f 	and.w	r3, r3, #15
    1c16:	015b      	lsls	r3, r3, #5
    1c18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c1c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c20:	2310      	movs	r3, #16
    1c22:	40a3      	lsls	r3, r4
    1c24:	421a      	tst	r2, r3
    1c26:	bf14      	ite	ne
    1c28:	2001      	movne	r0, #1
    1c2a:	2000      	moveq	r0, #0
}
    1c2c:	bc70      	pop	{r4, r5, r6}
    1c2e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c30:	2510      	movs	r5, #16
    1c32:	40a5      	lsls	r5, r4
    1c34:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c36:	493a      	ldr	r1, [pc, #232]	; (1d20 <_usb_d_dev_ep_stall+0x144>)
    1c38:	009e      	lsls	r6, r3, #2
    1c3a:	18f2      	adds	r2, r6, r3
    1c3c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1c40:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c44:	f002 020f 	and.w	r2, r2, #15
    1c48:	0150      	lsls	r0, r2, #5
    1c4a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1c4e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1c52:	2020      	movs	r0, #32
    1c54:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1c58:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c5a:	0152      	lsls	r2, r2, #5
    1c5c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1c60:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    1c64:	4433      	add	r3, r6
    1c66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1c6a:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    1c6e:	f042 0208 	orr.w	r2, r2, #8
    1c72:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1c76:	2000      	movs	r0, #0
    1c78:	e7d8      	b.n	1c2c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1c7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1c7e:	4928      	ldr	r1, [pc, #160]	; (1d20 <_usb_d_dev_ep_stall+0x144>)
    1c80:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1c84:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    1c88:	f002 020f 	and.w	r2, r2, #15
    1c8c:	0151      	lsls	r1, r2, #5
    1c8e:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1c92:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c96:	2010      	movs	r0, #16
    1c98:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    1c9a:	4205      	tst	r5, r0
    1c9c:	d03c      	beq.n	1d18 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c9e:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1ca0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1ca4:	2020      	movs	r0, #32
    1ca6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1ca8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1caa:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1cae:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1cb2:	4202      	tst	r2, r0
    1cb4:	d007      	beq.n	1cc6 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cb6:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1cba:	2201      	movs	r2, #1
    1cbc:	fa02 f404 	lsl.w	r4, r2, r4
    1cc0:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1cc2:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1cc6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1cca:	4815      	ldr	r0, [pc, #84]	; (1d20 <_usb_d_dev_ep_stall+0x144>)
    1ccc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1cd0:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    1cd4:	f002 0207 	and.w	r2, r2, #7
    1cd8:	2a01      	cmp	r2, #1
    1cda:	d00c      	beq.n	1cf6 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    1cdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1ce0:	4a0f      	ldr	r2, [pc, #60]	; (1d20 <_usb_d_dev_ep_stall+0x144>)
    1ce2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ce6:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    1cea:	f36f 02c3 	bfc	r2, #3, #1
    1cee:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1cf2:	2000      	movs	r0, #0
    1cf4:	e79a      	b.n	1c2c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1cf6:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1cfa:	f012 0f30 	tst.w	r2, #48	; 0x30
    1cfe:	d10d      	bne.n	1d1c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    1d00:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1d04:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    1d08:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    1d0c:	f36f 02c3 	bfc	r2, #3, #1
    1d10:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1d14:	2000      	movs	r0, #0
    1d16:	e789      	b.n	1c2c <_usb_d_dev_ep_stall+0x50>
    1d18:	2000      	movs	r0, #0
    1d1a:	e787      	b.n	1c2c <_usb_d_dev_ep_stall+0x50>
    1d1c:	2000      	movs	r0, #0
    1d1e:	e785      	b.n	1c2c <_usb_d_dev_ep_stall+0x50>
    1d20:	20000280 	.word	0x20000280

00001d24 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1d24:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    1d26:	f000 040f 	and.w	r4, r0, #15
    1d2a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1d2c:	4a14      	ldr	r2, [pc, #80]	; (1d80 <_usb_d_dev_ep_read_req+0x5c>)
    1d2e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    1d30:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1d32:	6840      	ldr	r0, [r0, #4]
    1d34:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1d38:	2c05      	cmp	r4, #5
    1d3a:	d817      	bhi.n	1d6c <_usb_d_dev_ep_read_req+0x48>
    1d3c:	b1c9      	cbz	r1, 1d72 <_usb_d_dev_ep_read_req+0x4e>
    1d3e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d42:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    1d46:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1d48:	2a11      	cmp	r2, #17
    1d4a:	d115      	bne.n	1d78 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1d4c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    1d50:	f012 0f10 	tst.w	r2, #16
    1d54:	d102      	bne.n	1d5c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    1d56:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1d58:	bc30      	pop	{r4, r5}
    1d5a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    1d5c:	682c      	ldr	r4, [r5, #0]
    1d5e:	686a      	ldr	r2, [r5, #4]
    1d60:	600c      	str	r4, [r1, #0]
    1d62:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1d64:	2210      	movs	r2, #16
    1d66:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    1d6a:	e7f5      	b.n	1d58 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    1d6c:	f06f 0011 	mvn.w	r0, #17
    1d70:	e7f2      	b.n	1d58 <_usb_d_dev_ep_read_req+0x34>
    1d72:	f06f 0011 	mvn.w	r0, #17
    1d76:	e7ef      	b.n	1d58 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    1d78:	f06f 0012 	mvn.w	r0, #18
    1d7c:	e7ec      	b.n	1d58 <_usb_d_dev_ep_read_req+0x34>
    1d7e:	bf00      	nop
    1d80:	20000280 	.word	0x20000280

00001d84 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d88:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1d8a:	7a03      	ldrb	r3, [r0, #8]
    1d8c:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1d8e:	f013 030f 	ands.w	r3, r3, #15
    1d92:	f000 80c2 	beq.w	1f1a <_usb_d_dev_ep_trans+0x196>
    1d96:	2e00      	cmp	r6, #0
    1d98:	bfb4      	ite	lt
    1d9a:	1d5a      	addlt	r2, r3, #5
    1d9c:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    1d9e:	4614      	mov	r4, r2
    1da0:	4969      	ldr	r1, [pc, #420]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1da2:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    1da6:	1c55      	adds	r5, r2, #1
    1da8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1dac:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1db0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1db4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1db8:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    1dbc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1dc0:	428a      	cmp	r2, r1
    1dc2:	d025      	beq.n	1e10 <_usb_d_dev_ep_trans+0x8c>
    1dc4:	1e55      	subs	r5, r2, #1
    1dc6:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    1dc8:	6841      	ldr	r1, [r0, #4]
    1dca:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1dcc:	2b05      	cmp	r3, #5
    1dce:	f200 8092 	bhi.w	1ef6 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1dd2:	6803      	ldr	r3, [r0, #0]
    1dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1dd8:	d31c      	bcc.n	1e14 <_usb_d_dev_ep_trans+0x90>
    1dda:	eb03 0c01 	add.w	ip, r3, r1
    1dde:	f8df e180 	ldr.w	lr, [pc, #384]	; 1f60 <_usb_d_dev_ep_trans+0x1dc>
    1de2:	45f4      	cmp	ip, lr
    1de4:	d816      	bhi.n	1e14 <_usb_d_dev_ep_trans+0x90>
    1de6:	f013 0f03 	tst.w	r3, #3
    1dea:	d113      	bne.n	1e14 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    1dec:	2e00      	cmp	r6, #0
    1dee:	db2a      	blt.n	1e46 <_usb_d_dev_ep_trans+0xc2>
    1df0:	428a      	cmp	r2, r1
    1df2:	f200 809c 	bhi.w	1f2e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1df6:	b34d      	cbz	r5, 1e4c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    1df8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1dfc:	4a52      	ldr	r2, [pc, #328]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1dfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    1e06:	2b00      	cmp	r3, #0
    1e08:	d07b      	beq.n	1f02 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    1e0a:	f04f 0800 	mov.w	r8, #0
    1e0e:	e00c      	b.n	1e2a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e10:	4615      	mov	r5, r2
    1e12:	e7d9      	b.n	1dc8 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1e14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e18:	4a4b      	ldr	r2, [pc, #300]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1e1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    1e22:	2b00      	cmp	r3, #0
    1e24:	d06a      	beq.n	1efc <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    1e26:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1e2a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e2e:	4a46      	ldr	r2, [pc, #280]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1e30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e34:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    1e38:	f013 0f08 	tst.w	r3, #8
    1e3c:	d009      	beq.n	1e52 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    1e3e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1e40:	b003      	add	sp, #12
    1e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    1e46:	f04f 0800 	mov.w	r8, #0
    1e4a:	e7ee      	b.n	1e2a <_usb_d_dev_ep_trans+0xa6>
    1e4c:	f04f 0800 	mov.w	r8, #0
    1e50:	e7eb      	b.n	1e2a <_usb_d_dev_ep_trans+0xa6>
    1e52:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    1e54:	a801      	add	r0, sp, #4
    1e56:	4b3d      	ldr	r3, [pc, #244]	; (1f4c <_usb_d_dev_ep_trans+0x1c8>)
    1e58:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1e5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e5e:	4a3a      	ldr	r2, [pc, #232]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1e60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e64:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    1e68:	f013 0f40 	tst.w	r3, #64	; 0x40
    1e6c:	d13c      	bne.n	1ee8 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    1e6e:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    1e72:	4b35      	ldr	r3, [pc, #212]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1e74:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    1e78:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    1e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e80:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    1e84:	a801      	add	r0, sp, #4
    1e86:	4b32      	ldr	r3, [pc, #200]	; (1f50 <_usb_d_dev_ep_trans+0x1cc>)
    1e88:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1e8a:	f8da 3000 	ldr.w	r3, [sl]
    1e8e:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    1e92:	f8da 3004 	ldr.w	r3, [sl, #4]
    1e96:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    1e9a:	2300      	movs	r3, #0
    1e9c:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1ea0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    1ea2:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    1ea6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    1eaa:	f368 1345 	bfi	r3, r8, #5, #1
    1eae:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1eb2:	f89a 3009 	ldrb.w	r3, [sl, #9]
    1eb6:	b1e3      	cbz	r3, 1ef2 <_usb_d_dev_ep_trans+0x16e>
    1eb8:	fab5 f585 	clz	r5, r5
    1ebc:	096d      	lsrs	r5, r5, #5
    1ebe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1ec2:	4b21      	ldr	r3, [pc, #132]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1ec4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1ec8:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    1ecc:	f365 1304 	bfi	r3, r5, #4, #1
    1ed0:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    1ed4:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    1ed6:	f04f 0100 	mov.w	r1, #0
    1eda:	4638      	mov	r0, r7
    1edc:	bfb4      	ite	lt
    1ede:	4b1d      	ldrlt	r3, [pc, #116]	; (1f54 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    1ee0:	4b1d      	ldrge	r3, [pc, #116]	; (1f58 <_usb_d_dev_ep_trans+0x1d4>)
    1ee2:	4798      	blx	r3
	return ERR_NONE;
    1ee4:	2000      	movs	r0, #0
    1ee6:	e7ab      	b.n	1e40 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    1ee8:	a801      	add	r0, sp, #4
    1eea:	4b19      	ldr	r3, [pc, #100]	; (1f50 <_usb_d_dev_ep_trans+0x1cc>)
    1eec:	4798      	blx	r3
		return USB_BUSY;
    1eee:	2001      	movs	r0, #1
    1ef0:	e7a6      	b.n	1e40 <_usb_d_dev_ep_trans+0xbc>
    1ef2:	2500      	movs	r5, #0
    1ef4:	e7e3      	b.n	1ebe <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    1ef6:	f06f 0011 	mvn.w	r0, #17
    1efa:	e7a1      	b.n	1e40 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    1efc:	f06f 0012 	mvn.w	r0, #18
    1f00:	e79e      	b.n	1e40 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    1f02:	f06f 0011 	mvn.w	r0, #17
    1f06:	e79b      	b.n	1e40 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    1f08:	f06f 0012 	mvn.w	r0, #18
    1f0c:	e798      	b.n	1e40 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    1f0e:	6841      	ldr	r1, [r0, #4]
    1f10:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    1f14:	4f11      	ldr	r7, [pc, #68]	; (1f5c <_usb_d_dev_ep_trans+0x1d8>)
    1f16:	2400      	movs	r4, #0
    1f18:	e75b      	b.n	1dd2 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f1a:	4a0b      	ldr	r2, [pc, #44]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1f1c:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    1f20:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1f24:	428a      	cmp	r2, r1
    1f26:	d0f2      	beq.n	1f0e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    1f28:	4f0c      	ldr	r7, [pc, #48]	; (1f5c <_usb_d_dev_ep_trans+0x1d8>)
    1f2a:	2400      	movs	r4, #0
    1f2c:	e74a      	b.n	1dc4 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    1f2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1f32:	4a05      	ldr	r2, [pc, #20]	; (1f48 <_usb_d_dev_ep_trans+0x1c4>)
    1f34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	d0e3      	beq.n	1f08 <_usb_d_dev_ep_trans+0x184>
    1f40:	f04f 0801 	mov.w	r8, #1
    1f44:	e771      	b.n	1e2a <_usb_d_dev_ep_trans+0xa6>
    1f46:	bf00      	nop
    1f48:	20000280 	.word	0x20000280
    1f4c:	000004f5 	.word	0x000004f5
    1f50:	00000503 	.word	0x00000503
    1f54:	00000fb5 	.word	0x00000fb5
    1f58:	00001139 	.word	0x00001139
    1f5c:	20000354 	.word	0x20000354
    1f60:	20041fff 	.word	0x20041fff

00001f64 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1f64:	4b07      	ldr	r3, [pc, #28]	; (1f84 <_usb_d_dev_register_callback+0x20>)
    1f66:	2900      	cmp	r1, #0
    1f68:	bf08      	it	eq
    1f6a:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    1f6c:	2801      	cmp	r0, #1
    1f6e:	d004      	beq.n	1f7a <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1f70:	b910      	cbnz	r0, 1f78 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1f72:	4b05      	ldr	r3, [pc, #20]	; (1f88 <_usb_d_dev_register_callback+0x24>)
    1f74:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    1f78:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1f7a:	4b03      	ldr	r3, [pc, #12]	; (1f88 <_usb_d_dev_register_callback+0x24>)
    1f7c:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    1f80:	4770      	bx	lr
    1f82:	bf00      	nop
    1f84:	00000d25 	.word	0x00000d25
    1f88:	20000280 	.word	0x20000280

00001f8c <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1f8c:	4b0a      	ldr	r3, [pc, #40]	; (1fb8 <_usb_d_dev_register_ep_callback+0x2c>)
    1f8e:	2900      	cmp	r1, #0
    1f90:	bf08      	it	eq
    1f92:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1f94:	4603      	mov	r3, r0
    1f96:	b138      	cbz	r0, 1fa8 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1f98:	2801      	cmp	r0, #1
    1f9a:	d009      	beq.n	1fb0 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1f9c:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1f9e:	bf04      	itt	eq
    1fa0:	4b06      	ldreq	r3, [pc, #24]	; (1fbc <_usb_d_dev_register_ep_callback+0x30>)
    1fa2:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    1fa6:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <_usb_d_dev_register_ep_callback+0x30>)
    1faa:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    1fae:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1fb0:	4b02      	ldr	r3, [pc, #8]	; (1fbc <_usb_d_dev_register_ep_callback+0x30>)
    1fb2:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    1fb6:	4770      	bx	lr
    1fb8:	00000d25 	.word	0x00000d25
    1fbc:	20000280 	.word	0x20000280

00001fc0 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    1fc0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1fc2:	4b01      	ldr	r3, [pc, #4]	; (1fc8 <USB_0_Handler+0x8>)
    1fc4:	4798      	blx	r3
    1fc6:	bd08      	pop	{r3, pc}
    1fc8:	00001329 	.word	0x00001329

00001fcc <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    1fcc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1fce:	4b01      	ldr	r3, [pc, #4]	; (1fd4 <USB_1_Handler+0x8>)
    1fd0:	4798      	blx	r3
    1fd2:	bd08      	pop	{r3, pc}
    1fd4:	00001329 	.word	0x00001329

00001fd8 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    1fd8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1fda:	4b01      	ldr	r3, [pc, #4]	; (1fe0 <USB_2_Handler+0x8>)
    1fdc:	4798      	blx	r3
    1fde:	bd08      	pop	{r3, pc}
    1fe0:	00001329 	.word	0x00001329

00001fe4 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    1fe4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1fe6:	4b01      	ldr	r3, [pc, #4]	; (1fec <USB_3_Handler+0x8>)
    1fe8:	4798      	blx	r3
    1fea:	bd08      	pop	{r3, pc}
    1fec:	00001329 	.word	0x00001329

00001ff0 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ff2:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1ff4:	780b      	ldrb	r3, [r1, #0]
    1ff6:	f3c3 1441 	ubfx	r4, r3, #5, #2
    1ffa:	2c01      	cmp	r4, #1
    1ffc:	d15e      	bne.n	20bc <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    1ffe:	888c      	ldrh	r4, [r1, #4]
    2000:	4d35      	ldr	r5, [pc, #212]	; (20d8 <cdcdf_acm_req+0xe8>)
    2002:	782d      	ldrb	r5, [r5, #0]
    2004:	42a5      	cmp	r5, r4
    2006:	d003      	beq.n	2010 <cdcdf_acm_req+0x20>
    2008:	4d33      	ldr	r5, [pc, #204]	; (20d8 <cdcdf_acm_req+0xe8>)
    200a:	786d      	ldrb	r5, [r5, #1]
    200c:	42a5      	cmp	r5, r4
    200e:	d158      	bne.n	20c2 <cdcdf_acm_req+0xd2>
    2010:	4616      	mov	r6, r2
    2012:	460c      	mov	r4, r1
    2014:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    2016:	f013 0f80 	tst.w	r3, #128	; 0x80
    201a:	d10c      	bne.n	2036 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    201c:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    201e:	4b2f      	ldr	r3, [pc, #188]	; (20dc <cdcdf_acm_req+0xec>)
    2020:	4798      	blx	r3
    2022:	4601      	mov	r1, r0
	switch (req->bRequest) {
    2024:	7863      	ldrb	r3, [r4, #1]
    2026:	2b20      	cmp	r3, #32
    2028:	d013      	beq.n	2052 <cdcdf_acm_req+0x62>
    202a:	2b22      	cmp	r3, #34	; 0x22
    202c:	d032      	beq.n	2094 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    202e:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    2032:	b003      	add	sp, #12
    2034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    2036:	2a01      	cmp	r2, #1
    2038:	d046      	beq.n	20c8 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    203a:	784b      	ldrb	r3, [r1, #1]
    203c:	2b21      	cmp	r3, #33	; 0x21
    203e:	d145      	bne.n	20cc <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2040:	88cb      	ldrh	r3, [r1, #6]
    2042:	2b07      	cmp	r3, #7
    2044:	d145      	bne.n	20d2 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    2046:	2300      	movs	r3, #0
    2048:	2207      	movs	r2, #7
    204a:	4925      	ldr	r1, [pc, #148]	; (20e0 <cdcdf_acm_req+0xf0>)
    204c:	4c25      	ldr	r4, [pc, #148]	; (20e4 <cdcdf_acm_req+0xf4>)
    204e:	47a0      	blx	r4
    2050:	e7ef      	b.n	2032 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    2052:	2f07      	cmp	r7, #7
    2054:	d12b      	bne.n	20ae <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    2056:	b1be      	cbz	r6, 2088 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    2058:	6800      	ldr	r0, [r0, #0]
    205a:	9000      	str	r0, [sp, #0]
    205c:	888a      	ldrh	r2, [r1, #4]
    205e:	798b      	ldrb	r3, [r1, #6]
    2060:	f8ad 2004 	strh.w	r2, [sp, #4]
    2064:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    2068:	4b1b      	ldr	r3, [pc, #108]	; (20d8 <cdcdf_acm_req+0xe8>)
    206a:	691b      	ldr	r3, [r3, #16]
    206c:	b113      	cbz	r3, 2074 <cdcdf_acm_req+0x84>
    206e:	4668      	mov	r0, sp
    2070:	4798      	blx	r3
    2072:	b1f8      	cbz	r0, 20b4 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    2074:	4b18      	ldr	r3, [pc, #96]	; (20d8 <cdcdf_acm_req+0xe8>)
    2076:	aa02      	add	r2, sp, #8
    2078:	e912 0003 	ldmdb	r2, {r0, r1}
    207c:	6098      	str	r0, [r3, #8]
    207e:	8199      	strh	r1, [r3, #12]
    2080:	0c09      	lsrs	r1, r1, #16
    2082:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    2084:	2000      	movs	r0, #0
    2086:	e7d4      	b.n	2032 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    2088:	2300      	movs	r3, #0
    208a:	2207      	movs	r2, #7
    208c:	4628      	mov	r0, r5
    208e:	4c15      	ldr	r4, [pc, #84]	; (20e4 <cdcdf_acm_req+0xf4>)
    2090:	47a0      	blx	r4
    2092:	e7ce      	b.n	2032 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    2094:	2300      	movs	r3, #0
    2096:	461a      	mov	r2, r3
    2098:	4619      	mov	r1, r3
    209a:	4618      	mov	r0, r3
    209c:	4d11      	ldr	r5, [pc, #68]	; (20e4 <cdcdf_acm_req+0xf4>)
    209e:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    20a0:	4b0d      	ldr	r3, [pc, #52]	; (20d8 <cdcdf_acm_req+0xe8>)
    20a2:	695b      	ldr	r3, [r3, #20]
    20a4:	b143      	cbz	r3, 20b8 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    20a6:	8860      	ldrh	r0, [r4, #2]
    20a8:	4798      	blx	r3
		return ERR_NONE;
    20aa:	2000      	movs	r0, #0
    20ac:	e7c1      	b.n	2032 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    20ae:	f04f 30ff 	mov.w	r0, #4294967295
    20b2:	e7be      	b.n	2032 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    20b4:	2000      	movs	r0, #0
    20b6:	e7bc      	b.n	2032 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    20b8:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    20ba:	e7ba      	b.n	2032 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    20bc:	f06f 0009 	mvn.w	r0, #9
    20c0:	e7b7      	b.n	2032 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    20c2:	f06f 0009 	mvn.w	r0, #9
    20c6:	e7b4      	b.n	2032 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    20c8:	2000      	movs	r0, #0
    20ca:	e7b2      	b.n	2032 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    20cc:	f06f 000c 	mvn.w	r0, #12
    20d0:	e7af      	b.n	2032 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    20d2:	f04f 30ff 	mov.w	r0, #4294967295
    20d6:	e7ac      	b.n	2032 <cdcdf_acm_req+0x42>
    20d8:	200005f8 	.word	0x200005f8
    20dc:	00002ed9 	.word	0x00002ed9
    20e0:	20000600 	.word	0x20000600
    20e4:	000029b5 	.word	0x000029b5

000020e8 <cdcdf_acm_ctrl>:
{
    20e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20ec:	b083      	sub	sp, #12
    20ee:	4616      	mov	r6, r2
	switch (ctrl) {
    20f0:	2901      	cmp	r1, #1
    20f2:	d066      	beq.n	21c2 <cdcdf_acm_ctrl+0xda>
    20f4:	b141      	cbz	r1, 2108 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    20f6:	2902      	cmp	r1, #2
    20f8:	bf0c      	ite	eq
    20fa:	f06f 001a 	mvneq.w	r0, #26
    20fe:	f06f 000c 	mvnne.w	r0, #12
}
    2102:	b003      	add	sp, #12
    2104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2108:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    210c:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    210e:	2800      	cmp	r0, #0
    2110:	f000 8085 	beq.w	221e <cdcdf_acm_ctrl+0x136>
    2114:	f10a 3bff 	add.w	fp, sl, #4294967295
    2118:	f10a 0301 	add.w	r3, sl, #1
    211c:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    211e:	4f46      	ldr	r7, [pc, #280]	; (2238 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    2120:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2248 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2124:	f8df 8124 	ldr.w	r8, [pc, #292]	; 224c <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    2128:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    212a:	7943      	ldrb	r3, [r0, #5]
    212c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2130:	2b02      	cmp	r3, #2
    2132:	d002      	beq.n	213a <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    2134:	f06f 0009 	mvn.w	r0, #9
    2138:	e7e3      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
    213a:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    213e:	f89b 3000 	ldrb.w	r3, [fp]
    2142:	429a      	cmp	r2, r3
    2144:	d06e      	beq.n	2224 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    2146:	2bff      	cmp	r3, #255	; 0xff
    2148:	d16f      	bne.n	222a <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    214a:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    214e:	2205      	movs	r2, #5
    2150:	6871      	ldr	r1, [r6, #4]
    2152:	4b3a      	ldr	r3, [pc, #232]	; (223c <cdcdf_acm_ctrl+0x154>)
    2154:	4798      	blx	r3
		while (NULL != ep) {
    2156:	4604      	mov	r4, r0
    2158:	b1f8      	cbz	r0, 219a <cdcdf_acm_ctrl+0xb2>
    215a:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    215e:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    2160:	7963      	ldrb	r3, [r4, #5]
    2162:	7922      	ldrb	r2, [r4, #4]
    2164:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2168:	b292      	uxth	r2, r2
    216a:	78e1      	ldrb	r1, [r4, #3]
    216c:	4628      	mov	r0, r5
    216e:	47b8      	blx	r7
    2170:	2800      	cmp	r0, #0
    2172:	d15d      	bne.n	2230 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2174:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    2178:	bf14      	ite	ne
    217a:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    217e:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    2182:	4628      	mov	r0, r5
    2184:	47c8      	blx	r9
			desc->sod = ep;
    2186:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    2188:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    218a:	6871      	ldr	r1, [r6, #4]
    218c:	4420      	add	r0, r4
    218e:	47c0      	blx	r8
		while (NULL != ep) {
    2190:	4604      	mov	r4, r0
    2192:	2800      	cmp	r0, #0
    2194:	d1e3      	bne.n	215e <cdcdf_acm_ctrl+0x76>
    2196:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    219a:	6833      	ldr	r3, [r6, #0]
    219c:	7818      	ldrb	r0, [r3, #0]
    219e:	2204      	movs	r2, #4
    21a0:	6871      	ldr	r1, [r6, #4]
    21a2:	4418      	add	r0, r3
    21a4:	4b25      	ldr	r3, [pc, #148]	; (223c <cdcdf_acm_ctrl+0x154>)
    21a6:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    21a8:	9b00      	ldr	r3, [sp, #0]
    21aa:	459b      	cmp	fp, r3
    21ac:	d004      	beq.n	21b8 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    21ae:	2800      	cmp	r0, #0
    21b0:	d1ba      	bne.n	2128 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    21b2:	f06f 0009 	mvn.w	r0, #9
    21b6:	e7a4      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    21b8:	2201      	movs	r2, #1
    21ba:	4b21      	ldr	r3, [pc, #132]	; (2240 <cdcdf_acm_ctrl+0x158>)
    21bc:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    21be:	2000      	movs	r0, #0
    21c0:	e79f      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    21c2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    21c4:	b142      	cbz	r2, 21d8 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    21c6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    21c8:	795b      	ldrb	r3, [r3, #5]
    21ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    21ce:	2b02      	cmp	r3, #2
    21d0:	d002      	beq.n	21d8 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    21d2:	f06f 0009 	mvn.w	r0, #9
    21d6:	e794      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    21d8:	7823      	ldrb	r3, [r4, #0]
    21da:	2bff      	cmp	r3, #255	; 0xff
    21dc:	d008      	beq.n	21f0 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    21de:	23ff      	movs	r3, #255	; 0xff
    21e0:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    21e2:	78a0      	ldrb	r0, [r4, #2]
    21e4:	4298      	cmp	r0, r3
    21e6:	d003      	beq.n	21f0 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    21e8:	4b16      	ldr	r3, [pc, #88]	; (2244 <cdcdf_acm_ctrl+0x15c>)
    21ea:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    21ec:	23ff      	movs	r3, #255	; 0xff
    21ee:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    21f0:	7863      	ldrb	r3, [r4, #1]
    21f2:	2bff      	cmp	r3, #255	; 0xff
    21f4:	d008      	beq.n	2208 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    21f6:	23ff      	movs	r3, #255	; 0xff
    21f8:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    21fa:	78e0      	ldrb	r0, [r4, #3]
    21fc:	4298      	cmp	r0, r3
    21fe:	d003      	beq.n	2208 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2200:	4b10      	ldr	r3, [pc, #64]	; (2244 <cdcdf_acm_ctrl+0x15c>)
    2202:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2204:	23ff      	movs	r3, #255	; 0xff
    2206:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2208:	7920      	ldrb	r0, [r4, #4]
    220a:	28ff      	cmp	r0, #255	; 0xff
    220c:	d003      	beq.n	2216 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    220e:	4b0d      	ldr	r3, [pc, #52]	; (2244 <cdcdf_acm_ctrl+0x15c>)
    2210:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2212:	23ff      	movs	r3, #255	; 0xff
    2214:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    2216:	2000      	movs	r0, #0
    2218:	4b09      	ldr	r3, [pc, #36]	; (2240 <cdcdf_acm_ctrl+0x158>)
    221a:	7158      	strb	r0, [r3, #5]
    221c:	e771      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    221e:	f06f 0009 	mvn.w	r0, #9
    2222:	e76e      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    2224:	f06f 0011 	mvn.w	r0, #17
    2228:	e76b      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    222a:	f06f 001b 	mvn.w	r0, #27
    222e:	e768      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    2230:	f06f 0013 	mvn.w	r0, #19
    2234:	e765      	b.n	2102 <cdcdf_acm_ctrl+0x1a>
    2236:	bf00      	nop
    2238:	000007fd 	.word	0x000007fd
    223c:	00002ef9 	.word	0x00002ef9
    2240:	200005f8 	.word	0x200005f8
    2244:	00000865 	.word	0x00000865
    2248:	00000891 	.word	0x00000891
    224c:	00002f33 	.word	0x00002f33

00002250 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2250:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2252:	4b0a      	ldr	r3, [pc, #40]	; (227c <cdcdf_acm_init+0x2c>)
    2254:	4798      	blx	r3
    2256:	2801      	cmp	r0, #1
    2258:	d80c      	bhi.n	2274 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    225a:	4809      	ldr	r0, [pc, #36]	; (2280 <cdcdf_acm_init+0x30>)
    225c:	4b09      	ldr	r3, [pc, #36]	; (2284 <cdcdf_acm_init+0x34>)
    225e:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2260:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2262:	3018      	adds	r0, #24
    2264:	4b08      	ldr	r3, [pc, #32]	; (2288 <cdcdf_acm_init+0x38>)
    2266:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    2268:	4908      	ldr	r1, [pc, #32]	; (228c <cdcdf_acm_init+0x3c>)
    226a:	2001      	movs	r0, #1
    226c:	4b08      	ldr	r3, [pc, #32]	; (2290 <cdcdf_acm_init+0x40>)
    226e:	4798      	blx	r3
	return ERR_NONE;
    2270:	2000      	movs	r0, #0
    2272:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    2274:	f06f 0010 	mvn.w	r0, #16
}
    2278:	bd08      	pop	{r3, pc}
    227a:	bf00      	nop
    227c:	00002ee5 	.word	0x00002ee5
    2280:	200005f8 	.word	0x200005f8
    2284:	000020e9 	.word	0x000020e9
    2288:	00002e85 	.word	0x00002e85
    228c:	20000000 	.word	0x20000000
    2290:	00002df1 	.word	0x00002df1

00002294 <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    2294:	4b07      	ldr	r3, [pc, #28]	; (22b4 <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    2296:	795b      	ldrb	r3, [r3, #5]
    2298:	b143      	cbz	r3, 22ac <cdcdf_acm_read+0x18>
{
    229a:	b510      	push	{r4, lr}
    229c:	460a      	mov	r2, r1
    229e:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    22a0:	2300      	movs	r3, #0
    22a2:	4804      	ldr	r0, [pc, #16]	; (22b4 <cdcdf_acm_read+0x20>)
    22a4:	7900      	ldrb	r0, [r0, #4]
    22a6:	4c04      	ldr	r4, [pc, #16]	; (22b8 <cdcdf_acm_read+0x24>)
    22a8:	47a0      	blx	r4
    22aa:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    22ac:	f06f 0010 	mvn.w	r0, #16
    22b0:	4770      	bx	lr
    22b2:	bf00      	nop
    22b4:	200005f8 	.word	0x200005f8
    22b8:	000029b5 	.word	0x000029b5

000022bc <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    22bc:	4b07      	ldr	r3, [pc, #28]	; (22dc <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    22be:	795b      	ldrb	r3, [r3, #5]
    22c0:	b143      	cbz	r3, 22d4 <cdcdf_acm_write+0x18>
{
    22c2:	b510      	push	{r4, lr}
    22c4:	460a      	mov	r2, r1
    22c6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    22c8:	2301      	movs	r3, #1
    22ca:	4804      	ldr	r0, [pc, #16]	; (22dc <cdcdf_acm_write+0x20>)
    22cc:	78c0      	ldrb	r0, [r0, #3]
    22ce:	4c04      	ldr	r4, [pc, #16]	; (22e0 <cdcdf_acm_write+0x24>)
    22d0:	47a0      	blx	r4
    22d2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    22d4:	f06f 0010 	mvn.w	r0, #16
    22d8:	4770      	bx	lr
    22da:	bf00      	nop
    22dc:	200005f8 	.word	0x200005f8
    22e0:	000029b5 	.word	0x000029b5

000022e4 <cdcdf_acm_register_callback>:
{
    22e4:	b508      	push	{r3, lr}
	switch (cb_type) {
    22e6:	2803      	cmp	r0, #3
    22e8:	d81b      	bhi.n	2322 <cdcdf_acm_register_callback+0x3e>
    22ea:	e8df f000 	tbb	[pc, r0]
    22ee:	0a02      	.short	0x0a02
    22f0:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    22f2:	460a      	mov	r2, r1
    22f4:	2102      	movs	r1, #2
    22f6:	4b0c      	ldr	r3, [pc, #48]	; (2328 <cdcdf_acm_register_callback+0x44>)
    22f8:	7918      	ldrb	r0, [r3, #4]
    22fa:	4b0c      	ldr	r3, [pc, #48]	; (232c <cdcdf_acm_register_callback+0x48>)
    22fc:	4798      	blx	r3
	return ERR_NONE;
    22fe:	2000      	movs	r0, #0
		break;
    2300:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    2302:	460a      	mov	r2, r1
    2304:	2102      	movs	r1, #2
    2306:	4b08      	ldr	r3, [pc, #32]	; (2328 <cdcdf_acm_register_callback+0x44>)
    2308:	78d8      	ldrb	r0, [r3, #3]
    230a:	4b08      	ldr	r3, [pc, #32]	; (232c <cdcdf_acm_register_callback+0x48>)
    230c:	4798      	blx	r3
	return ERR_NONE;
    230e:	2000      	movs	r0, #0
		break;
    2310:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    2312:	4b05      	ldr	r3, [pc, #20]	; (2328 <cdcdf_acm_register_callback+0x44>)
    2314:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    2316:	2000      	movs	r0, #0
		break;
    2318:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    231a:	4b03      	ldr	r3, [pc, #12]	; (2328 <cdcdf_acm_register_callback+0x44>)
    231c:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    231e:	2000      	movs	r0, #0
		break;
    2320:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    2322:	f06f 000c 	mvn.w	r0, #12
}
    2326:	bd08      	pop	{r3, pc}
    2328:	200005f8 	.word	0x200005f8
    232c:	00000a65 	.word	0x00000a65

00002330 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2330:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    2332:	780b      	ldrb	r3, [r1, #0]
    2334:	2b81      	cmp	r3, #129	; 0x81
    2336:	d010      	beq.n	235a <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    2338:	f3c3 1341 	ubfx	r3, r3, #5, #2
    233c:	2b01      	cmp	r3, #1
    233e:	d13f      	bne.n	23c0 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    2340:	888a      	ldrh	r2, [r1, #4]
    2342:	4b22      	ldr	r3, [pc, #136]	; (23cc <hid_keyboard_req+0x9c>)
    2344:	7b1b      	ldrb	r3, [r3, #12]
    2346:	429a      	cmp	r2, r3
    2348:	d13d      	bne.n	23c6 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    234a:	784b      	ldrb	r3, [r1, #1]
    234c:	2b03      	cmp	r3, #3
    234e:	d028      	beq.n	23a2 <hid_keyboard_req+0x72>
    2350:	2b0b      	cmp	r3, #11
    2352:	d02c      	beq.n	23ae <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    2354:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    2358:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    235a:	784b      	ldrb	r3, [r1, #1]
    235c:	2b06      	cmp	r3, #6
    235e:	d002      	beq.n	2366 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    2360:	f06f 0009 	mvn.w	r0, #9
    2364:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    2366:	888a      	ldrh	r2, [r1, #4]
    2368:	4b18      	ldr	r3, [pc, #96]	; (23cc <hid_keyboard_req+0x9c>)
    236a:	7b1b      	ldrb	r3, [r3, #12]
    236c:	429a      	cmp	r2, r3
    236e:	d002      	beq.n	2376 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    2370:	f06f 0009 	mvn.w	r0, #9
    2374:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    2376:	884b      	ldrh	r3, [r1, #2]
    2378:	0a1b      	lsrs	r3, r3, #8
    237a:	2b21      	cmp	r3, #33	; 0x21
    237c:	d004      	beq.n	2388 <hid_keyboard_req+0x58>
    237e:	2b22      	cmp	r3, #34	; 0x22
    2380:	d009      	beq.n	2396 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    2382:	f06f 000c 	mvn.w	r0, #12
    2386:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    2388:	4b10      	ldr	r3, [pc, #64]	; (23cc <hid_keyboard_req+0x9c>)
    238a:	6819      	ldr	r1, [r3, #0]
    238c:	2300      	movs	r3, #0
    238e:	780a      	ldrb	r2, [r1, #0]
    2390:	4c0f      	ldr	r4, [pc, #60]	; (23d0 <hid_keyboard_req+0xa0>)
    2392:	47a0      	blx	r4
    2394:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    2396:	2300      	movs	r3, #0
    2398:	223b      	movs	r2, #59	; 0x3b
    239a:	490e      	ldr	r1, [pc, #56]	; (23d4 <hid_keyboard_req+0xa4>)
    239c:	4c0c      	ldr	r4, [pc, #48]	; (23d0 <hid_keyboard_req+0xa0>)
    239e:	47a0      	blx	r4
    23a0:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    23a2:	2300      	movs	r3, #0
    23a4:	2201      	movs	r2, #1
    23a6:	490c      	ldr	r1, [pc, #48]	; (23d8 <hid_keyboard_req+0xa8>)
    23a8:	4c09      	ldr	r4, [pc, #36]	; (23d0 <hid_keyboard_req+0xa0>)
    23aa:	47a0      	blx	r4
    23ac:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    23ae:	884a      	ldrh	r2, [r1, #2]
    23b0:	4b06      	ldr	r3, [pc, #24]	; (23cc <hid_keyboard_req+0x9c>)
    23b2:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    23b4:	2300      	movs	r3, #0
    23b6:	461a      	mov	r2, r3
    23b8:	4619      	mov	r1, r3
    23ba:	4c05      	ldr	r4, [pc, #20]	; (23d0 <hid_keyboard_req+0xa0>)
    23bc:	47a0      	blx	r4
    23be:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    23c0:	f06f 0009 	mvn.w	r0, #9
    23c4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    23c6:	f06f 0009 	mvn.w	r0, #9
    23ca:	bd10      	pop	{r4, pc}
    23cc:	2000061c 	.word	0x2000061c
    23d0:	000029b5 	.word	0x000029b5
    23d4:	00003340 	.word	0x00003340
    23d8:	2000062b 	.word	0x2000062b

000023dc <hid_keyboard_ctrl>:
{
    23dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23e0:	4614      	mov	r4, r2
	switch (ctrl) {
    23e2:	2901      	cmp	r1, #1
    23e4:	d050      	beq.n	2488 <hid_keyboard_ctrl+0xac>
    23e6:	b141      	cbz	r1, 23fa <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    23e8:	2902      	cmp	r1, #2
    23ea:	bf0c      	ite	eq
    23ec:	f06f 051a 	mvneq.w	r5, #26
    23f0:	f06f 050c 	mvnne.w	r5, #12
}
    23f4:	4628      	mov	r0, r5
    23f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    23fa:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    23fe:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    2400:	2b00      	cmp	r3, #0
    2402:	d05e      	beq.n	24c2 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    2404:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    2406:	795b      	ldrb	r3, [r3, #5]
    2408:	2b03      	cmp	r3, #3
    240a:	d15d      	bne.n	24c8 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    240c:	f898 300c 	ldrb.w	r3, [r8, #12]
    2410:	429a      	cmp	r2, r3
    2412:	d05c      	beq.n	24ce <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    2414:	2bff      	cmp	r3, #255	; 0xff
    2416:	d15d      	bne.n	24d4 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    2418:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    241c:	6823      	ldr	r3, [r4, #0]
    241e:	7818      	ldrb	r0, [r3, #0]
    2420:	2221      	movs	r2, #33	; 0x21
    2422:	6861      	ldr	r1, [r4, #4]
    2424:	4418      	add	r0, r3
    2426:	4b31      	ldr	r3, [pc, #196]	; (24ec <hid_keyboard_ctrl+0x110>)
    2428:	4798      	blx	r3
    242a:	4b31      	ldr	r3, [pc, #196]	; (24f0 <hid_keyboard_ctrl+0x114>)
    242c:	6018      	str	r0, [r3, #0]
    242e:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2430:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 24f8 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2434:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 24fc <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    2438:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 2500 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    243c:	6823      	ldr	r3, [r4, #0]
    243e:	7818      	ldrb	r0, [r3, #0]
    2440:	6861      	ldr	r1, [r4, #4]
    2442:	4418      	add	r0, r3
    2444:	47c8      	blx	r9
		desc->sod = ep;
    2446:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    2448:	2800      	cmp	r0, #0
    244a:	d046      	beq.n	24da <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    244c:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    244e:	7943      	ldrb	r3, [r0, #5]
    2450:	7902      	ldrb	r2, [r0, #4]
    2452:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2456:	b292      	uxth	r2, r2
    2458:	78c1      	ldrb	r1, [r0, #3]
    245a:	4638      	mov	r0, r7
    245c:	47d0      	blx	sl
    245e:	4605      	mov	r5, r0
    2460:	2800      	cmp	r0, #0
    2462:	d13d      	bne.n	24e0 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2464:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    2468:	bf14      	ite	ne
    246a:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    246e:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    2472:	4638      	mov	r0, r7
    2474:	47d8      	blx	fp
    2476:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    2478:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    247c:	d1de      	bne.n	243c <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    247e:	4b1c      	ldr	r3, [pc, #112]	; (24f0 <hid_keyboard_ctrl+0x114>)
    2480:	2201      	movs	r2, #1
    2482:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    2484:	741a      	strb	r2, [r3, #16]
    2486:	e7b5      	b.n	23f4 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    2488:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    248a:	b11a      	cbz	r2, 2494 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    248c:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    248e:	795b      	ldrb	r3, [r3, #5]
    2490:	2b03      	cmp	r3, #3
    2492:	d128      	bne.n	24e6 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    2494:	7b2b      	ldrb	r3, [r5, #12]
    2496:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    2498:	bf1c      	itt	ne
    249a:	23ff      	movne	r3, #255	; 0xff
    249c:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    249e:	7b68      	ldrb	r0, [r5, #13]
    24a0:	28ff      	cmp	r0, #255	; 0xff
    24a2:	d003      	beq.n	24ac <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    24a4:	4b13      	ldr	r3, [pc, #76]	; (24f4 <hid_keyboard_ctrl+0x118>)
    24a6:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    24a8:	23ff      	movs	r3, #255	; 0xff
    24aa:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    24ac:	7ba8      	ldrb	r0, [r5, #14]
    24ae:	28ff      	cmp	r0, #255	; 0xff
    24b0:	d003      	beq.n	24ba <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    24b2:	4b10      	ldr	r3, [pc, #64]	; (24f4 <hid_keyboard_ctrl+0x118>)
    24b4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    24b6:	23ff      	movs	r3, #255	; 0xff
    24b8:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    24ba:	2500      	movs	r5, #0
    24bc:	4b0c      	ldr	r3, [pc, #48]	; (24f0 <hid_keyboard_ctrl+0x114>)
    24be:	741d      	strb	r5, [r3, #16]
    24c0:	e798      	b.n	23f4 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    24c2:	f06f 0509 	mvn.w	r5, #9
    24c6:	e795      	b.n	23f4 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    24c8:	f06f 0509 	mvn.w	r5, #9
    24cc:	e792      	b.n	23f4 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    24ce:	f06f 0511 	mvn.w	r5, #17
    24d2:	e78f      	b.n	23f4 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    24d4:	f06f 051b 	mvn.w	r5, #27
    24d8:	e78c      	b.n	23f4 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    24da:	f06f 0509 	mvn.w	r5, #9
    24de:	e789      	b.n	23f4 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    24e0:	f06f 0513 	mvn.w	r5, #19
    24e4:	e786      	b.n	23f4 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    24e6:	f06f 0509 	mvn.w	r5, #9
    24ea:	e783      	b.n	23f4 <hid_keyboard_ctrl+0x18>
    24ec:	00002ef9 	.word	0x00002ef9
    24f0:	2000061c 	.word	0x2000061c
    24f4:	00000865 	.word	0x00000865
    24f8:	00002f33 	.word	0x00002f33
    24fc:	000007fd 	.word	0x000007fd
    2500:	00000891 	.word	0x00000891

00002504 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    2504:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2506:	4b0a      	ldr	r3, [pc, #40]	; (2530 <hiddf_keyboard_init+0x2c>)
    2508:	4798      	blx	r3
    250a:	2801      	cmp	r0, #1
    250c:	d80c      	bhi.n	2528 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    250e:	4809      	ldr	r0, [pc, #36]	; (2534 <hiddf_keyboard_init+0x30>)
    2510:	4b09      	ldr	r3, [pc, #36]	; (2538 <hiddf_keyboard_init+0x34>)
    2512:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    2514:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    2516:	3014      	adds	r0, #20
    2518:	4b08      	ldr	r3, [pc, #32]	; (253c <hiddf_keyboard_init+0x38>)
    251a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    251c:	4908      	ldr	r1, [pc, #32]	; (2540 <hiddf_keyboard_init+0x3c>)
    251e:	2001      	movs	r0, #1
    2520:	4b08      	ldr	r3, [pc, #32]	; (2544 <hiddf_keyboard_init+0x40>)
    2522:	4798      	blx	r3
	return ERR_NONE;
    2524:	2000      	movs	r0, #0
    2526:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    2528:	f06f 0010 	mvn.w	r0, #16
}
    252c:	bd08      	pop	{r3, pc}
    252e:	bf00      	nop
    2530:	00002ee5 	.word	0x00002ee5
    2534:	2000061c 	.word	0x2000061c
    2538:	000023dd 	.word	0x000023dd
    253c:	00002e85 	.word	0x00002e85
    2540:	20000008 	.word	0x20000008
    2544:	00002df1 	.word	0x00002df1

00002548 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    2548:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    254a:	4b26      	ldr	r3, [pc, #152]	; (25e4 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    254c:	7c1b      	ldrb	r3, [r3, #16]
    254e:	2b00      	cmp	r3, #0
    2550:	d045      	beq.n	25de <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    2552:	4a24      	ldr	r2, [pc, #144]	; (25e4 <hiddf_keyboard_keys_state_change+0x9c>)
    2554:	2300      	movs	r3, #0
    2556:	6053      	str	r3, [r2, #4]
    2558:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    255a:	b329      	cbz	r1, 25a8 <hiddf_keyboard_keys_state_change+0x60>
    255c:	4603      	mov	r3, r0
    255e:	1e4d      	subs	r5, r1, #1
    2560:	b2ed      	uxtb	r5, r5
    2562:	3501      	adds	r5, #1
    2564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2568:	4405      	add	r5, r0
    256a:	2200      	movs	r2, #0
    256c:	e002      	b.n	2574 <hiddf_keyboard_keys_state_change+0x2c>
    256e:	3303      	adds	r3, #3
    2570:	42ab      	cmp	r3, r5
    2572:	d005      	beq.n	2580 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    2574:	785c      	ldrb	r4, [r3, #1]
    2576:	2c00      	cmp	r4, #0
    2578:	d0f9      	beq.n	256e <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    257a:	3201      	adds	r2, #1
    257c:	b2d2      	uxtb	r2, r2
    257e:	e7f6      	b.n	256e <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    2580:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    2582:	b2d2      	uxtb	r2, r2
    2584:	2a06      	cmp	r2, #6
    2586:	d809      	bhi.n	259c <hiddf_keyboard_keys_state_change+0x54>
    2588:	4603      	mov	r3, r0
    258a:	1e4a      	subs	r2, r1, #1
    258c:	b2d2      	uxtb	r2, r2
    258e:	3201      	adds	r2, #1
    2590:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2594:	4410      	add	r0, r2
    2596:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    2598:	4d12      	ldr	r5, [pc, #72]	; (25e4 <hiddf_keyboard_keys_state_change+0x9c>)
    259a:	e015      	b.n	25c8 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    259c:	4b11      	ldr	r3, [pc, #68]	; (25e4 <hiddf_keyboard_keys_state_change+0x9c>)
    259e:	f04f 32ff 	mov.w	r2, #4294967295
    25a2:	f8c3 2006 	str.w	r2, [r3, #6]
    25a6:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    25a8:	480e      	ldr	r0, [pc, #56]	; (25e4 <hiddf_keyboard_keys_state_change+0x9c>)
    25aa:	2300      	movs	r3, #0
    25ac:	2208      	movs	r2, #8
    25ae:	1d01      	adds	r1, r0, #4
    25b0:	7b40      	ldrb	r0, [r0, #13]
    25b2:	4c0d      	ldr	r4, [pc, #52]	; (25e8 <hiddf_keyboard_keys_state_change+0xa0>)
    25b4:	47a0      	blx	r4
    25b6:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    25b8:	1c62      	adds	r2, r4, #1
    25ba:	7819      	ldrb	r1, [r3, #0]
    25bc:	442c      	add	r4, r5
    25be:	7121      	strb	r1, [r4, #4]
    25c0:	b2d4      	uxtb	r4, r2
    25c2:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    25c4:	4283      	cmp	r3, r0
    25c6:	d0ef      	beq.n	25a8 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    25c8:	789a      	ldrb	r2, [r3, #2]
    25ca:	2a01      	cmp	r2, #1
    25cc:	d1f9      	bne.n	25c2 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    25ce:	785a      	ldrb	r2, [r3, #1]
    25d0:	2a00      	cmp	r2, #0
    25d2:	d0f1      	beq.n	25b8 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    25d4:	792a      	ldrb	r2, [r5, #4]
    25d6:	7819      	ldrb	r1, [r3, #0]
    25d8:	430a      	orrs	r2, r1
    25da:	712a      	strb	r2, [r5, #4]
    25dc:	e7f1      	b.n	25c2 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    25de:	f06f 0010 	mvn.w	r0, #16
}
    25e2:	bd38      	pop	{r3, r4, r5, pc}
    25e4:	2000061c 	.word	0x2000061c
    25e8:	000029b5 	.word	0x000029b5

000025ec <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    25ec:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    25ee:	780b      	ldrb	r3, [r1, #0]
    25f0:	2b81      	cmp	r3, #129	; 0x81
    25f2:	d010      	beq.n	2616 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    25f4:	f3c3 1341 	ubfx	r3, r3, #5, #2
    25f8:	2b01      	cmp	r3, #1
    25fa:	d13f      	bne.n	267c <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    25fc:	888a      	ldrh	r2, [r1, #4]
    25fe:	4b22      	ldr	r3, [pc, #136]	; (2688 <hid_mouse_req+0x9c>)
    2600:	7a1b      	ldrb	r3, [r3, #8]
    2602:	429a      	cmp	r2, r3
    2604:	d13d      	bne.n	2682 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    2606:	784b      	ldrb	r3, [r1, #1]
    2608:	2b03      	cmp	r3, #3
    260a:	d028      	beq.n	265e <hid_mouse_req+0x72>
    260c:	2b0b      	cmp	r3, #11
    260e:	d02c      	beq.n	266a <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    2610:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    2614:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    2616:	784b      	ldrb	r3, [r1, #1]
    2618:	2b06      	cmp	r3, #6
    261a:	d002      	beq.n	2622 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    261c:	f06f 0009 	mvn.w	r0, #9
    2620:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    2622:	888a      	ldrh	r2, [r1, #4]
    2624:	4b18      	ldr	r3, [pc, #96]	; (2688 <hid_mouse_req+0x9c>)
    2626:	7a1b      	ldrb	r3, [r3, #8]
    2628:	429a      	cmp	r2, r3
    262a:	d002      	beq.n	2632 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    262c:	f06f 0009 	mvn.w	r0, #9
    2630:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    2632:	884b      	ldrh	r3, [r1, #2]
    2634:	0a1b      	lsrs	r3, r3, #8
    2636:	2b21      	cmp	r3, #33	; 0x21
    2638:	d004      	beq.n	2644 <hid_mouse_req+0x58>
    263a:	2b22      	cmp	r3, #34	; 0x22
    263c:	d009      	beq.n	2652 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    263e:	f06f 000c 	mvn.w	r0, #12
    2642:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    2644:	4b10      	ldr	r3, [pc, #64]	; (2688 <hid_mouse_req+0x9c>)
    2646:	6819      	ldr	r1, [r3, #0]
    2648:	2300      	movs	r3, #0
    264a:	780a      	ldrb	r2, [r1, #0]
    264c:	4c0f      	ldr	r4, [pc, #60]	; (268c <hid_mouse_req+0xa0>)
    264e:	47a0      	blx	r4
    2650:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    2652:	2300      	movs	r3, #0
    2654:	2234      	movs	r2, #52	; 0x34
    2656:	490e      	ldr	r1, [pc, #56]	; (2690 <hid_mouse_req+0xa4>)
    2658:	4c0c      	ldr	r4, [pc, #48]	; (268c <hid_mouse_req+0xa0>)
    265a:	47a0      	blx	r4
    265c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    265e:	2300      	movs	r3, #0
    2660:	2201      	movs	r2, #1
    2662:	490c      	ldr	r1, [pc, #48]	; (2694 <hid_mouse_req+0xa8>)
    2664:	4c09      	ldr	r4, [pc, #36]	; (268c <hid_mouse_req+0xa0>)
    2666:	47a0      	blx	r4
    2668:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    266a:	884a      	ldrh	r2, [r1, #2]
    266c:	4b06      	ldr	r3, [pc, #24]	; (2688 <hid_mouse_req+0x9c>)
    266e:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    2670:	2300      	movs	r3, #0
    2672:	461a      	mov	r2, r3
    2674:	4619      	mov	r1, r3
    2676:	4c05      	ldr	r4, [pc, #20]	; (268c <hid_mouse_req+0xa0>)
    2678:	47a0      	blx	r4
    267a:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    267c:	f06f 0009 	mvn.w	r0, #9
    2680:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    2682:	f06f 0009 	mvn.w	r0, #9
    2686:	bd10      	pop	{r4, pc}
    2688:	2000063c 	.word	0x2000063c
    268c:	000029b5 	.word	0x000029b5
    2690:	0000337c 	.word	0x0000337c
    2694:	20000646 	.word	0x20000646

00002698 <hid_mouse_ctrl>:
{
    2698:	b570      	push	{r4, r5, r6, lr}
    269a:	4614      	mov	r4, r2
	switch (ctrl) {
    269c:	2901      	cmp	r1, #1
    269e:	d040      	beq.n	2722 <hid_mouse_ctrl+0x8a>
    26a0:	b139      	cbz	r1, 26b2 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    26a2:	2902      	cmp	r1, #2
    26a4:	bf0c      	ite	eq
    26a6:	f06f 041a 	mvneq.w	r4, #26
    26aa:	f06f 040c 	mvnne.w	r4, #12
}
    26ae:	4620      	mov	r0, r4
    26b0:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    26b2:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    26b4:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    26b6:	2b00      	cmp	r3, #0
    26b8:	d049      	beq.n	274e <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    26ba:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    26bc:	795b      	ldrb	r3, [r3, #5]
    26be:	2b03      	cmp	r3, #3
    26c0:	d148      	bne.n	2754 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    26c2:	7a2b      	ldrb	r3, [r5, #8]
    26c4:	429a      	cmp	r2, r3
    26c6:	d048      	beq.n	275a <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    26c8:	2bff      	cmp	r3, #255	; 0xff
    26ca:	d149      	bne.n	2760 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    26cc:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    26ce:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    26d0:	7818      	ldrb	r0, [r3, #0]
    26d2:	2221      	movs	r2, #33	; 0x21
    26d4:	6861      	ldr	r1, [r4, #4]
    26d6:	4418      	add	r0, r3
    26d8:	4b29      	ldr	r3, [pc, #164]	; (2780 <hid_mouse_ctrl+0xe8>)
    26da:	4798      	blx	r3
    26dc:	4b29      	ldr	r3, [pc, #164]	; (2784 <hid_mouse_ctrl+0xec>)
    26de:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    26e0:	6823      	ldr	r3, [r4, #0]
    26e2:	7818      	ldrb	r0, [r3, #0]
    26e4:	6861      	ldr	r1, [r4, #4]
    26e6:	4418      	add	r0, r3
    26e8:	4b27      	ldr	r3, [pc, #156]	; (2788 <hid_mouse_ctrl+0xf0>)
    26ea:	4798      	blx	r3
	desc->sod = ep;
    26ec:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    26ee:	2800      	cmp	r0, #0
    26f0:	d039      	beq.n	2766 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    26f2:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    26f4:	7943      	ldrb	r3, [r0, #5]
    26f6:	7902      	ldrb	r2, [r0, #4]
    26f8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    26fc:	b292      	uxth	r2, r2
    26fe:	78c1      	ldrb	r1, [r0, #3]
    2700:	4630      	mov	r0, r6
    2702:	4b22      	ldr	r3, [pc, #136]	; (278c <hid_mouse_ctrl+0xf4>)
    2704:	4798      	blx	r3
    2706:	4604      	mov	r4, r0
    2708:	bb80      	cbnz	r0, 276c <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    270a:	f016 0f80 	tst.w	r6, #128	; 0x80
    270e:	d030      	beq.n	2772 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    2710:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    2712:	4630      	mov	r0, r6
    2714:	4b1e      	ldr	r3, [pc, #120]	; (2790 <hid_mouse_ctrl+0xf8>)
    2716:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    2718:	4b1a      	ldr	r3, [pc, #104]	; (2784 <hid_mouse_ctrl+0xec>)
    271a:	2201      	movs	r2, #1
    271c:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    271e:	72da      	strb	r2, [r3, #11]
    2720:	e7c5      	b.n	26ae <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    2722:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    2724:	b11a      	cbz	r2, 272e <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    2726:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    2728:	795b      	ldrb	r3, [r3, #5]
    272a:	2b03      	cmp	r3, #3
    272c:	d124      	bne.n	2778 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    272e:	7a2b      	ldrb	r3, [r5, #8]
    2730:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    2732:	bf1c      	itt	ne
    2734:	23ff      	movne	r3, #255	; 0xff
    2736:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    2738:	7a68      	ldrb	r0, [r5, #9]
    273a:	28ff      	cmp	r0, #255	; 0xff
    273c:	d003      	beq.n	2746 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    273e:	4b15      	ldr	r3, [pc, #84]	; (2794 <hid_mouse_ctrl+0xfc>)
    2740:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    2742:	23ff      	movs	r3, #255	; 0xff
    2744:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    2746:	2400      	movs	r4, #0
    2748:	4b0e      	ldr	r3, [pc, #56]	; (2784 <hid_mouse_ctrl+0xec>)
    274a:	72dc      	strb	r4, [r3, #11]
    274c:	e7af      	b.n	26ae <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    274e:	f06f 0409 	mvn.w	r4, #9
    2752:	e7ac      	b.n	26ae <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    2754:	f06f 0409 	mvn.w	r4, #9
    2758:	e7a9      	b.n	26ae <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    275a:	f06f 0411 	mvn.w	r4, #17
    275e:	e7a6      	b.n	26ae <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    2760:	f06f 041b 	mvn.w	r4, #27
    2764:	e7a3      	b.n	26ae <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    2766:	f06f 0409 	mvn.w	r4, #9
    276a:	e7a0      	b.n	26ae <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    276c:	f06f 0413 	mvn.w	r4, #19
    2770:	e79d      	b.n	26ae <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    2772:	f04f 34ff 	mov.w	r4, #4294967295
    2776:	e79a      	b.n	26ae <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    2778:	f06f 0409 	mvn.w	r4, #9
    277c:	e797      	b.n	26ae <hid_mouse_ctrl+0x16>
    277e:	bf00      	nop
    2780:	00002ef9 	.word	0x00002ef9
    2784:	2000063c 	.word	0x2000063c
    2788:	00002f33 	.word	0x00002f33
    278c:	000007fd 	.word	0x000007fd
    2790:	00000891 	.word	0x00000891
    2794:	00000865 	.word	0x00000865

00002798 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    2798:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    279a:	4b0a      	ldr	r3, [pc, #40]	; (27c4 <hiddf_mouse_init+0x2c>)
    279c:	4798      	blx	r3
    279e:	2801      	cmp	r0, #1
    27a0:	d80c      	bhi.n	27bc <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    27a2:	4809      	ldr	r0, [pc, #36]	; (27c8 <hiddf_mouse_init+0x30>)
    27a4:	4b09      	ldr	r3, [pc, #36]	; (27cc <hiddf_mouse_init+0x34>)
    27a6:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    27a8:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    27aa:	300c      	adds	r0, #12
    27ac:	4b08      	ldr	r3, [pc, #32]	; (27d0 <hiddf_mouse_init+0x38>)
    27ae:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    27b0:	4908      	ldr	r1, [pc, #32]	; (27d4 <hiddf_mouse_init+0x3c>)
    27b2:	2001      	movs	r0, #1
    27b4:	4b08      	ldr	r3, [pc, #32]	; (27d8 <hiddf_mouse_init+0x40>)
    27b6:	4798      	blx	r3
	return ERR_NONE;
    27b8:	2000      	movs	r0, #0
    27ba:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    27bc:	f06f 0010 	mvn.w	r0, #16
}
    27c0:	bd08      	pop	{r3, pc}
    27c2:	bf00      	nop
    27c4:	00002ee5 	.word	0x00002ee5
    27c8:	2000063c 	.word	0x2000063c
    27cc:	00002699 	.word	0x00002699
    27d0:	00002e85 	.word	0x00002e85
    27d4:	20000010 	.word	0x20000010
    27d8:	00002df1 	.word	0x00002df1

000027dc <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    27dc:	2200      	movs	r2, #0
    27de:	4b0d      	ldr	r3, [pc, #52]	; (2814 <hiddf_mouse_move+0x38>)
    27e0:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    27e2:	2901      	cmp	r1, #1
    27e4:	d00e      	beq.n	2804 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    27e6:	2902      	cmp	r1, #2
    27e8:	d00e      	beq.n	2808 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    27ea:	2903      	cmp	r1, #3
    27ec:	d10f      	bne.n	280e <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    27ee:	4b09      	ldr	r3, [pc, #36]	; (2814 <hiddf_mouse_move+0x38>)
    27f0:	71d8      	strb	r0, [r3, #7]
{
    27f2:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    27f4:	4807      	ldr	r0, [pc, #28]	; (2814 <hiddf_mouse_move+0x38>)
    27f6:	2300      	movs	r3, #0
    27f8:	2204      	movs	r2, #4
    27fa:	1881      	adds	r1, r0, r2
    27fc:	7a40      	ldrb	r0, [r0, #9]
    27fe:	4c06      	ldr	r4, [pc, #24]	; (2818 <hiddf_mouse_move+0x3c>)
    2800:	47a0      	blx	r4
    2802:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    2804:	7158      	strb	r0, [r3, #5]
    2806:	e7f4      	b.n	27f2 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    2808:	4b02      	ldr	r3, [pc, #8]	; (2814 <hiddf_mouse_move+0x38>)
    280a:	7198      	strb	r0, [r3, #6]
    280c:	e7f1      	b.n	27f2 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    280e:	f06f 000c 	mvn.w	r0, #12
    2812:	4770      	bx	lr
    2814:	2000063c 	.word	0x2000063c
    2818:	000029b5 	.word	0x000029b5

0000281c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    281c:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    281e:	4b07      	ldr	r3, [pc, #28]	; (283c <usbdc_unconfig+0x20>)
    2820:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2822:	b14c      	cbz	r4, 2838 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2824:	2600      	movs	r6, #0
    2826:	2501      	movs	r5, #1
    2828:	6863      	ldr	r3, [r4, #4]
    282a:	4632      	mov	r2, r6
    282c:	4629      	mov	r1, r5
    282e:	4620      	mov	r0, r4
    2830:	4798      	blx	r3
		func = func->next;
    2832:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2834:	2c00      	cmp	r4, #0
    2836:	d1f7      	bne.n	2828 <usbdc_unconfig+0xc>
    2838:	bd70      	pop	{r4, r5, r6, pc}
    283a:	bf00      	nop
    283c:	20000654 	.word	0x20000654

00002840 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2840:	b570      	push	{r4, r5, r6, lr}
    2842:	4606      	mov	r6, r0
    2844:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2846:	4b07      	ldr	r3, [pc, #28]	; (2864 <usbdc_change_notify+0x24>)
    2848:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    284a:	b91c      	cbnz	r4, 2854 <usbdc_change_notify+0x14>
    284c:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    284e:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    2850:	2c00      	cmp	r4, #0
    2852:	d0fb      	beq.n	284c <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    2854:	6863      	ldr	r3, [r4, #4]
    2856:	2b00      	cmp	r3, #0
    2858:	d0f9      	beq.n	284e <usbdc_change_notify+0xe>
			cg->cb(change, value);
    285a:	4629      	mov	r1, r5
    285c:	4630      	mov	r0, r6
    285e:	4798      	blx	r3
    2860:	e7f5      	b.n	284e <usbdc_change_notify+0xe>
    2862:	bf00      	nop
    2864:	20000654 	.word	0x20000654

00002868 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    286a:	4607      	mov	r7, r0
    286c:	460e      	mov	r6, r1
    286e:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    2870:	4b0c      	ldr	r3, [pc, #48]	; (28a4 <usbdc_request_handler+0x3c>)
    2872:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2874:	b91c      	cbnz	r4, 287e <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2876:	2000      	movs	r0, #0
    2878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    287a:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    287c:	b16c      	cbz	r4, 289a <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    287e:	6863      	ldr	r3, [r4, #4]
    2880:	2b00      	cmp	r3, #0
    2882:	d0fa      	beq.n	287a <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    2884:	462a      	mov	r2, r5
    2886:	4631      	mov	r1, r6
    2888:	4638      	mov	r0, r7
    288a:	4798      	blx	r3
			if (0 == rc) {
    288c:	b138      	cbz	r0, 289e <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    288e:	f110 0f0a 	cmn.w	r0, #10
    2892:	d0f2      	beq.n	287a <usbdc_request_handler+0x12>
				return -1;
    2894:	f04f 30ff 	mov.w	r0, #4294967295
}
    2898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    289a:	2000      	movs	r0, #0
    289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    289e:	2001      	movs	r0, #1
    28a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28a2:	bf00      	nop
    28a4:	20000654 	.word	0x20000654

000028a8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    28a8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    28aa:	4b06      	ldr	r3, [pc, #24]	; (28c4 <usbd_sof_cb+0x1c>)
    28ac:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    28ae:	b91c      	cbnz	r4, 28b8 <usbd_sof_cb+0x10>
    28b0:	bd10      	pop	{r4, pc}
		sof = sof->next;
    28b2:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    28b4:	2c00      	cmp	r4, #0
    28b6:	d0fb      	beq.n	28b0 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    28b8:	6863      	ldr	r3, [r4, #4]
    28ba:	2b00      	cmp	r3, #0
    28bc:	d0f9      	beq.n	28b2 <usbd_sof_cb+0xa>
			sof->cb();
    28be:	4798      	blx	r3
    28c0:	e7f7      	b.n	28b2 <usbd_sof_cb+0xa>
    28c2:	bf00      	nop
    28c4:	20000654 	.word	0x20000654

000028c8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    28c8:	b510      	push	{r4, lr}
    28ca:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    28cc:	b119      	cbz	r1, 28d6 <usbdc_cb_ctl_done+0xe>
    28ce:	2901      	cmp	r1, #1
    28d0:	d026      	beq.n	2920 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    28d2:	2000      	movs	r0, #0
    28d4:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    28d6:	7813      	ldrb	r3, [r2, #0]
    28d8:	2b00      	cmp	r3, #0
    28da:	d1fa      	bne.n	28d2 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    28dc:	7853      	ldrb	r3, [r2, #1]
    28de:	2b05      	cmp	r3, #5
    28e0:	d00f      	beq.n	2902 <usbdc_cb_ctl_done+0x3a>
    28e2:	2b09      	cmp	r3, #9
    28e4:	d1f5      	bne.n	28d2 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    28e6:	8852      	ldrh	r2, [r2, #2]
    28e8:	4b10      	ldr	r3, [pc, #64]	; (292c <usbdc_cb_ctl_done+0x64>)
    28ea:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    28ec:	8863      	ldrh	r3, [r4, #2]
    28ee:	2b00      	cmp	r3, #0
    28f0:	bf14      	ite	ne
    28f2:	2104      	movne	r1, #4
    28f4:	2103      	moveq	r1, #3
    28f6:	4b0d      	ldr	r3, [pc, #52]	; (292c <usbdc_cb_ctl_done+0x64>)
    28f8:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    28fa:	2001      	movs	r0, #1
    28fc:	4b0c      	ldr	r3, [pc, #48]	; (2930 <usbdc_cb_ctl_done+0x68>)
    28fe:	4798      	blx	r3
    2900:	e7e7      	b.n	28d2 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    2902:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    2904:	b2c0      	uxtb	r0, r0
    2906:	4b0b      	ldr	r3, [pc, #44]	; (2934 <usbdc_cb_ctl_done+0x6c>)
    2908:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    290a:	8863      	ldrh	r3, [r4, #2]
    290c:	2b00      	cmp	r3, #0
    290e:	bf14      	ite	ne
    2910:	2103      	movne	r1, #3
    2912:	2102      	moveq	r1, #2
    2914:	4b05      	ldr	r3, [pc, #20]	; (292c <usbdc_cb_ctl_done+0x64>)
    2916:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2918:	2001      	movs	r0, #1
    291a:	4b05      	ldr	r3, [pc, #20]	; (2930 <usbdc_cb_ctl_done+0x68>)
    291c:	4798      	blx	r3
    291e:	e7d8      	b.n	28d2 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2920:	2201      	movs	r2, #1
    2922:	4621      	mov	r1, r4
    2924:	2000      	movs	r0, #0
    2926:	4b04      	ldr	r3, [pc, #16]	; (2938 <usbdc_cb_ctl_done+0x70>)
    2928:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    292a:	e7d2      	b.n	28d2 <usbdc_cb_ctl_done+0xa>
    292c:	20000654 	.word	0x20000654
    2930:	00002841 	.word	0x00002841
    2934:	000007f1 	.word	0x000007f1
    2938:	00002869 	.word	0x00002869

0000293c <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    293c:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    293e:	4b0d      	ldr	r3, [pc, #52]	; (2974 <usbdc_reset+0x38>)
    2940:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2942:	4d0d      	ldr	r5, [pc, #52]	; (2978 <usbdc_reset+0x3c>)
    2944:	2602      	movs	r6, #2
    2946:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    2948:	2400      	movs	r4, #0
    294a:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    294c:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    294e:	4620      	mov	r0, r4
    2950:	4b0a      	ldr	r3, [pc, #40]	; (297c <usbdc_reset+0x40>)
    2952:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2954:	7f28      	ldrb	r0, [r5, #28]
    2956:	4b0a      	ldr	r3, [pc, #40]	; (2980 <usbdc_reset+0x44>)
    2958:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    295a:	4a0a      	ldr	r2, [pc, #40]	; (2984 <usbdc_reset+0x48>)
    295c:	4621      	mov	r1, r4
    295e:	4620      	mov	r0, r4
    2960:	4d09      	ldr	r5, [pc, #36]	; (2988 <usbdc_reset+0x4c>)
    2962:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    2964:	4a09      	ldr	r2, [pc, #36]	; (298c <usbdc_reset+0x50>)
    2966:	4631      	mov	r1, r6
    2968:	4620      	mov	r0, r4
    296a:	47a8      	blx	r5
	usb_d_ep_enable(0);
    296c:	4620      	mov	r0, r4
    296e:	4b08      	ldr	r3, [pc, #32]	; (2990 <usbdc_reset+0x54>)
    2970:	4798      	blx	r3
    2972:	bd70      	pop	{r4, r5, r6, pc}
    2974:	0000281d 	.word	0x0000281d
    2978:	20000654 	.word	0x20000654
    297c:	00000865 	.word	0x00000865
    2980:	00000851 	.word	0x00000851
    2984:	000029d5 	.word	0x000029d5
    2988:	00000a65 	.word	0x00000a65
    298c:	000028c9 	.word	0x000028c9
    2990:	00000891 	.word	0x00000891

00002994 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    2994:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    2996:	b110      	cbz	r0, 299e <usbd_event_cb+0xa>
    2998:	2801      	cmp	r0, #1
    299a:	d004      	beq.n	29a6 <usbd_event_cb+0x12>
    299c:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    299e:	2000      	movs	r0, #0
    29a0:	4b02      	ldr	r3, [pc, #8]	; (29ac <usbd_event_cb+0x18>)
    29a2:	4798      	blx	r3
		break;
    29a4:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    29a6:	4b02      	ldr	r3, [pc, #8]	; (29b0 <usbd_event_cb+0x1c>)
    29a8:	4798      	blx	r3
    29aa:	bd08      	pop	{r3, pc}
    29ac:	00002841 	.word	0x00002841
    29b0:	0000293d 	.word	0x0000293d

000029b4 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    29b4:	b500      	push	{lr}
    29b6:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    29b8:	9101      	str	r1, [sp, #4]
    29ba:	9202      	str	r2, [sp, #8]
    29bc:	f88d 000c 	strb.w	r0, [sp, #12]
    29c0:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    29c4:	a801      	add	r0, sp, #4
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <usbdc_xfer+0x1c>)
    29c8:	4798      	blx	r3
}
    29ca:	b005      	add	sp, #20
    29cc:	f85d fb04 	ldr.w	pc, [sp], #4
    29d0:	000008dd 	.word	0x000008dd

000029d4 <usbdc_cb_ctl_req>:
{
    29d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    29d8:	b083      	sub	sp, #12
    29da:	4605      	mov	r5, r0
    29dc:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    29de:	2200      	movs	r2, #0
    29e0:	4b9b      	ldr	r3, [pc, #620]	; (2c50 <usbdc_cb_ctl_req+0x27c>)
    29e2:	4798      	blx	r3
    29e4:	f1b0 3fff 	cmp.w	r0, #4294967295
    29e8:	d00b      	beq.n	2a02 <usbdc_cb_ctl_req+0x2e>
    29ea:	2801      	cmp	r0, #1
    29ec:	f000 81e3 	beq.w	2db6 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    29f0:	7823      	ldrb	r3, [r4, #0]
    29f2:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    29f6:	d008      	beq.n	2a0a <usbdc_cb_ctl_req+0x36>
    29f8:	2a80      	cmp	r2, #128	; 0x80
    29fa:	f000 80f4 	beq.w	2be6 <usbdc_cb_ctl_req+0x212>
		return false;
    29fe:	2000      	movs	r0, #0
    2a00:	e000      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2a02:	2000      	movs	r0, #0
}
    2a04:	b003      	add	sp, #12
    2a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    2a0a:	7862      	ldrb	r2, [r4, #1]
    2a0c:	3a01      	subs	r2, #1
    2a0e:	2a0a      	cmp	r2, #10
    2a10:	f200 81d3 	bhi.w	2dba <usbdc_cb_ctl_req+0x3e6>
    2a14:	e8df f012 	tbh	[pc, r2, lsl #1]
    2a18:	01d10060 	.word	0x01d10060
    2a1c:	01d10076 	.word	0x01d10076
    2a20:	01d1000b 	.word	0x01d1000b
    2a24:	01d101d1 	.word	0x01d101d1
    2a28:	01d10015 	.word	0x01d10015
    2a2c:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2a2e:	2301      	movs	r3, #1
    2a30:	2200      	movs	r2, #0
    2a32:	4611      	mov	r1, r2
    2a34:	4628      	mov	r0, r5
    2a36:	4c87      	ldr	r4, [pc, #540]	; (2c54 <usbdc_cb_ctl_req+0x280>)
    2a38:	47a0      	blx	r4
    2a3a:	fab0 f080 	clz	r0, r0
    2a3e:	0940      	lsrs	r0, r0, #5
    2a40:	e7e0      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    2a42:	8862      	ldrh	r2, [r4, #2]
    2a44:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    2a46:	b1ca      	cbz	r2, 2a7c <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2a48:	4b83      	ldr	r3, [pc, #524]	; (2c58 <usbdc_cb_ctl_req+0x284>)
    2a4a:	681b      	ldr	r3, [r3, #0]
    2a4c:	6859      	ldr	r1, [r3, #4]
    2a4e:	6818      	ldr	r0, [r3, #0]
    2a50:	4b82      	ldr	r3, [pc, #520]	; (2c5c <usbdc_cb_ctl_req+0x288>)
    2a52:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2a54:	2800      	cmp	r0, #0
    2a56:	f000 81be 	beq.w	2dd6 <usbdc_cb_ctl_req+0x402>
    2a5a:	78c2      	ldrb	r2, [r0, #3]
    2a5c:	7881      	ldrb	r1, [r0, #2]
    2a5e:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    2a62:	fa10 f181 	uxtah	r1, r0, r1
    2a66:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2a68:	2204      	movs	r2, #4
    2a6a:	4b7d      	ldr	r3, [pc, #500]	; (2c60 <usbdc_cb_ctl_req+0x28c>)
    2a6c:	4798      	blx	r3
    2a6e:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2a70:	b130      	cbz	r0, 2a80 <usbdc_cb_ctl_req+0xac>
    2a72:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2a74:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 2c58 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2a78:	4f79      	ldr	r7, [pc, #484]	; (2c60 <usbdc_cb_ctl_req+0x28c>)
    2a7a:	e018      	b.n	2aae <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    2a7c:	4b79      	ldr	r3, [pc, #484]	; (2c64 <usbdc_cb_ctl_req+0x290>)
    2a7e:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2a80:	2301      	movs	r3, #1
    2a82:	2200      	movs	r2, #0
    2a84:	4611      	mov	r1, r2
    2a86:	4628      	mov	r0, r5
    2a88:	4c72      	ldr	r4, [pc, #456]	; (2c54 <usbdc_cb_ctl_req+0x280>)
    2a8a:	47a0      	blx	r4
    2a8c:	fab0 f080 	clz	r0, r0
    2a90:	0940      	lsrs	r0, r0, #5
    2a92:	e7b7      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    2a94:	464c      	mov	r4, r9
    2a96:	e000      	b.n	2a9a <usbdc_cb_ctl_req+0xc6>
    2a98:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    2a9a:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2a9c:	7803      	ldrb	r3, [r0, #0]
    2a9e:	4418      	add	r0, r3
    2aa0:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2aa2:	2204      	movs	r2, #4
    2aa4:	9901      	ldr	r1, [sp, #4]
    2aa6:	47b8      	blx	r7
    2aa8:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2aaa:	2800      	cmp	r0, #0
    2aac:	d0e8      	beq.n	2a80 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2aae:	f890 9002 	ldrb.w	r9, [r0, #2]
    2ab2:	45a1      	cmp	r9, r4
    2ab4:	d0f1      	beq.n	2a9a <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2ab6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    2aba:	2c00      	cmp	r4, #0
    2abc:	d0ea      	beq.n	2a94 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2abe:	2600      	movs	r6, #0
    2ac0:	6863      	ldr	r3, [r4, #4]
    2ac2:	466a      	mov	r2, sp
    2ac4:	4631      	mov	r1, r6
    2ac6:	4620      	mov	r0, r4
    2ac8:	4798      	blx	r3
    2aca:	2800      	cmp	r0, #0
    2acc:	d0e4      	beq.n	2a98 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    2ace:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2ad0:	2c00      	cmp	r4, #0
    2ad2:	d1f5      	bne.n	2ac0 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    2ad4:	464c      	mov	r4, r9
    2ad6:	e7e0      	b.n	2a9a <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2ad8:	f003 031f 	and.w	r3, r3, #31
    2adc:	2b02      	cmp	r3, #2
    2ade:	f040 816e 	bne.w	2dbe <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    2ae2:	88e3      	ldrh	r3, [r4, #6]
    2ae4:	b10b      	cbz	r3, 2aea <usbdc_cb_ctl_req+0x116>
			return false;
    2ae6:	2000      	movs	r0, #0
    2ae8:	e78c      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2aea:	88a0      	ldrh	r0, [r4, #4]
    2aec:	2100      	movs	r1, #0
    2aee:	b2c0      	uxtb	r0, r0
    2af0:	4b5d      	ldr	r3, [pc, #372]	; (2c68 <usbdc_cb_ctl_req+0x294>)
    2af2:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2af4:	2301      	movs	r3, #1
    2af6:	2200      	movs	r2, #0
    2af8:	4611      	mov	r1, r2
    2afa:	4628      	mov	r0, r5
    2afc:	4c55      	ldr	r4, [pc, #340]	; (2c54 <usbdc_cb_ctl_req+0x280>)
    2afe:	47a0      	blx	r4
		return true;
    2b00:	2001      	movs	r0, #1
    2b02:	e77f      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2b04:	f003 031f 	and.w	r3, r3, #31
    2b08:	2b02      	cmp	r3, #2
    2b0a:	f040 815a 	bne.w	2dc2 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    2b0e:	88e3      	ldrh	r3, [r4, #6]
    2b10:	b10b      	cbz	r3, 2b16 <usbdc_cb_ctl_req+0x142>
			return false;
    2b12:	2000      	movs	r0, #0
    2b14:	e776      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2b16:	88a0      	ldrh	r0, [r4, #4]
    2b18:	2101      	movs	r1, #1
    2b1a:	b2c0      	uxtb	r0, r0
    2b1c:	4b52      	ldr	r3, [pc, #328]	; (2c68 <usbdc_cb_ctl_req+0x294>)
    2b1e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2b20:	2301      	movs	r3, #1
    2b22:	2200      	movs	r2, #0
    2b24:	4611      	mov	r1, r2
    2b26:	4628      	mov	r0, r5
    2b28:	4c4a      	ldr	r4, [pc, #296]	; (2c54 <usbdc_cb_ctl_req+0x280>)
    2b2a:	47a0      	blx	r4
		return true;
    2b2c:	2001      	movs	r0, #1
    2b2e:	e769      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2b30:	8866      	ldrh	r6, [r4, #2]
    2b32:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2b34:	4a48      	ldr	r2, [pc, #288]	; (2c58 <usbdc_cb_ctl_req+0x284>)
    2b36:	6813      	ldr	r3, [r2, #0]
    2b38:	7ed2      	ldrb	r2, [r2, #27]
    2b3a:	6859      	ldr	r1, [r3, #4]
    2b3c:	6818      	ldr	r0, [r3, #0]
    2b3e:	4b47      	ldr	r3, [pc, #284]	; (2c5c <usbdc_cb_ctl_req+0x288>)
    2b40:	4798      	blx	r3
	if (NULL == ifc) {
    2b42:	2800      	cmp	r0, #0
    2b44:	d045      	beq.n	2bd2 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    2b46:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    2b48:	78c2      	ldrb	r2, [r0, #3]
    2b4a:	7881      	ldrb	r1, [r0, #2]
    2b4c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2b50:	fa10 f181 	uxtah	r1, r0, r1
    2b54:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    2b56:	2204      	movs	r2, #4
    2b58:	4b41      	ldr	r3, [pc, #260]	; (2c60 <usbdc_cb_ctl_req+0x28c>)
    2b5a:	4798      	blx	r3
    2b5c:	4603      	mov	r3, r0
    2b5e:	2800      	cmp	r0, #0
    2b60:	d039      	beq.n	2bd6 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2b62:	2704      	movs	r7, #4
    2b64:	4d3e      	ldr	r5, [pc, #248]	; (2c60 <usbdc_cb_ctl_req+0x28c>)
    2b66:	e008      	b.n	2b7a <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    2b68:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    2b6a:	7803      	ldrb	r3, [r0, #0]
    2b6c:	4418      	add	r0, r3
    2b6e:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2b70:	463a      	mov	r2, r7
    2b72:	9901      	ldr	r1, [sp, #4]
    2b74:	47a8      	blx	r5
		if (NULL == ifc) {
    2b76:	4603      	mov	r3, r0
    2b78:	b378      	cbz	r0, 2bda <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    2b7a:	789a      	ldrb	r2, [r3, #2]
    2b7c:	42a2      	cmp	r2, r4
    2b7e:	d1f3      	bne.n	2b68 <usbdc_cb_ctl_req+0x194>
    2b80:	78da      	ldrb	r2, [r3, #3]
    2b82:	42b2      	cmp	r2, r6
    2b84:	d1f0      	bne.n	2b68 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    2b86:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    2b88:	4b33      	ldr	r3, [pc, #204]	; (2c58 <usbdc_cb_ctl_req+0x284>)
    2b8a:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    2b8c:	b33d      	cbz	r5, 2bde <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    2b8e:	2701      	movs	r7, #1
    2b90:	686b      	ldr	r3, [r5, #4]
    2b92:	466a      	mov	r2, sp
    2b94:	4639      	mov	r1, r7
    2b96:	4628      	mov	r0, r5
    2b98:	4798      	blx	r3
    2b9a:	b120      	cbz	r0, 2ba6 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    2b9c:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2b9e:	2d00      	cmp	r5, #0
    2ba0:	d1f6      	bne.n	2b90 <usbdc_cb_ctl_req+0x1bc>
	return false;
    2ba2:	2000      	movs	r0, #0
    2ba4:	e72e      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2ba6:	686b      	ldr	r3, [r5, #4]
    2ba8:	466a      	mov	r2, sp
    2baa:	2100      	movs	r1, #0
    2bac:	4628      	mov	r0, r5
    2bae:	4798      	blx	r3
    2bb0:	b9b8      	cbnz	r0, 2be2 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    2bb2:	b136      	cbz	r6, 2bc2 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    2bb4:	4a28      	ldr	r2, [pc, #160]	; (2c58 <usbdc_cb_ctl_req+0x284>)
    2bb6:	2301      	movs	r3, #1
    2bb8:	fa03 f404 	lsl.w	r4, r3, r4
    2bbc:	7f53      	ldrb	r3, [r2, #29]
    2bbe:	4323      	orrs	r3, r4
    2bc0:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2bc2:	2300      	movs	r3, #0
    2bc4:	461a      	mov	r2, r3
    2bc6:	4619      	mov	r1, r3
    2bc8:	4618      	mov	r0, r3
    2bca:	4c22      	ldr	r4, [pc, #136]	; (2c54 <usbdc_cb_ctl_req+0x280>)
    2bcc:	47a0      	blx	r4
			return true;
    2bce:	2001      	movs	r0, #1
    2bd0:	e718      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2bd2:	2000      	movs	r0, #0
    2bd4:	e716      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2bd6:	2000      	movs	r0, #0
    2bd8:	e714      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
			return false;
    2bda:	2000      	movs	r0, #0
    2bdc:	e712      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
	return false;
    2bde:	2000      	movs	r0, #0
    2be0:	e710      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
			return false;
    2be2:	2000      	movs	r0, #0
    2be4:	e70e      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    2be6:	7862      	ldrb	r2, [r4, #1]
    2be8:	2a0a      	cmp	r2, #10
    2bea:	f200 80ec 	bhi.w	2dc6 <usbdc_cb_ctl_req+0x3f2>
    2bee:	e8df f012 	tbh	[pc, r2, lsl #1]
    2bf2:	008e      	.short	0x008e
    2bf4:	00ea00ea 	.word	0x00ea00ea
    2bf8:	00ea00ea 	.word	0x00ea00ea
    2bfc:	000b00ea 	.word	0x000b00ea
    2c00:	008200ea 	.word	0x008200ea
    2c04:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2c08:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    2c0a:	0a13      	lsrs	r3, r2, #8
    2c0c:	2b02      	cmp	r3, #2
    2c0e:	d02d      	beq.n	2c6c <usbdc_cb_ctl_req+0x298>
    2c10:	2b03      	cmp	r3, #3
    2c12:	d050      	beq.n	2cb6 <usbdc_cb_ctl_req+0x2e2>
    2c14:	2b01      	cmp	r3, #1
    2c16:	d001      	beq.n	2c1c <usbdc_cb_ctl_req+0x248>
	return false;
    2c18:	2000      	movs	r0, #0
    2c1a:	e6f3      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    2c1c:	88e2      	ldrh	r2, [r4, #6]
    2c1e:	2a12      	cmp	r2, #18
    2c20:	bf28      	it	cs
    2c22:	2212      	movcs	r2, #18
    2c24:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2c26:	4b0c      	ldr	r3, [pc, #48]	; (2c58 <usbdc_cb_ctl_req+0x284>)
    2c28:	681b      	ldr	r3, [r3, #0]
    2c2a:	2201      	movs	r2, #1
    2c2c:	6859      	ldr	r1, [r3, #4]
    2c2e:	6818      	ldr	r0, [r3, #0]
    2c30:	4b0b      	ldr	r3, [pc, #44]	; (2c60 <usbdc_cb_ctl_req+0x28c>)
    2c32:	4798      	blx	r3
	if (!dev_desc) {
    2c34:	4601      	mov	r1, r0
    2c36:	2800      	cmp	r0, #0
    2c38:	f000 80c7 	beq.w	2dca <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2c3c:	2300      	movs	r3, #0
    2c3e:	4622      	mov	r2, r4
    2c40:	4628      	mov	r0, r5
    2c42:	4c04      	ldr	r4, [pc, #16]	; (2c54 <usbdc_cb_ctl_req+0x280>)
    2c44:	47a0      	blx	r4
    2c46:	fab0 f080 	clz	r0, r0
    2c4a:	0940      	lsrs	r0, r0, #5
    2c4c:	e6da      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
    2c4e:	bf00      	nop
    2c50:	00002869 	.word	0x00002869
    2c54:	000029b5 	.word	0x000029b5
    2c58:	20000654 	.word	0x20000654
    2c5c:	00002f79 	.word	0x00002f79
    2c60:	00002ef9 	.word	0x00002ef9
    2c64:	0000281d 	.word	0x0000281d
    2c68:	000009fd 	.word	0x000009fd
	uint16_t length   = req->wLength;
    2c6c:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2c6e:	4b5b      	ldr	r3, [pc, #364]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2c70:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2c72:	681b      	ldr	r3, [r3, #0]
    2c74:	3201      	adds	r2, #1
    2c76:	b2d2      	uxtb	r2, r2
    2c78:	6859      	ldr	r1, [r3, #4]
    2c7a:	6818      	ldr	r0, [r3, #0]
    2c7c:	4b58      	ldr	r3, [pc, #352]	; (2de0 <usbdc_cb_ctl_req+0x40c>)
    2c7e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2c80:	4601      	mov	r1, r0
    2c82:	2800      	cmp	r0, #0
    2c84:	f000 80a3 	beq.w	2dce <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    2c88:	78c3      	ldrb	r3, [r0, #3]
    2c8a:	7882      	ldrb	r2, [r0, #2]
    2c8c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    2c90:	b292      	uxth	r2, r2
	if (length <= total_len) {
    2c92:	4294      	cmp	r4, r2
    2c94:	d90d      	bls.n	2cb2 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2c96:	3e01      	subs	r6, #1
    2c98:	4226      	tst	r6, r4
    2c9a:	bf0c      	ite	eq
    2c9c:	2301      	moveq	r3, #1
    2c9e:	2300      	movne	r3, #0
		length = total_len;
    2ca0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    2ca2:	4622      	mov	r2, r4
    2ca4:	4628      	mov	r0, r5
    2ca6:	4c4f      	ldr	r4, [pc, #316]	; (2de4 <usbdc_cb_ctl_req+0x410>)
    2ca8:	47a0      	blx	r4
    2caa:	fab0 f080 	clz	r0, r0
    2cae:	0940      	lsrs	r0, r0, #5
    2cb0:	e6a8      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2cb2:	2300      	movs	r3, #0
    2cb4:	e7f5      	b.n	2ca2 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    2cb6:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2cb8:	4b48      	ldr	r3, [pc, #288]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2cba:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2cbc:	681b      	ldr	r3, [r3, #0]
    2cbe:	b2d2      	uxtb	r2, r2
    2cc0:	6859      	ldr	r1, [r3, #4]
    2cc2:	6818      	ldr	r0, [r3, #0]
    2cc4:	4b48      	ldr	r3, [pc, #288]	; (2de8 <usbdc_cb_ctl_req+0x414>)
    2cc6:	4798      	blx	r3
	if (NULL == str_desc) {
    2cc8:	4601      	mov	r1, r0
    2cca:	2800      	cmp	r0, #0
    2ccc:	f000 8081 	beq.w	2dd2 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    2cd0:	7802      	ldrb	r2, [r0, #0]
    2cd2:	4294      	cmp	r4, r2
    2cd4:	d90d      	bls.n	2cf2 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2cd6:	3e01      	subs	r6, #1
    2cd8:	4226      	tst	r6, r4
    2cda:	bf0c      	ite	eq
    2cdc:	2301      	moveq	r3, #1
    2cde:	2300      	movne	r3, #0
		length = str_desc[0];
    2ce0:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2ce2:	4622      	mov	r2, r4
    2ce4:	4628      	mov	r0, r5
    2ce6:	4c3f      	ldr	r4, [pc, #252]	; (2de4 <usbdc_cb_ctl_req+0x410>)
    2ce8:	47a0      	blx	r4
    2cea:	fab0 f080 	clz	r0, r0
    2cee:	0940      	lsrs	r0, r0, #5
    2cf0:	e688      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    2cf2:	2300      	movs	r3, #0
    2cf4:	e7f5      	b.n	2ce2 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2cf6:	4939      	ldr	r1, [pc, #228]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2cf8:	694b      	ldr	r3, [r1, #20]
    2cfa:	7eca      	ldrb	r2, [r1, #27]
    2cfc:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2cfe:	2300      	movs	r3, #0
    2d00:	2201      	movs	r2, #1
    2d02:	6949      	ldr	r1, [r1, #20]
    2d04:	4628      	mov	r0, r5
    2d06:	4c37      	ldr	r4, [pc, #220]	; (2de4 <usbdc_cb_ctl_req+0x410>)
    2d08:	47a0      	blx	r4
		return true;
    2d0a:	2001      	movs	r0, #1
    2d0c:	e67a      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2d0e:	f003 031f 	and.w	r3, r3, #31
    2d12:	2b01      	cmp	r3, #1
    2d14:	d903      	bls.n	2d1e <usbdc_cb_ctl_req+0x34a>
    2d16:	2b02      	cmp	r3, #2
    2d18:	d010      	beq.n	2d3c <usbdc_cb_ctl_req+0x368>
		return false;
    2d1a:	2000      	movs	r0, #0
    2d1c:	e672      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		st = 0;
    2d1e:	2300      	movs	r3, #0
    2d20:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2d22:	492e      	ldr	r1, [pc, #184]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2d24:	694b      	ldr	r3, [r1, #20]
    2d26:	f8bd 2000 	ldrh.w	r2, [sp]
    2d2a:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2d2c:	2300      	movs	r3, #0
    2d2e:	2202      	movs	r2, #2
    2d30:	6949      	ldr	r1, [r1, #20]
    2d32:	4628      	mov	r0, r5
    2d34:	4c2b      	ldr	r4, [pc, #172]	; (2de4 <usbdc_cb_ctl_req+0x410>)
    2d36:	47a0      	blx	r4
	return true;
    2d38:	2001      	movs	r0, #1
    2d3a:	e663      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2d3c:	88a0      	ldrh	r0, [r4, #4]
    2d3e:	2102      	movs	r1, #2
    2d40:	b2c0      	uxtb	r0, r0
    2d42:	4b2a      	ldr	r3, [pc, #168]	; (2dec <usbdc_cb_ctl_req+0x418>)
    2d44:	4798      	blx	r3
		if (st < 0) {
    2d46:	2800      	cmp	r0, #0
    2d48:	db03      	blt.n	2d52 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    2d4a:	f000 0001 	and.w	r0, r0, #1
    2d4e:	9000      	str	r0, [sp, #0]
    2d50:	e7e7      	b.n	2d22 <usbdc_cb_ctl_req+0x34e>
			return false;
    2d52:	2000      	movs	r0, #0
    2d54:	e656      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2d56:	4b21      	ldr	r3, [pc, #132]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2d58:	7f5b      	ldrb	r3, [r3, #29]
    2d5a:	88a2      	ldrh	r2, [r4, #4]
    2d5c:	4113      	asrs	r3, r2
    2d5e:	f013 0f01 	tst.w	r3, #1
    2d62:	d012      	beq.n	2d8a <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2d64:	4b1d      	ldr	r3, [pc, #116]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2d66:	691d      	ldr	r5, [r3, #16]
	return false;
    2d68:	2000      	movs	r0, #0
	while (NULL != func) {
    2d6a:	2d00      	cmp	r5, #0
    2d6c:	f43f ae4a 	beq.w	2a04 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2d70:	2602      	movs	r6, #2
    2d72:	686b      	ldr	r3, [r5, #4]
    2d74:	4622      	mov	r2, r4
    2d76:	4631      	mov	r1, r6
    2d78:	4628      	mov	r0, r5
    2d7a:	4798      	blx	r3
    2d7c:	2800      	cmp	r0, #0
    2d7e:	da0f      	bge.n	2da0 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    2d80:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2d82:	2d00      	cmp	r5, #0
    2d84:	d1f5      	bne.n	2d72 <usbdc_cb_ctl_req+0x39e>
	return false;
    2d86:	2000      	movs	r0, #0
    2d88:	e63c      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    2d8a:	4914      	ldr	r1, [pc, #80]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2d8c:	694b      	ldr	r3, [r1, #20]
    2d8e:	2000      	movs	r0, #0
    2d90:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2d92:	4603      	mov	r3, r0
    2d94:	2201      	movs	r2, #1
    2d96:	6949      	ldr	r1, [r1, #20]
    2d98:	4c12      	ldr	r4, [pc, #72]	; (2de4 <usbdc_cb_ctl_req+0x410>)
    2d9a:	47a0      	blx	r4
		return true;
    2d9c:	2001      	movs	r0, #1
    2d9e:	e631      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2da0:	490e      	ldr	r1, [pc, #56]	; (2ddc <usbdc_cb_ctl_req+0x408>)
    2da2:	694b      	ldr	r3, [r1, #20]
    2da4:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2da6:	2300      	movs	r3, #0
    2da8:	2201      	movs	r2, #1
    2daa:	6949      	ldr	r1, [r1, #20]
    2dac:	4618      	mov	r0, r3
    2dae:	4c0d      	ldr	r4, [pc, #52]	; (2de4 <usbdc_cb_ctl_req+0x410>)
    2db0:	47a0      	blx	r4
			return true;
    2db2:	2001      	movs	r0, #1
    2db4:	e626      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return true;
    2db6:	2001      	movs	r0, #1
    2db8:	e624      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2dba:	2000      	movs	r0, #0
    2dbc:	e622      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2dbe:	2000      	movs	r0, #0
    2dc0:	e620      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2dc2:	2000      	movs	r0, #0
    2dc4:	e61e      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2dc6:	2000      	movs	r0, #0
    2dc8:	e61c      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2dca:	2000      	movs	r0, #0
    2dcc:	e61a      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2dce:	2000      	movs	r0, #0
    2dd0:	e618      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
		return false;
    2dd2:	2000      	movs	r0, #0
    2dd4:	e616      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
			return false;
    2dd6:	2000      	movs	r0, #0
    2dd8:	e614      	b.n	2a04 <usbdc_cb_ctl_req+0x30>
    2dda:	bf00      	nop
    2ddc:	20000654 	.word	0x20000654
    2de0:	00002f79 	.word	0x00002f79
    2de4:	000029b5 	.word	0x000029b5
    2de8:	00002fe1 	.word	0x00002fe1
    2dec:	000009fd 	.word	0x000009fd

00002df0 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2df0:	b508      	push	{r3, lr}
	switch (type) {
    2df2:	2801      	cmp	r0, #1
    2df4:	d007      	beq.n	2e06 <usbdc_register_handler+0x16>
    2df6:	b110      	cbz	r0, 2dfe <usbdc_register_handler+0xe>
    2df8:	2802      	cmp	r0, #2
    2dfa:	d008      	beq.n	2e0e <usbdc_register_handler+0x1e>
    2dfc:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2dfe:	4806      	ldr	r0, [pc, #24]	; (2e18 <usbdc_register_handler+0x28>)
    2e00:	4b06      	ldr	r3, [pc, #24]	; (2e1c <usbdc_register_handler+0x2c>)
    2e02:	4798      	blx	r3
		break;
    2e04:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2e06:	4806      	ldr	r0, [pc, #24]	; (2e20 <usbdc_register_handler+0x30>)
    2e08:	4b04      	ldr	r3, [pc, #16]	; (2e1c <usbdc_register_handler+0x2c>)
    2e0a:	4798      	blx	r3
		break;
    2e0c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2e0e:	4805      	ldr	r0, [pc, #20]	; (2e24 <usbdc_register_handler+0x34>)
    2e10:	4b02      	ldr	r3, [pc, #8]	; (2e1c <usbdc_register_handler+0x2c>)
    2e12:	4798      	blx	r3
    2e14:	bd08      	pop	{r3, pc}
    2e16:	bf00      	nop
    2e18:	20000658 	.word	0x20000658
    2e1c:	00000ad9 	.word	0x00000ad9
    2e20:	2000065c 	.word	0x2000065c
    2e24:	20000660 	.word	0x20000660

00002e28 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2e28:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    2e2a:	4605      	mov	r5, r0
    2e2c:	f240 3255 	movw	r2, #853	; 0x355
    2e30:	490c      	ldr	r1, [pc, #48]	; (2e64 <usbdc_init+0x3c>)
    2e32:	3000      	adds	r0, #0
    2e34:	bf18      	it	ne
    2e36:	2001      	movne	r0, #1
    2e38:	4b0b      	ldr	r3, [pc, #44]	; (2e68 <usbdc_init+0x40>)
    2e3a:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2e3c:	4b0b      	ldr	r3, [pc, #44]	; (2e6c <usbdc_init+0x44>)
    2e3e:	4798      	blx	r3
	if (rc < 0) {
    2e40:	2800      	cmp	r0, #0
    2e42:	db0e      	blt.n	2e62 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2e44:	4c0a      	ldr	r4, [pc, #40]	; (2e70 <usbdc_init+0x48>)
    2e46:	2220      	movs	r2, #32
    2e48:	2100      	movs	r1, #0
    2e4a:	4620      	mov	r0, r4
    2e4c:	4b09      	ldr	r3, [pc, #36]	; (2e74 <usbdc_init+0x4c>)
    2e4e:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2e50:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2e52:	4909      	ldr	r1, [pc, #36]	; (2e78 <usbdc_init+0x50>)
    2e54:	2000      	movs	r0, #0
    2e56:	4c09      	ldr	r4, [pc, #36]	; (2e7c <usbdc_init+0x54>)
    2e58:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2e5a:	4909      	ldr	r1, [pc, #36]	; (2e80 <usbdc_init+0x58>)
    2e5c:	2001      	movs	r0, #1
    2e5e:	47a0      	blx	r4

	return 0;
    2e60:	2000      	movs	r0, #0
}
    2e62:	bd38      	pop	{r3, r4, r5, pc}
    2e64:	000033b0 	.word	0x000033b0
    2e68:	00000ab1 	.word	0x00000ab1
    2e6c:	00000765 	.word	0x00000765
    2e70:	20000654 	.word	0x20000654
    2e74:	000032c7 	.word	0x000032c7
    2e78:	000028a9 	.word	0x000028a9
    2e7c:	000007cd 	.word	0x000007cd
    2e80:	00002995 	.word	0x00002995

00002e84 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2e84:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    2e86:	4601      	mov	r1, r0
    2e88:	4801      	ldr	r0, [pc, #4]	; (2e90 <usbdc_register_function+0xc>)
    2e8a:	4b02      	ldr	r3, [pc, #8]	; (2e94 <usbdc_register_function+0x10>)
    2e8c:	4798      	blx	r3
    2e8e:	bd08      	pop	{r3, pc}
    2e90:	20000664 	.word	0x20000664
    2e94:	00000ad9 	.word	0x00000ad9

00002e98 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    2e98:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    2e9a:	4b0a      	ldr	r3, [pc, #40]	; (2ec4 <usbdc_start+0x2c>)
    2e9c:	7e9b      	ldrb	r3, [r3, #26]
    2e9e:	b95b      	cbnz	r3, 2eb8 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    2ea0:	b168      	cbz	r0, 2ebe <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    2ea2:	4b08      	ldr	r3, [pc, #32]	; (2ec4 <usbdc_start+0x2c>)
    2ea4:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    2ea6:	6802      	ldr	r2, [r0, #0]
    2ea8:	79d2      	ldrb	r2, [r2, #7]
    2eaa:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2eac:	2201      	movs	r2, #1
    2eae:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2eb0:	4b05      	ldr	r3, [pc, #20]	; (2ec8 <usbdc_start+0x30>)
    2eb2:	4798      	blx	r3
	return ERR_NONE;
    2eb4:	2000      	movs	r0, #0
    2eb6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    2eb8:	f06f 0003 	mvn.w	r0, #3
    2ebc:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    2ebe:	f06f 0008 	mvn.w	r0, #8
}
    2ec2:	bd08      	pop	{r3, pc}
    2ec4:	20000654 	.word	0x20000654
    2ec8:	000007d9 	.word	0x000007d9

00002ecc <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2ecc:	b508      	push	{r3, lr}
	usb_d_attach();
    2ece:	4b01      	ldr	r3, [pc, #4]	; (2ed4 <usbdc_attach+0x8>)
    2ed0:	4798      	blx	r3
    2ed2:	bd08      	pop	{r3, pc}
    2ed4:	000007e5 	.word	0x000007e5

00002ed8 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    2ed8:	4b01      	ldr	r3, [pc, #4]	; (2ee0 <usbdc_get_ctrl_buffer+0x8>)
    2eda:	6958      	ldr	r0, [r3, #20]
    2edc:	4770      	bx	lr
    2ede:	bf00      	nop
    2ee0:	20000654 	.word	0x20000654

00002ee4 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2ee4:	4b03      	ldr	r3, [pc, #12]	; (2ef4 <usbdc_get_state+0x10>)
    2ee6:	7e98      	ldrb	r0, [r3, #26]
    2ee8:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    2eec:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    2eee:	bf18      	it	ne
    2ef0:	2010      	movne	r0, #16
    2ef2:	4770      	bx	lr
    2ef4:	20000654 	.word	0x20000654

00002ef8 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2ef8:	4288      	cmp	r0, r1
    2efa:	d214      	bcs.n	2f26 <usb_find_desc+0x2e>
	return desc[0];
    2efc:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2efe:	2b01      	cmp	r3, #1
    2f00:	d913      	bls.n	2f2a <usb_find_desc+0x32>
{
    2f02:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    2f04:	7844      	ldrb	r4, [r0, #1]
    2f06:	4294      	cmp	r4, r2
    2f08:	d00a      	beq.n	2f20 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    2f0a:	4418      	add	r0, r3
	while (desc < eof) {
    2f0c:	4281      	cmp	r1, r0
    2f0e:	d906      	bls.n	2f1e <usb_find_desc+0x26>
	return desc[0];
    2f10:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f12:	2b01      	cmp	r3, #1
    2f14:	d90b      	bls.n	2f2e <usb_find_desc+0x36>
	return desc[1];
    2f16:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2f18:	4294      	cmp	r4, r2
    2f1a:	d1f6      	bne.n	2f0a <usb_find_desc+0x12>
    2f1c:	e000      	b.n	2f20 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2f1e:	2000      	movs	r0, #0
}
    2f20:	f85d 4b04 	ldr.w	r4, [sp], #4
    2f24:	4770      	bx	lr
	return NULL;
    2f26:	2000      	movs	r0, #0
    2f28:	4770      	bx	lr
		_desc_len_check();
    2f2a:	2000      	movs	r0, #0
    2f2c:	4770      	bx	lr
    2f2e:	2000      	movs	r0, #0
    2f30:	e7f6      	b.n	2f20 <usb_find_desc+0x28>

00002f32 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2f32:	4288      	cmp	r0, r1
    2f34:	d216      	bcs.n	2f64 <usb_find_ep_desc+0x32>
	return desc[0];
    2f36:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f38:	2b01      	cmp	r3, #1
    2f3a:	d915      	bls.n	2f68 <usb_find_ep_desc+0x36>
	return desc[1];
    2f3c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2f3e:	2a04      	cmp	r2, #4
    2f40:	d014      	beq.n	2f6c <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2f42:	2a05      	cmp	r2, #5
    2f44:	d00b      	beq.n	2f5e <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    2f46:	4418      	add	r0, r3
	while (desc < eof) {
    2f48:	4281      	cmp	r1, r0
    2f4a:	d909      	bls.n	2f60 <usb_find_ep_desc+0x2e>
	return desc[0];
    2f4c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2f4e:	2b01      	cmp	r3, #1
    2f50:	d90e      	bls.n	2f70 <usb_find_ep_desc+0x3e>
	return desc[1];
    2f52:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2f54:	2a04      	cmp	r2, #4
    2f56:	d00d      	beq.n	2f74 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2f58:	2a05      	cmp	r2, #5
    2f5a:	d1f4      	bne.n	2f46 <usb_find_ep_desc+0x14>
    2f5c:	e00b      	b.n	2f76 <usb_find_ep_desc+0x44>
    2f5e:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2f60:	2000      	movs	r0, #0
    2f62:	4770      	bx	lr
    2f64:	2000      	movs	r0, #0
    2f66:	4770      	bx	lr
		_desc_len_check();
    2f68:	2000      	movs	r0, #0
    2f6a:	4770      	bx	lr
	return NULL;
    2f6c:	2000      	movs	r0, #0
    2f6e:	4770      	bx	lr
		_desc_len_check();
    2f70:	2000      	movs	r0, #0
    2f72:	4770      	bx	lr
	return NULL;
    2f74:	2000      	movs	r0, #0
}
    2f76:	4770      	bx	lr

00002f78 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2f78:	b538      	push	{r3, r4, r5, lr}
    2f7a:	460c      	mov	r4, r1
    2f7c:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2f7e:	2202      	movs	r2, #2
    2f80:	4b16      	ldr	r3, [pc, #88]	; (2fdc <usb_find_cfg_desc+0x64>)
    2f82:	4798      	blx	r3
	if (!desc) {
    2f84:	4603      	mov	r3, r0
    2f86:	b1e8      	cbz	r0, 2fc4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    2f88:	4284      	cmp	r4, r0
    2f8a:	d91d      	bls.n	2fc8 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    2f8c:	7802      	ldrb	r2, [r0, #0]
    2f8e:	2a01      	cmp	r2, #1
    2f90:	d91c      	bls.n	2fcc <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    2f92:	7842      	ldrb	r2, [r0, #1]
    2f94:	2a02      	cmp	r2, #2
    2f96:	d11b      	bne.n	2fd0 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    2f98:	7942      	ldrb	r2, [r0, #5]
    2f9a:	42aa      	cmp	r2, r5
    2f9c:	d012      	beq.n	2fc4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    2f9e:	78d9      	ldrb	r1, [r3, #3]
    2fa0:	789a      	ldrb	r2, [r3, #2]
    2fa2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    2fa6:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    2faa:	429c      	cmp	r4, r3
    2fac:	d909      	bls.n	2fc2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    2fae:	781a      	ldrb	r2, [r3, #0]
    2fb0:	2a01      	cmp	r2, #1
    2fb2:	d90f      	bls.n	2fd4 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    2fb4:	785a      	ldrb	r2, [r3, #1]
    2fb6:	2a02      	cmp	r2, #2
    2fb8:	d10e      	bne.n	2fd8 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    2fba:	795a      	ldrb	r2, [r3, #5]
    2fbc:	42aa      	cmp	r2, r5
    2fbe:	d1ee      	bne.n	2f9e <usb_find_cfg_desc+0x26>
    2fc0:	e000      	b.n	2fc4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2fc2:	2300      	movs	r3, #0
}
    2fc4:	4618      	mov	r0, r3
    2fc6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    2fc8:	2300      	movs	r3, #0
    2fca:	e7fb      	b.n	2fc4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2fcc:	2300      	movs	r3, #0
    2fce:	e7f9      	b.n	2fc4 <usb_find_cfg_desc+0x4c>
	return NULL;
    2fd0:	2300      	movs	r3, #0
    2fd2:	e7f7      	b.n	2fc4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2fd4:	2300      	movs	r3, #0
    2fd6:	e7f5      	b.n	2fc4 <usb_find_cfg_desc+0x4c>
	return NULL;
    2fd8:	2300      	movs	r3, #0
    2fda:	e7f3      	b.n	2fc4 <usb_find_cfg_desc+0x4c>
    2fdc:	00002ef9 	.word	0x00002ef9

00002fe0 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2fe0:	4288      	cmp	r0, r1
    2fe2:	d217      	bcs.n	3014 <usb_find_str_desc+0x34>
{
    2fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fe8:	460d      	mov	r5, r1
    2fea:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    2fec:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    2fee:	f04f 0803 	mov.w	r8, #3
    2ff2:	4f0c      	ldr	r7, [pc, #48]	; (3024 <usb_find_str_desc+0x44>)
    2ff4:	4642      	mov	r2, r8
    2ff6:	4629      	mov	r1, r5
    2ff8:	47b8      	blx	r7
		if (desc) {
    2ffa:	4603      	mov	r3, r0
    2ffc:	b170      	cbz	r0, 301c <usb_find_str_desc+0x3c>
	return desc[0];
    2ffe:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    3000:	2801      	cmp	r0, #1
    3002:	d90a      	bls.n	301a <usb_find_str_desc+0x3a>
			if (i == str_index) {
    3004:	42a6      	cmp	r6, r4
    3006:	d009      	beq.n	301c <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    3008:	4418      	add	r0, r3
    300a:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    300c:	4285      	cmp	r5, r0
    300e:	d8f1      	bhi.n	2ff4 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    3010:	2300      	movs	r3, #0
    3012:	e003      	b.n	301c <usb_find_str_desc+0x3c>
    3014:	2300      	movs	r3, #0
}
    3016:	4618      	mov	r0, r3
    3018:	4770      	bx	lr
			_desc_len_check();
    301a:	2300      	movs	r3, #0
}
    301c:	4618      	mov	r0, r3
    301e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3022:	bf00      	nop
    3024:	00002ef9 	.word	0x00002ef9

00003028 <main>:
#define msc_diskcache_buf NULL
#endif
#endif

int main(void)
{
    3028:	b508      	push	{r3, lr}
	atmel_start_init();
    302a:	4b06      	ldr	r3, [pc, #24]	; (3044 <main+0x1c>)
    302c:	4798      	blx	r3

	/* Do function or app specific initialize */
#if CDC_EN
	cdcdf_acm_demo_init((uint8_t *)cdc_demo_buf);
    302e:	4806      	ldr	r0, [pc, #24]	; (3048 <main+0x20>)
    3030:	4b06      	ldr	r3, [pc, #24]	; (304c <main+0x24>)
    3032:	4798      	blx	r3
#endif
#if KEYBOARD_EN || MOUSE_EN
	hiddf_demo_init(BUTTON1, BUTTON2, BUTTON3);
    3034:	2203      	movs	r2, #3
    3036:	2120      	movs	r1, #32
    3038:	2060      	movs	r0, #96	; 0x60
    303a:	4b05      	ldr	r3, [pc, #20]	; (3050 <main+0x28>)
    303c:	4798      	blx	r3
#if MSC_EN
	mscdf_demo_init((uint8_t *)msc_ramdisk_buf, (uint8_t *)msc_diskcache_buf);
#endif

	/* Start the composite device */
	composite_device_start();
    303e:	4b05      	ldr	r3, [pc, #20]	; (3054 <main+0x2c>)
    3040:	4798      	blx	r3
    3042:	e7fe      	b.n	3042 <main+0x1a>
    3044:	000002d1 	.word	0x000002d1
    3048:	20000674 	.word	0x20000674
    304c:	000031d9 	.word	0x000031d9
    3050:	000031f5 	.word	0x000031f5
    3054:	00003241 	.word	0x00003241

00003058 <cdcdf_demo_cb_state_c>:
{
	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS); /* Another read */
	return false;                                                                                 /* No error. */
}
static bool cdcdf_demo_cb_state_c(usb_cdc_control_signal_t state)
{
    3058:	b510      	push	{r4, lr}
    305a:	b082      	sub	sp, #8
    305c:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
    3060:	f010 0f01 	tst.w	r0, #1
    3064:	d102      	bne.n	306c <cdcdf_demo_cb_state_c+0x14>
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cdcdf_demo_cb_bulk_in);
		/* Start Rx */
		cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	}
	return false; /* No error. */
}
    3066:	2000      	movs	r0, #0
    3068:	b002      	add	sp, #8
    306a:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)cdcdf_demo_cb_bulk_out);
    306c:	4906      	ldr	r1, [pc, #24]	; (3088 <cdcdf_demo_cb_state_c+0x30>)
    306e:	2000      	movs	r0, #0
    3070:	4c06      	ldr	r4, [pc, #24]	; (308c <cdcdf_demo_cb_state_c+0x34>)
    3072:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)cdcdf_demo_cb_bulk_in);
    3074:	4906      	ldr	r1, [pc, #24]	; (3090 <cdcdf_demo_cb_state_c+0x38>)
    3076:	2001      	movs	r0, #1
    3078:	47a0      	blx	r4
		cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
    307a:	f44f 7100 	mov.w	r1, #512	; 0x200
    307e:	4b05      	ldr	r3, [pc, #20]	; (3094 <cdcdf_demo_cb_state_c+0x3c>)
    3080:	6818      	ldr	r0, [r3, #0]
    3082:	4b05      	ldr	r3, [pc, #20]	; (3098 <cdcdf_demo_cb_state_c+0x40>)
    3084:	4798      	blx	r3
    3086:	e7ee      	b.n	3066 <cdcdf_demo_cb_state_c+0xe>
    3088:	000030b9 	.word	0x000030b9
    308c:	000022e5 	.word	0x000022e5
    3090:	0000309d 	.word	0x0000309d
    3094:	200006b4 	.word	0x200006b4
    3098:	00002295 	.word	0x00002295

0000309c <cdcdf_demo_cb_bulk_in>:
{
    309c:	b508      	push	{r3, lr}
	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS); /* Another read */
    309e:	f44f 7100 	mov.w	r1, #512	; 0x200
    30a2:	4b03      	ldr	r3, [pc, #12]	; (30b0 <cdcdf_demo_cb_bulk_in+0x14>)
    30a4:	6818      	ldr	r0, [r3, #0]
    30a6:	4b03      	ldr	r3, [pc, #12]	; (30b4 <cdcdf_demo_cb_bulk_in+0x18>)
    30a8:	4798      	blx	r3
}
    30aa:	2000      	movs	r0, #0
    30ac:	bd08      	pop	{r3, pc}
    30ae:	bf00      	nop
    30b0:	200006b4 	.word	0x200006b4
    30b4:	00002295 	.word	0x00002295

000030b8 <cdcdf_demo_cb_bulk_out>:
{
    30b8:	b508      	push	{r3, lr}
	cdcdf_acm_write(cdcdf_demo_buf, count); /* Echo data */
    30ba:	4611      	mov	r1, r2
    30bc:	4b02      	ldr	r3, [pc, #8]	; (30c8 <cdcdf_demo_cb_bulk_out+0x10>)
    30be:	6818      	ldr	r0, [r3, #0]
    30c0:	4b02      	ldr	r3, [pc, #8]	; (30cc <cdcdf_demo_cb_bulk_out+0x14>)
    30c2:	4798      	blx	r3
}
    30c4:	2000      	movs	r0, #0
    30c6:	bd08      	pop	{r3, pc}
    30c8:	200006b4 	.word	0x200006b4
    30cc:	000022bd 	.word	0x000022bd

000030d0 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    30d0:	4b3a      	ldr	r3, [pc, #232]	; (31bc <hiddf_demo_sof_event+0xec>)
    30d2:	791b      	ldrb	r3, [r3, #4]
    30d4:	2b0a      	cmp	r3, #10
    30d6:	d803      	bhi.n	30e0 <hiddf_demo_sof_event+0x10>
    30d8:	3301      	adds	r3, #1
    30da:	4a38      	ldr	r2, [pc, #224]	; (31bc <hiddf_demo_sof_event+0xec>)
    30dc:	7113      	strb	r3, [r2, #4]
    30de:	4770      	bx	lr
{
    30e0:	b570      	push	{r4, r5, r6, lr}
    30e2:	b084      	sub	sp, #16
		interval = 0;
    30e4:	4b35      	ldr	r3, [pc, #212]	; (31bc <hiddf_demo_sof_event+0xec>)
    30e6:	2200      	movs	r2, #0
    30e8:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    30ea:	7a1d      	ldrb	r5, [r3, #8]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    30ec:	a801      	add	r0, sp, #4
    30ee:	4b34      	ldr	r3, [pc, #208]	; (31c0 <hiddf_demo_sof_event+0xf0>)
    30f0:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    30f2:	096b      	lsrs	r3, r5, #5
    30f4:	4933      	ldr	r1, [pc, #204]	; (31c4 <hiddf_demo_sof_event+0xf4>)
    30f6:	01db      	lsls	r3, r3, #7
    30f8:	18ca      	adds	r2, r1, r3
    30fa:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    30fc:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    30fe:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3100:	405c      	eors	r4, r3
    3102:	400c      	ands	r4, r1
    3104:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    3106:	a801      	add	r0, sp, #4
    3108:	4b2f      	ldr	r3, [pc, #188]	; (31c8 <hiddf_demo_sof_event+0xf8>)
    310a:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    310c:	f005 051f 	and.w	r5, r5, #31
    3110:	2301      	movs	r3, #1
    3112:	fa03 f505 	lsl.w	r5, r3, r5
    3116:	4225      	tst	r5, r4
    3118:	d040      	beq.n	319c <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    311a:	4b28      	ldr	r3, [pc, #160]	; (31bc <hiddf_demo_sof_event+0xec>)
    311c:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    311e:	a802      	add	r0, sp, #8
    3120:	4b27      	ldr	r3, [pc, #156]	; (31c0 <hiddf_demo_sof_event+0xf0>)
    3122:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3124:	096b      	lsrs	r3, r5, #5
    3126:	4927      	ldr	r1, [pc, #156]	; (31c4 <hiddf_demo_sof_event+0xf4>)
    3128:	01db      	lsls	r3, r3, #7
    312a:	18ca      	adds	r2, r1, r3
    312c:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    312e:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3130:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3132:	405c      	eors	r4, r3
    3134:	400c      	ands	r4, r1
    3136:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    3138:	a802      	add	r0, sp, #8
    313a:	4b23      	ldr	r3, [pc, #140]	; (31c8 <hiddf_demo_sof_event+0xf8>)
    313c:	4798      	blx	r3
    313e:	f005 051f 	and.w	r5, r5, #31
    3142:	2301      	movs	r3, #1
    3144:	fa03 f505 	lsl.w	r5, r3, r5
    3148:	4225      	tst	r5, r4
    314a:	d02d      	beq.n	31a8 <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    314c:	4d1b      	ldr	r5, [pc, #108]	; (31bc <hiddf_demo_sof_event+0xec>)
    314e:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    3150:	a803      	add	r0, sp, #12
    3152:	4b1b      	ldr	r3, [pc, #108]	; (31c0 <hiddf_demo_sof_event+0xf0>)
    3154:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3156:	0973      	lsrs	r3, r6, #5
    3158:	491a      	ldr	r1, [pc, #104]	; (31c4 <hiddf_demo_sof_event+0xf4>)
    315a:	01db      	lsls	r3, r3, #7
    315c:	18ca      	adds	r2, r1, r3
    315e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3160:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3162:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    3164:	405c      	eors	r4, r3
    3166:	400c      	ands	r4, r1
    3168:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    316a:	a803      	add	r0, sp, #12
    316c:	4b16      	ldr	r3, [pc, #88]	; (31c8 <hiddf_demo_sof_event+0xf8>)
    316e:	4798      	blx	r3
    3170:	f006 061f 	and.w	r6, r6, #31
    3174:	2301      	movs	r3, #1
    3176:	40b3      	lsls	r3, r6
    3178:	401c      	ands	r4, r3
    317a:	bf0c      	ite	eq
    317c:	2301      	moveq	r3, #1
    317e:	2300      	movne	r3, #0
    3180:	7d2a      	ldrb	r2, [r5, #20]
    3182:	429a      	cmp	r2, r3
    3184:	d008      	beq.n	3198 <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    3186:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    3188:	b19c      	cbz	r4, 31b2 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    318a:	2200      	movs	r2, #0
    318c:	4b0f      	ldr	r3, [pc, #60]	; (31cc <hiddf_demo_sof_event+0xfc>)
    318e:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    3190:	2101      	movs	r1, #1
    3192:	480e      	ldr	r0, [pc, #56]	; (31cc <hiddf_demo_sof_event+0xfc>)
    3194:	4b0e      	ldr	r3, [pc, #56]	; (31d0 <hiddf_demo_sof_event+0x100>)
    3196:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    3198:	b004      	add	sp, #16
    319a:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    319c:	4619      	mov	r1, r3
    319e:	f06f 0004 	mvn.w	r0, #4
    31a2:	4b0c      	ldr	r3, [pc, #48]	; (31d4 <hiddf_demo_sof_event+0x104>)
    31a4:	4798      	blx	r3
    31a6:	e7b8      	b.n	311a <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    31a8:	4619      	mov	r1, r3
    31aa:	2005      	movs	r0, #5
    31ac:	4b09      	ldr	r3, [pc, #36]	; (31d4 <hiddf_demo_sof_event+0x104>)
    31ae:	4798      	blx	r3
    31b0:	e7cc      	b.n	314c <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    31b2:	2201      	movs	r2, #1
    31b4:	4b05      	ldr	r3, [pc, #20]	; (31cc <hiddf_demo_sof_event+0xfc>)
    31b6:	709a      	strb	r2, [r3, #2]
    31b8:	e7ea      	b.n	3190 <hiddf_demo_sof_event+0xc0>
    31ba:	bf00      	nop
    31bc:	200006b4 	.word	0x200006b4
    31c0:	000004f5 	.word	0x000004f5
    31c4:	41008000 	.word	0x41008000
    31c8:	00000503 	.word	0x00000503
    31cc:	20000018 	.word	0x20000018
    31d0:	00002549 	.word	0x00002549
    31d4:	000027dd 	.word	0x000027dd

000031d8 <cdcdf_acm_demo_init>:
{
    31d8:	b508      	push	{r3, lr}
	cdcdf_demo_buf = bulk_packet_buffer;
    31da:	4b03      	ldr	r3, [pc, #12]	; (31e8 <cdcdf_acm_demo_init+0x10>)
    31dc:	6018      	str	r0, [r3, #0]
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)cdcdf_demo_cb_state_c);
    31de:	4903      	ldr	r1, [pc, #12]	; (31ec <cdcdf_acm_demo_init+0x14>)
    31e0:	2003      	movs	r0, #3
    31e2:	4b03      	ldr	r3, [pc, #12]	; (31f0 <cdcdf_acm_demo_init+0x18>)
    31e4:	4798      	blx	r3
    31e6:	bd08      	pop	{r3, pc}
    31e8:	200006b4 	.word	0x200006b4
    31ec:	00003059 	.word	0x00003059
    31f0:	000022e5 	.word	0x000022e5

000031f4 <hiddf_demo_init>:
static struct usbdc_handler hiddf_demo_sof_event_h = {NULL, (FUNC_PTR)hiddf_demo_sof_event};
void                        hiddf_demo_init(uint32_t btn1, uint32_t btn2, uint32_t btn3)
{
    31f4:	b508      	push	{r3, lr}
	pin_btn1 = btn1;
    31f6:	4b04      	ldr	r3, [pc, #16]	; (3208 <hiddf_demo_init+0x14>)
    31f8:	6098      	str	r0, [r3, #8]
	pin_btn2 = btn2;
    31fa:	6119      	str	r1, [r3, #16]
	pin_btn3 = btn3;
    31fc:	60da      	str	r2, [r3, #12]
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
    31fe:	4903      	ldr	r1, [pc, #12]	; (320c <hiddf_demo_init+0x18>)
    3200:	2000      	movs	r0, #0
    3202:	4b03      	ldr	r3, [pc, #12]	; (3210 <hiddf_demo_init+0x1c>)
    3204:	4798      	blx	r3
    3206:	bd08      	pop	{r3, pc}
    3208:	200006b4 	.word	0x200006b4
    320c:	2000001c 	.word	0x2000001c
    3210:	00002df1 	.word	0x00002df1

00003214 <composite_device_init>:
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    3214:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    3216:	4805      	ldr	r0, [pc, #20]	; (322c <composite_device_init+0x18>)
    3218:	4b05      	ldr	r3, [pc, #20]	; (3230 <composite_device_init+0x1c>)
    321a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    321c:	4b05      	ldr	r3, [pc, #20]	; (3234 <composite_device_init+0x20>)
    321e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    3220:	4b05      	ldr	r3, [pc, #20]	; (3238 <composite_device_init+0x24>)
    3222:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    3224:	4b05      	ldr	r3, [pc, #20]	; (323c <composite_device_init+0x28>)
    3226:	4798      	blx	r3
    3228:	bd08      	pop	{r3, pc}
    322a:	bf00      	nop
    322c:	200006cc 	.word	0x200006cc
    3230:	00002e29 	.word	0x00002e29
    3234:	00002251 	.word	0x00002251
    3238:	00002799 	.word	0x00002799
    323c:	00002505 	.word	0x00002505

00003240 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    3240:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    3242:	4803      	ldr	r0, [pc, #12]	; (3250 <composite_device_start+0x10>)
    3244:	4b03      	ldr	r3, [pc, #12]	; (3254 <composite_device_start+0x14>)
    3246:	4798      	blx	r3
	usbdc_attach();
    3248:	4b03      	ldr	r3, [pc, #12]	; (3258 <composite_device_start+0x18>)
    324a:	4798      	blx	r3
    324c:	bd08      	pop	{r3, pc}
    324e:	bf00      	nop
    3250:	20000024 	.word	0x20000024
    3254:	00002e99 	.word	0x00002e99
    3258:	00002ecd 	.word	0x00002ecd

0000325c <usb_init>:
		}
	}
}

void usb_init(void)
{
    325c:	b508      	push	{r3, lr}

	composite_device_init();
    325e:	4b01      	ldr	r3, [pc, #4]	; (3264 <usb_init+0x8>)
    3260:	4798      	blx	r3
    3262:	bd08      	pop	{r3, pc}
    3264:	00003215 	.word	0x00003215

00003268 <__libc_init_array>:
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	4e0d      	ldr	r6, [pc, #52]	; (32a0 <__libc_init_array+0x38>)
    326c:	4c0d      	ldr	r4, [pc, #52]	; (32a4 <__libc_init_array+0x3c>)
    326e:	1ba4      	subs	r4, r4, r6
    3270:	10a4      	asrs	r4, r4, #2
    3272:	2500      	movs	r5, #0
    3274:	42a5      	cmp	r5, r4
    3276:	d109      	bne.n	328c <__libc_init_array+0x24>
    3278:	4e0b      	ldr	r6, [pc, #44]	; (32a8 <__libc_init_array+0x40>)
    327a:	4c0c      	ldr	r4, [pc, #48]	; (32ac <__libc_init_array+0x44>)
    327c:	f000 f8a4 	bl	33c8 <_init>
    3280:	1ba4      	subs	r4, r4, r6
    3282:	10a4      	asrs	r4, r4, #2
    3284:	2500      	movs	r5, #0
    3286:	42a5      	cmp	r5, r4
    3288:	d105      	bne.n	3296 <__libc_init_array+0x2e>
    328a:	bd70      	pop	{r4, r5, r6, pc}
    328c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3290:	4798      	blx	r3
    3292:	3501      	adds	r5, #1
    3294:	e7ee      	b.n	3274 <__libc_init_array+0xc>
    3296:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    329a:	4798      	blx	r3
    329c:	3501      	adds	r5, #1
    329e:	e7f2      	b.n	3286 <__libc_init_array+0x1e>
    32a0:	000033d4 	.word	0x000033d4
    32a4:	000033d4 	.word	0x000033d4
    32a8:	000033d4 	.word	0x000033d4
    32ac:	000033d8 	.word	0x000033d8

000032b0 <memcpy>:
    32b0:	b510      	push	{r4, lr}
    32b2:	1e43      	subs	r3, r0, #1
    32b4:	440a      	add	r2, r1
    32b6:	4291      	cmp	r1, r2
    32b8:	d100      	bne.n	32bc <memcpy+0xc>
    32ba:	bd10      	pop	{r4, pc}
    32bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    32c0:	f803 4f01 	strb.w	r4, [r3, #1]!
    32c4:	e7f7      	b.n	32b6 <memcpy+0x6>

000032c6 <memset>:
    32c6:	4402      	add	r2, r0
    32c8:	4603      	mov	r3, r0
    32ca:	4293      	cmp	r3, r2
    32cc:	d100      	bne.n	32d0 <memset+0xa>
    32ce:	4770      	bx	lr
    32d0:	f803 1b01 	strb.w	r1, [r3], #1
    32d4:	e7f9      	b.n	32ca <memset+0x4>
    32d6:	0000      	movs	r0, r0
    32d8:	682f2e2e 	.word	0x682f2e2e
    32dc:	752f6c61 	.word	0x752f6c61
    32e0:	736c6974 	.word	0x736c6974
    32e4:	6372732f 	.word	0x6372732f
    32e8:	6974752f 	.word	0x6974752f
    32ec:	6c5f736c 	.word	0x6c5f736c
    32f0:	2e747369 	.word	0x2e747369
    32f4:	00000063 	.word	0x00000063

000032f8 <_usb_ep_cfgs>:
    32f8:	200005b8 00000000 00000040 00000000     ... ....@.......
	...
    3310:	200005b0 00000000 00000008 20000570     ... ........p.. 
    3320:	00000000 00000040 00000000 00000000     ....@...........
	...

00003340 <keyboard_report_desc>:
    3340:	06090105 070501a1 e729e019 01250015     ..........)...%.
    3350:	08950175 01810281 65290019 65250015     u.........)e..%e
    3360:	06950875 08050081 05290119 01250015     u.........)...%.
    3370:	05950175 03950291 00c00191              u...........

0000337c <mouse_report_desc>:
    337c:	02090105 010901a1 090500a1 03290119     ..............).
    338c:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    339c:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    33ac:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    33bc:	73752f65 2e636462 00000063              e/usbdc.c...

000033c8 <_init>:
    33c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33ca:	bf00      	nop
    33cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33ce:	bc08      	pop	{r3}
    33d0:	469e      	mov	lr, r3
    33d2:	4770      	bx	lr

000033d4 <__init_array_start>:
    33d4:	00000289 	.word	0x00000289

000033d8 <_fini>:
    33d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33da:	bf00      	nop
    33dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33de:	bc08      	pop	{r3}
    33e0:	469e      	mov	lr, r3
    33e2:	4770      	bx	lr

000033e4 <__fini_array_start>:
    33e4:	00000265 	.word	0x00000265
